/* Generated by Cython 0.23.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "PrefixEvent.h", 
            "ReuseInfo.h", 
            "TopPair.h"
        ], 
        "extra_compile_args": [
            "-O3", 
            "-ffast-math", 
            "-march=native", 
            "-fopenmp", 
            "-std=c++11"
        ], 
        "extra_link_args": [
            "-fopenmp"
        ], 
        "language": "c++", 
        "libraries": [
            "m"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__debugblock__debugblocker_cython
#define __PYX_HAVE_API__debugblock__debugblocker_cython
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include "string.h"
#include <string>
#include "stdio.h"
#include "stdint.h"
#include <set>
#include <map>
#include "stdlib.h"
#include "TopPair.h"
#include "PrefixEvent.h"
#include "ReuseInfo.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "debugblock/new_topk_sim_join.pyx",
  "debugblock/debugblocker_cython.pyx",
  "debugblock/original_topk_sim_join.pyx",
  "debugblock/stringsource",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

static CYTHON_INLINE long __Pyx_div_long(long, long);

#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_INLINE int __Pyx_div_int(int, int);

static CYTHON_INLINE int __Pyx_mod_int(int, int);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'debugblock.debugblocker_cython' */
static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_plain(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_plain_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const ); /*proto*/
static int __pyx_f_10debugblock_19debugblocker_cython_new_plain_get_overlap(std::vector<int>  const &, std::vector<int>  const &); /*proto*/
static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_record(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, int const , int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_record_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_new_reuse_get_overlap(std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  const &, int const , int const , ReuseInfo &, int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_init_shift_array(int const , int const , int const , uint64_t *); /*proto*/
static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_reuse(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_set<int>  &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, int const , int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_reuse_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_set<int>  &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const , int const ); /*proto*/
static int __pyx_f_10debugblock_19debugblocker_cython_new_get_overlap(std::vector<int>  const &, std::vector<int>  const &, int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::priority_queue<PrefixEvent>  &); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events_impl(std::vector<std::vector<int> >  const &, int const , std::priority_queue<PrefixEvent>  &); /*proto*/
static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_plain(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_plain_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const ); /*proto*/
static int __pyx_f_10debugblock_19debugblocker_cython_original_plain_get_overlap(std::vector<int>  const &, std::vector<int>  const &); /*proto*/
static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_record(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_record_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_original_reuse_get_overlap(std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  const &, int const , int const , ReuseInfo &, int const ); /*proto*/
static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_reuse(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_set<int>  &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_reuse_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_set<int>  &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const ); /*proto*/
static int __pyx_f_10debugblock_19debugblocker_cython_original_get_overlap(std::vector<int>  const &, std::vector<int>  const &, int const , int const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::priority_queue<PrefixEvent>  &); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events_impl(std::vector<std::vector<int> >  const &, int const , std::priority_queue<PrefixEvent>  &); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  &, std::vector<std::vector<TopPair> >  &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> > , uint32_t const , uint32_t const , uint32_t const , uint32_t const , double const , uint32_t const , std::string const , bool const ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_generate_recom_list_for_config(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, uint32_t const , uint32_t const , uint32_t const , uint32_t const , bool const , uint32_t const , std::string const &); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_save_topk_list_to_file(std::vector<int>  const &, std::string const &, std::priority_queue<TopPair> ); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  &, int); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_remove_field(std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(PyObject *, std::vector<std::vector<int> >  &); /*proto*/
static void __pyx_f_10debugblock_19debugblocker_cython_convert_candidate_set_to_c_map(PyObject *, std::unordered_map<int,std::unordered_set<int> >  &); /*proto*/
static int __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(PyObject *, std::vector<int>  &); /*proto*/
static double __pyx_f_10debugblock_19debugblocker_cython_double_max(double const , double); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
#define __Pyx_MODULE_NAME "debugblock.debugblocker_cython"
int __pyx_module_is_main_debugblock__debugblocker_cython = 0;

/* Implementation of 'debugblock.debugblocker_cython' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_reversed;
static char __pyx_k_[] = ", ";
static char __pyx_k_d[] = "%d";
static char __pyx_k_i[] = "i";
static char __pyx_k_s[] = "%s\n";
static char __pyx_k_w[] = "w+";
static char __pyx_k__2[] = "]  ";
static char __pyx_k__3[] = "_";
static char __pyx_k_end[] = "end";
static char __pyx_k_txt[] = ".txt";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_time[] = "time";
static char __pyx_k_topk[] = "topk_";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_remove[] = "remove";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_16f_d_d[] = "%.16f %d %d\n";
static char __pyx_k_cand_set[] = "cand_set";
static char __pyx_k_new_topk[] = "new topk";
static char __pyx_k_reversed[] = "reversed";
static char __pyx_k_join_time[] = "join time:";
static char __pyx_k_reuse_set[] = "reuse_set";
static char __pyx_k_use_plain[] = "use_plain";
static char __pyx_k_field_list[] = "field_list";
static char __pyx_k_ltoken_sum[] = "ltoken_sum";
static char __pyx_k_rtoken_sum[] = "rtoken_sum";
static char __pyx_k_topk_lists[] = "topk_lists";
static char __pyx_k_in_new_topk[] = "in new topk\n";
static char __pyx_k_output_path[] = "output_path";
static char __pyx_k_output_size[] = "output_size";
static char __pyx_k_py_cand_set[] = "py_cand_set";
static char __pyx_k_py_use_plain[] = "py_use_plain";
static char __pyx_k_lindex_vector[] = "lindex_vector";
static char __pyx_k_ltoken_vector[] = "ltoken_vector";
static char __pyx_k_original_topk[] = "original topk";
static char __pyx_k_py_num_fields[] = "py_num_fields";
static char __pyx_k_rindex_vector[] = "rindex_vector";
static char __pyx_k_rtoken_vector[] = "rtoken_vector";
static char __pyx_k_too_few_lists[] = "too few lists:";
static char __pyx_k_py_output_path[] = "py_output_path";
static char __pyx_k_py_output_size[] = "py_output_size";
static char __pyx_k_actual_max_ratio[] = "actual max ratio:";
static char __pyx_k_FIELD_REMOVE_RATIO[] = "FIELD_REMOVE_RATIO";
static char __pyx_k_MINIMAL_NUM_FIELDS[] = "MINIMAL_NUM_FIELDS";
static char __pyx_k_field_remove_ratio[] = "field_remove_ratio";
static char __pyx_k_lrecord_index_list[] = "lrecord_index_list";
static char __pyx_k_lrecord_token_list[] = "lrecord_token_list";
static char __pyx_k_minimal_num_fields[] = "minimal_num_fields";
static char __pyx_k_rrecord_index_list[] = "rrecord_index_list";
static char __pyx_k_rrecord_token_list[] = "rrecord_token_list";
static char __pyx_k_OFFSET_OF_FIELD_NUM[] = "OFFSET_OF_FIELD_NUM";
static char __pyx_k_debugblocker_cython[] = "debugblocker_cython";
static char __pyx_k_offset_of_field_num[] = "offset_of_field_num";
static char __pyx_k_ld_16f_d_d_16f_d_d_d[] = "%ld (%.16f %d %d) (%.16f %d %d %d)\n";
static char __pyx_k_PREFIX_MATCH_MAX_SIZE[] = "PREFIX_MATCH_MAX_SIZE";
static char __pyx_k_current_configuration[] = "current configuration: [";
static char __pyx_k_prefix_match_max_size[] = "prefix_match_max_size";
static char __pyx_k_PREFIX_MULTIPLY_FACTOR[] = "PREFIX_MULTIPLY_FACTOR";
static char __pyx_k_ltable_field_token_sum[] = "ltable_field_token_sum";
static char __pyx_k_prefix_multiply_factor[] = "prefix_multiply_factor";
static char __pyx_k_rtable_field_token_sum[] = "rtable_field_token_sum";
static char __pyx_k_number_of_compared_pairs_ld[] = "number of compared pairs: %ld\n";
static char __pyx_k_required_remove_field_ratio[] = "required remove-field ratio:";
static char __pyx_k_debugblock_debugblocker_cython[] = "debugblock.debugblocker_cython";
static char __pyx_k_Users_lihan_Documents_CharmPyWo[] = "/Users/lihan/Documents/CharmPyWorkspace/debug_blocking_cython/debugblock/debugblocker_cython.pyx";
static PyObject *__pyx_n_s_FIELD_REMOVE_RATIO;
static PyObject *__pyx_n_s_MINIMAL_NUM_FIELDS;
static PyObject *__pyx_n_s_OFFSET_OF_FIELD_NUM;
static PyObject *__pyx_n_s_PREFIX_MATCH_MAX_SIZE;
static PyObject *__pyx_n_s_PREFIX_MULTIPLY_FACTOR;
static PyObject *__pyx_kp_s_Users_lihan_Documents_CharmPyWo;
static PyObject *__pyx_kp_s_actual_max_ratio;
static PyObject *__pyx_n_s_cand_set;
static PyObject *__pyx_n_s_debugblock_debugblocker_cython;
static PyObject *__pyx_n_s_debugblocker_cython;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_field_list;
static PyObject *__pyx_n_s_field_remove_ratio;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_s_join_time;
static PyObject *__pyx_n_s_lindex_vector;
static PyObject *__pyx_n_s_lrecord_index_list;
static PyObject *__pyx_n_s_lrecord_token_list;
static PyObject *__pyx_n_s_ltable_field_token_sum;
static PyObject *__pyx_n_s_ltoken_sum;
static PyObject *__pyx_n_s_ltoken_vector;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_minimal_num_fields;
static PyObject *__pyx_n_s_offset_of_field_num;
static PyObject *__pyx_n_s_output_path;
static PyObject *__pyx_n_s_output_size;
static PyObject *__pyx_n_s_prefix_match_max_size;
static PyObject *__pyx_n_s_prefix_multiply_factor;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_cand_set;
static PyObject *__pyx_n_s_py_num_fields;
static PyObject *__pyx_n_s_py_output_path;
static PyObject *__pyx_n_s_py_output_size;
static PyObject *__pyx_n_s_py_use_plain;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_kp_s_required_remove_field_ratio;
static PyObject *__pyx_n_s_reuse_set;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_rindex_vector;
static PyObject *__pyx_n_s_rrecord_index_list;
static PyObject *__pyx_n_s_rrecord_token_list;
static PyObject *__pyx_n_s_rtable_field_token_sum;
static PyObject *__pyx_n_s_rtoken_sum;
static PyObject *__pyx_n_s_rtoken_vector;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_kp_s_too_few_lists;
static PyObject *__pyx_n_s_topk_lists;
static PyObject *__pyx_n_s_use_plain;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_10debugblock_19debugblocker_cython_debugblocker_cython(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lrecord_token_list, PyObject *__pyx_v_rrecord_token_list, PyObject *__pyx_v_lrecord_index_list, PyObject *__pyx_v_rrecord_index_list, PyObject *__pyx_v_ltable_field_token_sum, PyObject *__pyx_v_rtable_field_token_sum, PyObject *__pyx_v_py_cand_set, PyObject *__pyx_v_py_num_fields, PyObject *__pyx_v_py_output_size, PyObject *__pyx_v_py_output_path, PyObject *__pyx_v_py_use_plain); /* proto */
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_10;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_codeobj__5;

/* "new_topk_sim_join.pyx":45
 * ####################################################################################################
 * # For new topk sim join. The simplest version. Don't reuse or recording.
 * cdef heap[TopPair] new_topk_sim_join_plain(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            umap[int, uset[int]]& cand_set,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_plain(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "new_topk_sim_join.pyx":51
 *                                            const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     new_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "new_topk_sim_join.pyx":54
 * 
 *     cdef heap[TopPair] topk_heap
 *     new_topk_sim_join_plain_impl(ltoken_vector, rtoken_vector,             # <<<<<<<<<<<<<<
 *                                  cand_set, prefix_events, topk_heap,
 *                                  prefix_match_max_size, output_size)
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_plain_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_cand_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

  /* "new_topk_sim_join.pyx":58
 *                                  prefix_match_max_size, output_size)
 * 
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":45
 * ####################################################################################################
 * # For new topk sim join. The simplest version. Don't reuse or recording.
 * cdef heap[TopPair] new_topk_sim_join_plain(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "new_topk_sim_join.pyx":61
 * 
 * 
 * cdef void new_topk_sim_join_plain_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        umap[int, uset[int]]& cand_set, heap[PrefixEvent]& prefix_events,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_plain_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_set<uint64_t>  __pyx_v_total_compared_pairs_set;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::unordered_map<int,std::unordered_map<int,short> >  __pyx_v_active_dict;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  double __pyx_v_sim;
  double __pyx_v_threshold;
  uint64_t __pyx_v_value;
  double __pyx_v_bound;
  std::pair<int,std::unordered_map<int,short> >  __pyx_v_p1;
  std::pair<int,short>  __pyx_v_p2;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::set<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  double __pyx_t_6;
  std::unordered_set<int>  __pyx_t_7;
  int __pyx_t_8;
  std::unordered_map<int,short>  __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  std::set<std::pair<int,int> >  __pyx_t_12;
  std::unordered_map<int,std::unordered_map<int,short> > ::iterator __pyx_t_13;
  std::pair<int,std::unordered_map<int,short> >  __pyx_t_14;
  std::unordered_map<int,short> ::iterator __pyx_t_15;
  std::unordered_map<int,short>  *__pyx_t_16;
  std::pair<int,short>  __pyx_t_17;
  long __pyx_t_18;
  short __pyx_t_19;
  uint64_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "new_topk_sim_join.pyx":66
 *                                        heap[TopPair]& topk_heap, const int prefix_match_max_size,
 *                                        const int output_size) nogil:
 *     printf("in new topk\n")             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t total_compared_pairs = 0
 */
  printf(__pyx_k_in_new_topk);

  /* "new_topk_sim_join.pyx":68
 *     printf("in new topk\n")
 * 
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef uset[uint64_t] total_compared_pairs_set
 *     cdef umap[int, uset[int]] compared_set
 */
  __pyx_v_total_compared_pairs = 0;

  /* "new_topk_sim_join.pyx":84
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "new_topk_sim_join.pyx":85
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "new_topk_sim_join.pyx":86
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "new_topk_sim_join.pyx":85
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "new_topk_sim_join.pyx":87
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "new_topk_sim_join.pyx":88
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_prefix_events.pop();

    /* "new_topk_sim_join.pyx":89
 *         event = prefix_events.top()
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 */
    __pyx_t_3 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_3;

    /* "new_topk_sim_join.pyx":91
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_1 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_1) {

      /* "new_topk_sim_join.pyx":92
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":93
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":94
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "new_topk_sim_join.pyx":95
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "new_topk_sim_join.pyx":96
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_1 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":97
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "new_topk_sim_join.pyx":98
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_r_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_r_rec_tuple = __pyx_t_5;

          /* "new_topk_sim_join.pyx":99
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":100
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":101
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "new_topk_sim_join.pyx":103
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L13_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":104
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "new_topk_sim_join.pyx":103
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":106
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":107
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 * 
 */
            goto __pyx_L10_continue;

            /* "new_topk_sim_join.pyx":106
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":110
 * 
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("left1\n")
 *                         overlap = 1
 */
          __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":112
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         # printf("left1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "new_topk_sim_join.pyx":113
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L22_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L22_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":114
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "new_topk_sim_join.pyx":115
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":113
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":117
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 * 
 *                         if topk_heap.size() == output_size:
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

            /* "new_topk_sim_join.pyx":119
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":120
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":121
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":122
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":120
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":119
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L24;
            }

            /* "new_topk_sim_join.pyx":124
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L24:;

            /* "new_topk_sim_join.pyx":126
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("left2\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":110
 * 
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("left1\n")
 *                         overlap = 1
 */
            goto __pyx_L18;
          }

          /* "new_topk_sim_join.pyx":127
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("left2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
          __pyx_t_1 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":129
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("left2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

            /* "new_topk_sim_join.pyx":131
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L27_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L27_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":133
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":131
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":135
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

            /* "new_topk_sim_join.pyx":136
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":137
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":138
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":139
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":137
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":136
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L29;
            }

            /* "new_topk_sim_join.pyx":141
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L29:;

            /* "new_topk_sim_join.pyx":143
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":144
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":143
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L31;
            }

            /* "new_topk_sim_join.pyx":146
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_7 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

              /* "new_topk_sim_join.pyx":147
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L31:;

            /* "new_topk_sim_join.pyx":149
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("left3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":127
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("left2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
            goto __pyx_L18;
          }

          /* "new_topk_sim_join.pyx":152
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":154
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":156
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "new_topk_sim_join.pyx":157
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     #overlap = value
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":160
 *                                     # printf("left3.1.1.1\n")
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                  __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

                  /* "new_topk_sim_join.pyx":161
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "new_topk_sim_join.pyx":163
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_6 = (__pyx_v_overlap * 1.0);
                  __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_3 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

                  /* "new_topk_sim_join.pyx":164
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":165
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":166
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "new_topk_sim_join.pyx":167
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "new_topk_sim_join.pyx":165
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "new_topk_sim_join.pyx":164
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L35;
                  }

                  /* "new_topk_sim_join.pyx":169
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L35:;

                  /* "new_topk_sim_join.pyx":171
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":172
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "new_topk_sim_join.pyx":171
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L37;
                  }

                  /* "new_topk_sim_join.pyx":174
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_7 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

                    /* "new_topk_sim_join.pyx":175
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L37:;

                  /* "new_topk_sim_join.pyx":177
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "new_topk_sim_join.pyx":157
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     #overlap = value
 */
                  goto __pyx_L34;
                }

                /* "new_topk_sim_join.pyx":179
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 # printf("left3.1.2\n")
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_8 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) + 1);
                }
                __pyx_L34:;

                /* "new_topk_sim_join.pyx":154
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
                goto __pyx_L33;
              }

              /* "new_topk_sim_join.pyx":182
 *                             else:
 *                                 # printf("left3.1.2\n")
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L33:;

              /* "new_topk_sim_join.pyx":152
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
              goto __pyx_L32;
            }

            /* "new_topk_sim_join.pyx":184
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_9 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_9;

              /* "new_topk_sim_join.pyx":185
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L32:;
          }
          __pyx_L18:;

          /* "new_topk_sim_join.pyx":188
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L39_bool_binop_done;
          }

          /* "new_topk_sim_join.pyx":189
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L39_bool_binop_done:;

          /* "new_topk_sim_join.pyx":188
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":190
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "new_topk_sim_join.pyx":191
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":192
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "new_topk_sim_join.pyx":191
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "new_topk_sim_join.pyx":188
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "new_topk_sim_join.pyx":98
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "new_topk_sim_join.pyx":96
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "new_topk_sim_join.pyx":197
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_l_tok_idx + 1) < __pyx_v_l_len) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":198
 * 
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 */
        __pyx_t_6 = 1.0;
        __pyx_t_10 = (((__pyx_v_l_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_l_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_11 = (1.0 - (__pyx_t_10 / __pyx_v_l_len));
        if (((__pyx_t_6 < __pyx_t_11) != 0)) {
          __pyx_t_10 = __pyx_t_6;
        } else {
          __pyx_t_10 = __pyx_t_11;
        }
        __pyx_v_threshold = __pyx_t_10;

        /* "new_topk_sim_join.pyx":199
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_l_rec_idx, (__pyx_v_l_tok_idx + 1)));

        /* "new_topk_sim_join.pyx":197
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      }

      /* "new_topk_sim_join.pyx":201
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":202
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_12 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_12;

        /* "new_topk_sim_join.pyx":201
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "new_topk_sim_join.pyx":203
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "new_topk_sim_join.pyx":91
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "new_topk_sim_join.pyx":205
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":206
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":207
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "new_topk_sim_join.pyx":208
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "new_topk_sim_join.pyx":209
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_1 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":210
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "new_topk_sim_join.pyx":211
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_l_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_l_rec_tuple = __pyx_t_5;

          /* "new_topk_sim_join.pyx":212
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":213
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":214
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "new_topk_sim_join.pyx":216
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L48_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L48_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":217
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L45_continue;

            /* "new_topk_sim_join.pyx":216
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":219
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L51_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L51_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":220
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L45_continue;

            /* "new_topk_sim_join.pyx":219
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":222
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("right1\n")
 *                         overlap = 1
 */
          __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L54_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L54_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":224
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         # printf("right1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "new_topk_sim_join.pyx":225
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L57_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L57_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":226
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "new_topk_sim_join.pyx":227
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":225
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":229
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 * 
 *                         if topk_heap.size() == output_size:
 */
            __pyx_t_10 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_10 / __pyx_t_3);

            /* "new_topk_sim_join.pyx":231
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":232
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":233
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":234
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":232
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":231
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L59;
            }

            /* "new_topk_sim_join.pyx":236
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L59:;

            /* "new_topk_sim_join.pyx":238
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("right2\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":222
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("right1\n")
 *                         overlap = 1
 */
            goto __pyx_L53;
          }

          /* "new_topk_sim_join.pyx":239
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("right2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
          __pyx_t_1 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":241
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("right2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

            /* "new_topk_sim_join.pyx":243
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L62_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L62_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":245
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":243
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":247
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_10 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_10 / __pyx_t_3);

            /* "new_topk_sim_join.pyx":248
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":249
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":250
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":251
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":249
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":248
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L64;
            }

            /* "new_topk_sim_join.pyx":253
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L64:;

            /* "new_topk_sim_join.pyx":255
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":256
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":255
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L66;
            }

            /* "new_topk_sim_join.pyx":258
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_7 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

              /* "new_topk_sim_join.pyx":259
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L66:;

            /* "new_topk_sim_join.pyx":261
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("right3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":239
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("right2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
            goto __pyx_L53;
          }

          /* "new_topk_sim_join.pyx":264
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":265
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":266
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     #overlap = value
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "new_topk_sim_join.pyx":267
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":269
 *                                 if value == prefix_match_max_size:
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                  __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

                  /* "new_topk_sim_join.pyx":270
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "new_topk_sim_join.pyx":272
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_10 = (__pyx_v_overlap * 1.0);
                  __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_3 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_10 / __pyx_t_3);

                  /* "new_topk_sim_join.pyx":273
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":274
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":275
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "new_topk_sim_join.pyx":276
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "new_topk_sim_join.pyx":274
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "new_topk_sim_join.pyx":273
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L70;
                  }

                  /* "new_topk_sim_join.pyx":278
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L70:;

                  /* "new_topk_sim_join.pyx":280
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":281
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "new_topk_sim_join.pyx":280
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L72;
                  }

                  /* "new_topk_sim_join.pyx":283
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_7 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

                    /* "new_topk_sim_join.pyx":284
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L72:;

                  /* "new_topk_sim_join.pyx":286
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "new_topk_sim_join.pyx":267
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
                  goto __pyx_L69;
                }

                /* "new_topk_sim_join.pyx":288
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_8 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) + 1);
                }
                __pyx_L69:;

                /* "new_topk_sim_join.pyx":265
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
                goto __pyx_L68;
              }

              /* "new_topk_sim_join.pyx":290
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L68:;

              /* "new_topk_sim_join.pyx":264
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              goto __pyx_L67;
            }

            /* "new_topk_sim_join.pyx":292
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_9 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_9;

              /* "new_topk_sim_join.pyx":293
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L67:;
          }
          __pyx_L53:;

          /* "new_topk_sim_join.pyx":296
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L74_bool_binop_done;
          }

          /* "new_topk_sim_join.pyx":297
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L74_bool_binop_done:;

          /* "new_topk_sim_join.pyx":296
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":298
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "new_topk_sim_join.pyx":299
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":300
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "new_topk_sim_join.pyx":299
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "new_topk_sim_join.pyx":296
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "new_topk_sim_join.pyx":211
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L45_continue:;
        }

        /* "new_topk_sim_join.pyx":209
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "new_topk_sim_join.pyx":305
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_r_tok_idx + 1) < __pyx_v_r_len) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":306
 * 
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 */
        __pyx_t_10 = 1.0;
        __pyx_t_6 = (((__pyx_v_r_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_r_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_11 = (1.0 - (__pyx_t_6 / __pyx_v_r_len));
        if (((__pyx_t_10 < __pyx_t_11) != 0)) {
          __pyx_t_6 = __pyx_t_10;
        } else {
          __pyx_t_6 = __pyx_t_11;
        }
        __pyx_v_threshold = __pyx_t_6;

        /* "new_topk_sim_join.pyx":307
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_r_rec_idx, (__pyx_v_r_tok_idx + 1)));

        /* "new_topk_sim_join.pyx":305
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      }

      /* "new_topk_sim_join.pyx":309
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":310
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 *         # printf("finish\n")
 */
        try {
          __pyx_t_12 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_12;

        /* "new_topk_sim_join.pyx":309
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "new_topk_sim_join.pyx":311
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 *         # printf("finish\n")
 * 
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "new_topk_sim_join.pyx":316
 *     # printf("checkpoint3\n")
 * 
 *     cdef double bound = 1e-6             # <<<<<<<<<<<<<<
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold
 */
  __pyx_v_bound = 1e-6;

  /* "new_topk_sim_join.pyx":317
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "new_topk_sim_join.pyx":318
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, umap[int, short]] p1
 */
    __pyx_t_6 = __pyx_v_prefix_events.top().threshold;
    __pyx_v_bound = __pyx_t_6;

    /* "new_topk_sim_join.pyx":317
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  }

  /* "new_topk_sim_join.pyx":322
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  __pyx_t_13 = __pyx_v_active_dict.begin();
  for (;;) {
    if (!(__pyx_t_13 != __pyx_v_active_dict.end())) break;
    __pyx_t_14 = *__pyx_t_13;
    ++__pyx_t_13;
    __pyx_v_p1 = __pyx_t_14;

    /* "new_topk_sim_join.pyx":323
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first             # <<<<<<<<<<<<<<
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 */
    __pyx_t_3 = __pyx_v_p1.first;
    __pyx_v_l_rec_idx = __pyx_t_3;

    /* "new_topk_sim_join.pyx":324
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    __pyx_t_16 = &__pyx_v_p1.second;
    __pyx_t_15 = __pyx_t_16->begin();
    for (;;) {
      if (!(__pyx_t_15 != __pyx_t_16->end())) break;
      __pyx_t_17 = *__pyx_t_15;
      ++__pyx_t_15;
      __pyx_v_p2 = __pyx_t_17;

      /* "new_topk_sim_join.pyx":325
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      __pyx_t_18 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() < (__pyx_t_18 / __pyx_v_bound)) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L85_bool_binop_done;
      }

      /* "new_topk_sim_join.pyx":326
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:             # <<<<<<<<<<<<<<
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 */
      __pyx_t_18 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_rtoken_vector[__pyx_v_p2.first]).size() < (__pyx_t_18 / __pyx_v_bound)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L85_bool_binop_done:;

      /* "new_topk_sim_join.pyx":325
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":327
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second             # <<<<<<<<<<<<<<
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 */
        __pyx_t_19 = __pyx_v_p2.second;
        __pyx_v_value = __pyx_t_19;

        /* "new_topk_sim_join.pyx":328
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)             # <<<<<<<<<<<<<<
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 */
        __pyx_t_6 = (__pyx_v_value * 1.0);
        __pyx_t_20 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() + (__pyx_v_rtoken_vector[__pyx_v_p2.first]).size()) - __pyx_v_value);
        if (unlikely(__pyx_t_20 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sim = (__pyx_t_6 / __pyx_t_20);

        /* "new_topk_sim_join.pyx":329
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
        __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
        if (__pyx_t_1) {

          /* "new_topk_sim_join.pyx":330
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":331
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 */
            __pyx_v_topk_heap.pop();

            /* "new_topk_sim_join.pyx":332
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));

            /* "new_topk_sim_join.pyx":330
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          }

          /* "new_topk_sim_join.pyx":329
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
          goto __pyx_L87;
        }

        /* "new_topk_sim_join.pyx":334
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));
        }
        __pyx_L87:;

        /* "new_topk_sim_join.pyx":325
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      }

      /* "new_topk_sim_join.pyx":324
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    }

    /* "new_topk_sim_join.pyx":322
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  }

  /* "new_topk_sim_join.pyx":337
 * 
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint4\n")
 * 
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "new_topk_sim_join.pyx":340
 *     # printf("checkpoint4\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":61
 * 
 * 
 * cdef void new_topk_sim_join_plain_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        umap[int, uset[int]]& cand_set, heap[PrefixEvent]& prefix_events,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.new_topk_sim_join_plain_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "new_topk_sim_join.pyx":344
 * 
 * 
 * cdef int new_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef uint i
 */

static int __pyx_f_10debugblock_19debugblocker_cython_new_plain_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list) {
  int __pyx_v_overlap;
  uint32_t __pyx_v_i;
  std::unordered_set<int>  __pyx_v_rset;
  int __pyx_r;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "new_topk_sim_join.pyx":345
 * 
 * cdef int new_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef uint i
 * 
 */
  __pyx_v_overlap = 0;

  /* "new_topk_sim_join.pyx":349
 * 
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size()):             # <<<<<<<<<<<<<<
 *         rset.insert(rtoken_list[i])
 * 
 */
  __pyx_t_1 = __pyx_v_rtoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":350
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size()):
 *         rset.insert(rtoken_list[i])             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size()):
 */
    __pyx_v_rset.insert((__pyx_v_rtoken_list[__pyx_v_i]));
  }

  /* "new_topk_sim_join.pyx":352
 *         rset.insert(rtoken_list[i])
 * 
 *     for i in xrange(ltoken_list.size()):             # <<<<<<<<<<<<<<
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1
 */
  __pyx_t_1 = __pyx_v_ltoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":353
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    __pyx_t_3 = (__pyx_v_rset.count((__pyx_v_ltoken_list[__pyx_v_i])) != 0);
    if (__pyx_t_3) {

      /* "new_topk_sim_join.pyx":354
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1             # <<<<<<<<<<<<<<
 * 
 *     return overlap
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "new_topk_sim_join.pyx":353
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    }
  }

  /* "new_topk_sim_join.pyx":356
 *             overlap += 1
 * 
 *     return overlap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":344
 * 
 * 
 * cdef int new_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef uint i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "new_topk_sim_join.pyx":362
 * ####################################################################################################
 * # For new topk sim join. Only record pre-calculated info but don't reuse.
 * cdef heap[TopPair] new_topk_sim_join_record(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             const vector[vector[int]]& lindex_vector,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_record(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  const &__pyx_v_lindex_vector, std::vector<std::vector<int> >  const &__pyx_v_rindex_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "new_topk_sim_join.pyx":371
 *                                             const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     new_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "new_topk_sim_join.pyx":374
 * 
 *     cdef heap[TopPair] topk_heap
 *     new_topk_sim_join_record_impl(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                   cand_set, reuse_set, prefix_events, topk_heap,
 *                                   offset_of_field_num, prefix_match_max_size, output_size)
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_record_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_offset_of_field_num, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

  /* "new_topk_sim_join.pyx":377
 *                                   cand_set, reuse_set, prefix_events, topk_heap,
 *                                   offset_of_field_num, prefix_match_max_size, output_size)
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":362
 * ####################################################################################################
 * # For new topk sim join. Only record pre-calculated info but don't reuse.
 * cdef heap[TopPair] new_topk_sim_join_record(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             const vector[vector[int]]& lindex_vector,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "new_topk_sim_join.pyx":380
 * 
 * 
 * cdef void new_topk_sim_join_record_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                         const vector[vector[int]]& rtoken_vector,
 *                                         const vector[vector[int]]& lindex_vector,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_record_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  const &__pyx_v_lindex_vector, std::vector<std::vector<int> >  const &__pyx_v_rindex_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_set<uint64_t>  __pyx_v_total_compared_pairs_set;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::unordered_map<int,std::unordered_map<int,uint64_t> >  __pyx_v_active_dict;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  ReuseInfo __pyx_v_reuse_info;
  double __pyx_v_sim;
  double __pyx_v_threshold;
  uint64_t __pyx_v_value;
  uint64_t __pyx_v_COUNT;
  uint64_t *__pyx_v_SHIFT_ARRAY;
  int __pyx_v_COUNT_BITS;
  int __pyx_v_FIELD_BITS;
  int __pyx_v_INC;
  uint64_t __pyx_v_bits;
  uint64_t __pyx_v_bit_results;
  uint64_t __pyx_v_field_pair;
  double __pyx_v_bound;
  std::pair<int,std::unordered_map<int,uint64_t> >  __pyx_v_p1;
  std::pair<int,uint64_t>  __pyx_v_p2;
  long __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::set<std::pair<int,int> > ::iterator __pyx_t_5;
  std::pair<int,int>  __pyx_t_6;
  double __pyx_t_7;
  std::unordered_set<int>  __pyx_t_8;
  std::unordered_map<int,ReuseInfo>  __pyx_t_9;
  std::unordered_map<int,uint64_t>  __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  std::set<std::pair<int,int> >  __pyx_t_13;
  std::unordered_map<int,std::unordered_map<int,uint64_t> > ::iterator __pyx_t_14;
  std::pair<int,std::unordered_map<int,uint64_t> >  __pyx_t_15;
  std::unordered_map<int,uint64_t> ::iterator __pyx_t_16;
  std::unordered_map<int,uint64_t>  *__pyx_t_17;
  std::pair<int,uint64_t>  __pyx_t_18;
  uint64_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "new_topk_sim_join.pyx":391
 *     # printf("checkpoint1\n")
 * 
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef uset[uint64_t] total_compared_pairs_set
 *     cdef umap[int, uset[int]] compared_set
 */
  __pyx_v_total_compared_pairs = 0;

  /* "new_topk_sim_join.pyx":407
 *     cdef int v, p
 * 
 *     cdef uint64_t COUNT = 0x000000000000000F             # <<<<<<<<<<<<<<
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))
 *     cdef int COUNT_BITS = 4
 */
  __pyx_v_COUNT = 0x000000000000000F;

  /* "new_topk_sim_join.pyx":408
 * 
 *     cdef uint64_t COUNT = 0x000000000000000F
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))             # <<<<<<<<<<<<<<
 *     cdef int COUNT_BITS = 4
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 */
  __pyx_v_SHIFT_ARRAY = ((uint64_t *)malloc((__pyx_v_prefix_match_max_size * (sizeof(uint64_t)))));

  /* "new_topk_sim_join.pyx":409
 *     cdef uint64_t COUNT = 0x000000000000000F
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))
 *     cdef int COUNT_BITS = 4             # <<<<<<<<<<<<<<
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)
 */
  __pyx_v_COUNT_BITS = 4;

  /* "new_topk_sim_join.pyx":410
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))
 *     cdef int COUNT_BITS = 4
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size             # <<<<<<<<<<<<<<
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)
 *     cdef int INC = 1
 */
  __pyx_t_1 = (64 - __pyx_v_COUNT_BITS);
  if (unlikely(__pyx_v_prefix_match_max_size == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_prefix_match_max_size == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_1))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_FIELD_BITS = __Pyx_div_long(__pyx_t_1, __pyx_v_prefix_match_max_size);

  /* "new_topk_sim_join.pyx":411
 *     cdef int COUNT_BITS = 4
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)             # <<<<<<<<<<<<<<
 *     cdef int INC = 1
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_init_shift_array(__pyx_v_prefix_match_max_size, __pyx_v_FIELD_BITS, __pyx_v_COUNT_BITS, __pyx_v_SHIFT_ARRAY);

  /* "new_topk_sim_join.pyx":412
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)
 *     cdef int INC = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t bits = 0
 */
  __pyx_v_INC = 1;

  /* "new_topk_sim_join.pyx":414
 *     cdef int INC = 1
 * 
 *     cdef uint64_t bits = 0             # <<<<<<<<<<<<<<
 *     cdef uint64_t bit_results = 0
 *     cdef uint64_t field_pair = 0
 */
  __pyx_v_bits = 0;

  /* "new_topk_sim_join.pyx":415
 * 
 *     cdef uint64_t bits = 0
 *     cdef uint64_t bit_results = 0             # <<<<<<<<<<<<<<
 *     cdef uint64_t field_pair = 0
 * 
 */
  __pyx_v_bit_results = 0;

  /* "new_topk_sim_join.pyx":416
 *     cdef uint64_t bits = 0
 *     cdef uint64_t bit_results = 0
 *     cdef uint64_t field_pair = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, int] temp
 */
  __pyx_v_field_pair = 0;

  /* "new_topk_sim_join.pyx":422
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_2) break;

    /* "new_topk_sim_join.pyx":423
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_3 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "new_topk_sim_join.pyx":424
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "new_topk_sim_join.pyx":423
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "new_topk_sim_join.pyx":425
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "new_topk_sim_join.pyx":426
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_prefix_events.pop();

    /* "new_topk_sim_join.pyx":427
 *         event = prefix_events.top()
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 */
    __pyx_t_4 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_4;

    /* "new_topk_sim_join.pyx":429
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_2 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_2) {

      /* "new_topk_sim_join.pyx":430
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_4 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_4;

      /* "new_topk_sim_join.pyx":431
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_4 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_4;

      /* "new_topk_sim_join.pyx":432
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "new_topk_sim_join.pyx":433
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "new_topk_sim_join.pyx":434
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_2 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_2) {

        /* "new_topk_sim_join.pyx":435
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "new_topk_sim_join.pyx":436
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_5 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_5 != __pyx_v_r_records.end())) break;
          __pyx_t_6 = *__pyx_t_5;
          ++__pyx_t_5;
          __pyx_v_r_rec_tuple = __pyx_t_6;

          /* "new_topk_sim_join.pyx":437
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_4 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_4;

          /* "new_topk_sim_join.pyx":438
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_4 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_4;

          /* "new_topk_sim_join.pyx":439
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "new_topk_sim_join.pyx":441
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L13_bool_binop_done:;
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":442
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "new_topk_sim_join.pyx":441
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":444
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":445
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L10_continue;

            /* "new_topk_sim_join.pyx":444
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":447
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("left1\n")
 *                         overlap = 1
 */
          __pyx_t_3 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_3 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":449
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         # printf("left1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "new_topk_sim_join.pyx":450
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_3 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_3) {
            } else {
              __pyx_t_2 = __pyx_t_3;
              goto __pyx_L22_bool_binop_done;
            }
            __pyx_t_3 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_2 = __pyx_t_3;
            __pyx_L22_bool_binop_done:;
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":451
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT
 */
              __pyx_v_bit_results = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

              /* "new_topk_sim_join.pyx":452
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             overlap += bit_results & COUNT
 * 
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":453
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              __pyx_v_overlap = (__pyx_v_overlap + (__pyx_v_bit_results & __pyx_v_COUNT));

              /* "new_topk_sim_join.pyx":450
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":455
 *                             overlap += bit_results & COUNT
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_7 = (__pyx_v_overlap * 1.0);
            __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_4 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_7 / __pyx_t_4);

            /* "new_topk_sim_join.pyx":456
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":457
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_2) {

                /* "new_topk_sim_join.pyx":458
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":459
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":457
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":456
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L24;
            }

            /* "new_topk_sim_join.pyx":461
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L24:;

            /* "new_topk_sim_join.pyx":463
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("left2\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":447
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("left1\n")
 *                         overlap = 1
 */
            goto __pyx_L18;
          }

          /* "new_topk_sim_join.pyx":464
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("left2\n")
 *                         reuse_info = ReuseInfo(0)
 */
          __pyx_t_2 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":466
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("left2\n")
 *                         reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                         # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                         #                       lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
            __pyx_v_reuse_info = ReuseInfo(0);

            /* "new_topk_sim_join.pyx":483
 *                         #             reuse_info.map[p] = 1
 * 
 *                         new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                               lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                               0, 0, reuse_info, offset_of_field_num)
 */
            __pyx_f_10debugblock_19debugblocker_cython_new_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), 0, 0, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

            /* "new_topk_sim_join.pyx":487
 *                                               0, 0, reuse_info, offset_of_field_num)
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
            __pyx_t_3 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_3) {
            } else {
              __pyx_t_2 = __pyx_t_3;
              goto __pyx_L27_bool_binop_done;
            }
            __pyx_t_3 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_2 = __pyx_t_3;
            __pyx_L27_bool_binop_done:;
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":488
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         overlap = reuse_info.overlap
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":487
 *                                               0, 0, reuse_info, offset_of_field_num)
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
            }

            /* "new_topk_sim_join.pyx":490
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 */
            __pyx_t_4 = __pyx_v_reuse_info.overlap;
            __pyx_v_overlap = __pyx_t_4;

            /* "new_topk_sim_join.pyx":491
 * 
 *                         overlap = reuse_info.overlap
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_7 = (__pyx_v_overlap * 1.0);
            __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_4 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_7 / __pyx_t_4);

            /* "new_topk_sim_join.pyx":492
 *                         overlap = reuse_info.overlap
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":493
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_2) {

                /* "new_topk_sim_join.pyx":494
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":495
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":493
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":492
 *                         overlap = reuse_info.overlap
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L29;
            }

            /* "new_topk_sim_join.pyx":497
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L29:;

            /* "new_topk_sim_join.pyx":499
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":500
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":499
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L31;
            }

            /* "new_topk_sim_join.pyx":502
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_8 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

              /* "new_topk_sim_join.pyx":503
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         if reuse_set.count(l_rec_idx):
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L31:;

            /* "new_topk_sim_join.pyx":505
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                         else:
 */
            __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":506
 * 
 *                         if reuse_set.count(l_rec_idx):
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                         else:
 *                             reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
              ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

              /* "new_topk_sim_join.pyx":505
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                         else:
 */
              goto __pyx_L32;
            }

            /* "new_topk_sim_join.pyx":508
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                         else:
 *                             reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
            /*else*/ {
              try {
                __pyx_t_9 = std::unordered_map<int,ReuseInfo> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_9;

              /* "new_topk_sim_join.pyx":509
 *                         else:
 *                             reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
            }
            __pyx_L32:;

            /* "new_topk_sim_join.pyx":511
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("left3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":464
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("left2\n")
 *                         reuse_info = ReuseInfo(0)
 */
            goto __pyx_L18;
          }

          /* "new_topk_sim_join.pyx":514
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
          /*else*/ {
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":516
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_2) {

                /* "new_topk_sim_join.pyx":518
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 */
                __pyx_v_value = (((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) & __pyx_v_COUNT);

                /* "new_topk_sim_join.pyx":519
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     reuse_info = ReuseInfo(0)
 */
                __pyx_t_2 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_2) {

                  /* "new_topk_sim_join.pyx":521
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 *                                     reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                                     # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                     #                       lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
                  __pyx_v_reuse_info = ReuseInfo(0);

                  /* "new_topk_sim_join.pyx":536
 *                                     #         reuse_info.map[p] = 1
 * 
 *                                     new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 */
                  __pyx_f_10debugblock_19debugblocker_cython_new_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), 0, 0, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

                  /* "new_topk_sim_join.pyx":539
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     overlap = reuse_info.overlap
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "new_topk_sim_join.pyx":541
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 */
                  __pyx_t_4 = __pyx_v_reuse_info.overlap;
                  __pyx_v_overlap = __pyx_t_4;

                  /* "new_topk_sim_join.pyx":542
 * 
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_7 = (__pyx_v_overlap * 1.0);
                  __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_4 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_7 / __pyx_t_4);

                  /* "new_topk_sim_join.pyx":543
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_2) {

                    /* "new_topk_sim_join.pyx":544
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_2) {

                      /* "new_topk_sim_join.pyx":545
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "new_topk_sim_join.pyx":546
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "new_topk_sim_join.pyx":544
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "new_topk_sim_join.pyx":543
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L36;
                  }

                  /* "new_topk_sim_join.pyx":548
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L36:;

                  /* "new_topk_sim_join.pyx":550
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "new_topk_sim_join.pyx":551
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "new_topk_sim_join.pyx":550
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L38;
                  }

                  /* "new_topk_sim_join.pyx":553
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_8 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

                    /* "new_topk_sim_join.pyx":554
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     if reuse_set.count(l_rec_idx):
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L38:;

                  /* "new_topk_sim_join.pyx":556
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "new_topk_sim_join.pyx":557
 * 
 *                                     if reuse_set.count(l_rec_idx):
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

                    /* "new_topk_sim_join.pyx":556
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                    goto __pyx_L39;
                  }

                  /* "new_topk_sim_join.pyx":559
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_9 = std::unordered_map<int,ReuseInfo> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_9;

                    /* "new_topk_sim_join.pyx":560
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
                  }
                  __pyx_L39:;

                  /* "new_topk_sim_join.pyx":562
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "new_topk_sim_join.pyx":519
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     reuse_info = ReuseInfo(0)
 */
                  goto __pyx_L35;
                }

                /* "new_topk_sim_join.pyx":564
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 */
                /*else*/ {
                  __pyx_v_bits = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                  /* "new_topk_sim_join.pyx":565
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 */
                  __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                  /* "new_topk_sim_join.pyx":567
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC
 *                             else:
 */
                  __pyx_v_bits = (__pyx_v_bits | (__pyx_v_field_pair << (((__pyx_v_COUNT & __pyx_v_bits) * __pyx_v_FIELD_BITS) + __pyx_v_COUNT_BITS)));

                  /* "new_topk_sim_join.pyx":568
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC             # <<<<<<<<<<<<<<
 *                             else:
 *                                 # printf("left3.1.2\n")
 */
                  ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = (__pyx_v_bits + __pyx_v_INC);
                }
                __pyx_L35:;

                /* "new_topk_sim_join.pyx":516
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
                goto __pyx_L34;
              }

              /* "new_topk_sim_join.pyx":571
 *                             else:
 *                                 # printf("left3.1.2\n")
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 */
              /*else*/ {

                /* "new_topk_sim_join.pyx":572
 *                                 # printf("left3.1.2\n")
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 */
                __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                /* "new_topk_sim_join.pyx":573
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 *                         else:
 */
                __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

                /* "new_topk_sim_join.pyx":574
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                         else:
 *                             # printf("left3.2.1\n")
 */
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
              }
              __pyx_L34:;

              /* "new_topk_sim_join.pyx":514
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
              goto __pyx_L33;
            }

            /* "new_topk_sim_join.pyx":577
 *                         else:
 *                             # printf("left3.2.1\n")
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             # printf("left3.2.2\n")
 */
            /*else*/ {

              /* "new_topk_sim_join.pyx":578
 *                             # printf("left3.2.1\n")
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                          rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.2\n")
 *                             bits = (field_pair << COUNT_BITS) + INC
 */
              __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

              /* "new_topk_sim_join.pyx":580
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             # printf("left3.2.2\n")
 *                             bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.3\n")
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 */
              __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

              /* "new_topk_sim_join.pyx":582
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             # printf("left3.2.3\n")
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.4\n")
 *                             active_dict[l_rec_idx][r_rec_idx] = bits
 */
              try {
                __pyx_t_10 = std::unordered_map<int,uint64_t> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_10;

              /* "new_topk_sim_join.pyx":584
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 *                             # printf("left3.2.4\n")
 *                             active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.5\n")
 *                     # printf("pass check\n")
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
            }
            __pyx_L33:;
          }
          __pyx_L18:;

          /* "new_topk_sim_join.pyx":588
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_3 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L41_bool_binop_done;
          }

          /* "new_topk_sim_join.pyx":589
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_3 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L41_bool_binop_done:;

          /* "new_topk_sim_join.pyx":588
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":590
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "new_topk_sim_join.pyx":591
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":592
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "new_topk_sim_join.pyx":591
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "new_topk_sim_join.pyx":588
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "new_topk_sim_join.pyx":436
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "new_topk_sim_join.pyx":434
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "new_topk_sim_join.pyx":597
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) < __pyx_v_l_len) != 0);
      if (__pyx_t_2) {

        /* "new_topk_sim_join.pyx":598
 * 
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 */
        __pyx_t_7 = 1.0;
        __pyx_t_11 = (((__pyx_v_l_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_l_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_12 = (1.0 - (__pyx_t_11 / __pyx_v_l_len));
        if (((__pyx_t_7 < __pyx_t_12) != 0)) {
          __pyx_t_11 = __pyx_t_7;
        } else {
          __pyx_t_11 = __pyx_t_12;
        }
        __pyx_v_threshold = __pyx_t_11;

        /* "new_topk_sim_join.pyx":599
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_l_rec_idx, (__pyx_v_l_tok_idx + 1)));

        /* "new_topk_sim_join.pyx":597
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      }

      /* "new_topk_sim_join.pyx":601
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_2 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_2) {

        /* "new_topk_sim_join.pyx":602
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_13 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_13;

        /* "new_topk_sim_join.pyx":601
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "new_topk_sim_join.pyx":603
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_6 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_6);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "new_topk_sim_join.pyx":429
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "new_topk_sim_join.pyx":605
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_4;

      /* "new_topk_sim_join.pyx":606
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_4 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_4;

      /* "new_topk_sim_join.pyx":607
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "new_topk_sim_join.pyx":608
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "new_topk_sim_join.pyx":609
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_2 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_2) {

        /* "new_topk_sim_join.pyx":610
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "new_topk_sim_join.pyx":611
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_5 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_5 != __pyx_v_l_records.end())) break;
          __pyx_t_6 = *__pyx_t_5;
          ++__pyx_t_5;
          __pyx_v_l_rec_tuple = __pyx_t_6;

          /* "new_topk_sim_join.pyx":612
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_4 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_4;

          /* "new_topk_sim_join.pyx":613
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_4 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_4;

          /* "new_topk_sim_join.pyx":614
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "new_topk_sim_join.pyx":616
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L50_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L50_bool_binop_done:;
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":617
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L47_continue;

            /* "new_topk_sim_join.pyx":616
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":619
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L53_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L53_bool_binop_done:;
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":620
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L47_continue;

            /* "new_topk_sim_join.pyx":619
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":622
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("right1\n")
 *                         overlap = 1
 */
          __pyx_t_3 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L56_bool_binop_done;
          }
          __pyx_t_3 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L56_bool_binop_done:;
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":624
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         # printf("right1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "new_topk_sim_join.pyx":625
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_3 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_3) {
            } else {
              __pyx_t_2 = __pyx_t_3;
              goto __pyx_L59_bool_binop_done;
            }
            __pyx_t_3 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_2 = __pyx_t_3;
            __pyx_L59_bool_binop_done:;
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":626
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT
 */
              __pyx_v_bit_results = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

              /* "new_topk_sim_join.pyx":627
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             overlap += bit_results & COUNT
 * 
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":628
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              __pyx_v_overlap = (__pyx_v_overlap + (__pyx_v_bit_results & __pyx_v_COUNT));

              /* "new_topk_sim_join.pyx":625
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":630
 *                             overlap += bit_results & COUNT
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_11 = (__pyx_v_overlap * 1.0);
            __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_4 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_11 / __pyx_t_4);

            /* "new_topk_sim_join.pyx":631
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":632
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_2) {

                /* "new_topk_sim_join.pyx":633
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":634
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":632
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":631
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L61;
            }

            /* "new_topk_sim_join.pyx":636
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L61:;

            /* "new_topk_sim_join.pyx":638
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("right2\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":622
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("right1\n")
 *                         overlap = 1
 */
            goto __pyx_L55;
          }

          /* "new_topk_sim_join.pyx":639
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("right2\n")
 *                         reuse_info = ReuseInfo(0)
 */
          __pyx_t_2 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":641
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("right2\n")
 *                         reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                         # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                         #                       lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
            __pyx_v_reuse_info = ReuseInfo(0);

            /* "new_topk_sim_join.pyx":658
 *                         #             reuse_info.map[p] = 1
 * 
 *                         new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                               lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                               0, 0, reuse_info, offset_of_field_num)
 */
            __pyx_f_10debugblock_19debugblocker_cython_new_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), 0, 0, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

            /* "new_topk_sim_join.pyx":662
 *                                               0, 0, reuse_info, offset_of_field_num)
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
            __pyx_t_3 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_3) {
            } else {
              __pyx_t_2 = __pyx_t_3;
              goto __pyx_L64_bool_binop_done;
            }
            __pyx_t_3 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_2 = __pyx_t_3;
            __pyx_L64_bool_binop_done:;
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":663
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         overlap = reuse_info.overlap
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":662
 *                                               0, 0, reuse_info, offset_of_field_num)
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
            }

            /* "new_topk_sim_join.pyx":665
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 */
            __pyx_t_4 = __pyx_v_reuse_info.overlap;
            __pyx_v_overlap = __pyx_t_4;

            /* "new_topk_sim_join.pyx":666
 * 
 *                         overlap = reuse_info.overlap
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_11 = (__pyx_v_overlap * 1.0);
            __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_4 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_11 / __pyx_t_4);

            /* "new_topk_sim_join.pyx":667
 *                         overlap = reuse_info.overlap
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":668
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_2) {

                /* "new_topk_sim_join.pyx":669
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":670
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":668
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":667
 *                         overlap = reuse_info.overlap
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L66;
            }

            /* "new_topk_sim_join.pyx":672
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L66:;

            /* "new_topk_sim_join.pyx":674
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":675
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":674
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L68;
            }

            /* "new_topk_sim_join.pyx":677
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_8 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

              /* "new_topk_sim_join.pyx":678
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         if reuse_set.count(l_rec_idx):
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L68:;

            /* "new_topk_sim_join.pyx":680
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                         else:
 */
            __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":681
 * 
 *                         if reuse_set.count(l_rec_idx):
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                         else:
 *                             reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
              ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

              /* "new_topk_sim_join.pyx":680
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                         else:
 */
              goto __pyx_L69;
            }

            /* "new_topk_sim_join.pyx":683
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                         else:
 *                             reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
            /*else*/ {
              try {
                __pyx_t_9 = std::unordered_map<int,ReuseInfo> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_9;

              /* "new_topk_sim_join.pyx":684
 *                         else:
 *                             reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
            }
            __pyx_L69:;

            /* "new_topk_sim_join.pyx":686
 *                             reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("right3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":639
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("right2\n")
 *                         reuse_info = ReuseInfo(0)
 */
            goto __pyx_L55;
          }

          /* "new_topk_sim_join.pyx":689
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
          /*else*/ {
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":690
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:
 */
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_2) {

                /* "new_topk_sim_join.pyx":691
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     overlap = value
 */
                __pyx_v_value = (((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) & __pyx_v_COUNT);

                /* "new_topk_sim_join.pyx":692
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     overlap = value
 *                                     reuse_info = ReuseInfo(0)
 */
                __pyx_t_2 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_2) {

                  /* "new_topk_sim_join.pyx":693
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:
 *                                     overlap = value             # <<<<<<<<<<<<<<
 *                                     reuse_info = ReuseInfo(0)
 *                                     # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 */
                  __pyx_v_overlap = __pyx_v_value;

                  /* "new_topk_sim_join.pyx":694
 *                                 if value == prefix_match_max_size:
 *                                     overlap = value
 *                                     reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                                     # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                     #                       lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
                  __pyx_v_reuse_info = ReuseInfo(0);

                  /* "new_topk_sim_join.pyx":709
 *                                     #         reuse_info.map[p] = 1
 * 
 *                                     new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 */
                  __pyx_f_10debugblock_19debugblocker_cython_new_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), 0, 0, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

                  /* "new_topk_sim_join.pyx":712
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     overlap = reuse_info.overlap
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "new_topk_sim_join.pyx":714
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 */
                  __pyx_t_4 = __pyx_v_reuse_info.overlap;
                  __pyx_v_overlap = __pyx_t_4;

                  /* "new_topk_sim_join.pyx":715
 * 
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_11 = (__pyx_v_overlap * 1.0);
                  __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_4 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_11 / __pyx_t_4);

                  /* "new_topk_sim_join.pyx":716
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_2) {

                    /* "new_topk_sim_join.pyx":717
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_2) {

                      /* "new_topk_sim_join.pyx":718
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "new_topk_sim_join.pyx":719
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "new_topk_sim_join.pyx":717
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "new_topk_sim_join.pyx":716
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L73;
                  }

                  /* "new_topk_sim_join.pyx":721
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L73:;

                  /* "new_topk_sim_join.pyx":723
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "new_topk_sim_join.pyx":724
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "new_topk_sim_join.pyx":723
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L75;
                  }

                  /* "new_topk_sim_join.pyx":726
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_8 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

                    /* "new_topk_sim_join.pyx":727
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     if reuse_set.count(l_rec_idx):
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L75:;

                  /* "new_topk_sim_join.pyx":729
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "new_topk_sim_join.pyx":730
 * 
 *                                     if reuse_set.count(l_rec_idx):
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

                    /* "new_topk_sim_join.pyx":729
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                    goto __pyx_L76;
                  }

                  /* "new_topk_sim_join.pyx":732
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_9 = std::unordered_map<int,ReuseInfo> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_9;

                    /* "new_topk_sim_join.pyx":733
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
                  }
                  __pyx_L76:;

                  /* "new_topk_sim_join.pyx":735
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "new_topk_sim_join.pyx":692
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     overlap = value
 *                                     reuse_info = ReuseInfo(0)
 */
                  goto __pyx_L72;
                }

                /* "new_topk_sim_join.pyx":737
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 */
                /*else*/ {
                  __pyx_v_bits = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                  /* "new_topk_sim_join.pyx":738
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 */
                  __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                  /* "new_topk_sim_join.pyx":740
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC
 *                             else:
 */
                  __pyx_v_bits = (__pyx_v_bits | (__pyx_v_field_pair << (((__pyx_v_COUNT & __pyx_v_bits) * __pyx_v_FIELD_BITS) + __pyx_v_COUNT_BITS)));

                  /* "new_topk_sim_join.pyx":741
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC             # <<<<<<<<<<<<<<
 *                             else:
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 */
                  ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = (__pyx_v_bits + __pyx_v_INC);
                }
                __pyx_L72:;

                /* "new_topk_sim_join.pyx":690
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:
 */
                goto __pyx_L71;
              }

              /* "new_topk_sim_join.pyx":743
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC
 *                             else:
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 */
              /*else*/ {

                /* "new_topk_sim_join.pyx":744
 *                             else:
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 */
                __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                /* "new_topk_sim_join.pyx":745
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 *                         else:
 */
                __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

                /* "new_topk_sim_join.pyx":746
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                         else:
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 */
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
              }
              __pyx_L71:;

              /* "new_topk_sim_join.pyx":689
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
              goto __pyx_L70;
            }

            /* "new_topk_sim_join.pyx":748
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 *                         else:
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             bits = (field_pair << COUNT_BITS) + INC
 */
            /*else*/ {

              /* "new_topk_sim_join.pyx":749
 *                         else:
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                          rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 */
              __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

              /* "new_topk_sim_join.pyx":750
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 *                             active_dict[l_rec_idx][r_rec_idx] = bits
 */
              __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

              /* "new_topk_sim_join.pyx":751
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = bits
 *                     # printf("pass check\n")
 */
              try {
                __pyx_t_10 = std::unordered_map<int,uint64_t> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_10;

              /* "new_topk_sim_join.pyx":752
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 *                             active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
            }
            __pyx_L70:;
          }
          __pyx_L55:;

          /* "new_topk_sim_join.pyx":755
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_3 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L78_bool_binop_done;
          }

          /* "new_topk_sim_join.pyx":756
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_3 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L78_bool_binop_done:;

          /* "new_topk_sim_join.pyx":755
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":757
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "new_topk_sim_join.pyx":758
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_2) {

              /* "new_topk_sim_join.pyx":759
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "new_topk_sim_join.pyx":758
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "new_topk_sim_join.pyx":755
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "new_topk_sim_join.pyx":611
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L47_continue:;
        }

        /* "new_topk_sim_join.pyx":609
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "new_topk_sim_join.pyx":764
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) < __pyx_v_r_len) != 0);
      if (__pyx_t_2) {

        /* "new_topk_sim_join.pyx":765
 * 
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 */
        __pyx_t_11 = 1.0;
        __pyx_t_7 = (((__pyx_v_r_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_r_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_12 = (1.0 - (__pyx_t_7 / __pyx_v_r_len));
        if (((__pyx_t_11 < __pyx_t_12) != 0)) {
          __pyx_t_7 = __pyx_t_11;
        } else {
          __pyx_t_7 = __pyx_t_12;
        }
        __pyx_v_threshold = __pyx_t_7;

        /* "new_topk_sim_join.pyx":766
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_r_rec_idx, (__pyx_v_r_tok_idx + 1)));

        /* "new_topk_sim_join.pyx":764
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      }

      /* "new_topk_sim_join.pyx":768
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_2 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_2) {

        /* "new_topk_sim_join.pyx":769
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 *         # printf("finish\n")
 */
        try {
          __pyx_t_13 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_13;

        /* "new_topk_sim_join.pyx":768
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "new_topk_sim_join.pyx":770
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 *         # printf("finish\n")
 * 
 */
      try {
        __pyx_t_6 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_6);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "new_topk_sim_join.pyx":775
 *     # printf("checkpoint3\n")
 * 
 *     cdef double bound = 1e-6             # <<<<<<<<<<<<<<
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold
 */
  __pyx_v_bound = 1e-6;

  /* "new_topk_sim_join.pyx":776
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  __pyx_t_2 = ((__pyx_v_prefix_events.size() > 0) != 0);
  if (__pyx_t_2) {

    /* "new_topk_sim_join.pyx":777
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, umap[int, uint64_t]] p1
 */
    __pyx_t_7 = __pyx_v_prefix_events.top().threshold;
    __pyx_v_bound = __pyx_t_7;

    /* "new_topk_sim_join.pyx":776
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  }

  /* "new_topk_sim_join.pyx":781
 *     cdef pair[int, umap[int, uint64_t]] p1
 *     cdef pair[int, uint64_t] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  __pyx_t_14 = __pyx_v_active_dict.begin();
  for (;;) {
    if (!(__pyx_t_14 != __pyx_v_active_dict.end())) break;
    __pyx_t_15 = *__pyx_t_14;
    ++__pyx_t_14;
    __pyx_v_p1 = __pyx_t_15;

    /* "new_topk_sim_join.pyx":782
 *     cdef pair[int, uint64_t] p2
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first             # <<<<<<<<<<<<<<
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 */
    __pyx_t_4 = __pyx_v_p1.first;
    __pyx_v_l_rec_idx = __pyx_t_4;

    /* "new_topk_sim_join.pyx":783
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    __pyx_t_17 = &__pyx_v_p1.second;
    __pyx_t_16 = __pyx_t_17->begin();
    for (;;) {
      if (!(__pyx_t_16 != __pyx_t_17->end())) break;
      __pyx_t_18 = *__pyx_t_16;
      ++__pyx_t_16;
      __pyx_v_p2 = __pyx_t_18;

      /* "new_topk_sim_join.pyx":784
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 */
      __pyx_t_1 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() < (__pyx_t_1 / __pyx_v_bound)) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L89_bool_binop_done;
      }

      /* "new_topk_sim_join.pyx":785
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:             # <<<<<<<<<<<<<<
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 */
      __pyx_t_1 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = (((__pyx_v_rtoken_vector[__pyx_v_p2.first]).size() < (__pyx_t_1 / __pyx_v_bound)) != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L89_bool_binop_done:;

      /* "new_topk_sim_join.pyx":784
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 */
      if (__pyx_t_2) {

        /* "new_topk_sim_join.pyx":786
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT             # <<<<<<<<<<<<<<
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 */
        __pyx_v_value = (__pyx_v_p2.second & __pyx_v_COUNT);

        /* "new_topk_sim_join.pyx":787
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)             # <<<<<<<<<<<<<<
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 */
        __pyx_t_7 = (__pyx_v_value * 1.0);
        __pyx_t_19 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() + (__pyx_v_rtoken_vector[__pyx_v_p2.first]).size()) - __pyx_v_value);
        if (unlikely(__pyx_t_19 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sim = (__pyx_t_7 / __pyx_t_19);

        /* "new_topk_sim_join.pyx":788
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
        __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
        if (__pyx_t_2) {

          /* "new_topk_sim_join.pyx":789
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
          if (__pyx_t_2) {

            /* "new_topk_sim_join.pyx":790
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 */
            __pyx_v_topk_heap.pop();

            /* "new_topk_sim_join.pyx":791
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));

            /* "new_topk_sim_join.pyx":789
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          }

          /* "new_topk_sim_join.pyx":788
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
          goto __pyx_L91;
        }

        /* "new_topk_sim_join.pyx":793
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));
        }
        __pyx_L91:;

        /* "new_topk_sim_join.pyx":784
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 */
      }

      /* "new_topk_sim_join.pyx":783
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    }

    /* "new_topk_sim_join.pyx":781
 *     cdef pair[int, umap[int, uint64_t]] p1
 *     cdef pair[int, uint64_t] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  }

  /* "new_topk_sim_join.pyx":796
 * 
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint4\n")
 * 
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "new_topk_sim_join.pyx":799
 *     # printf("checkpoint4\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":380
 * 
 * 
 * cdef void new_topk_sim_join_record_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                         const vector[vector[int]]& rtoken_vector,
 *                                         const vector[vector[int]]& lindex_vector,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.new_topk_sim_join_record_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "new_topk_sim_join.pyx":802
 * 
 * 
 * cdef void new_reuse_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                 const vector[int]& lindex_list, const vector[int]& rindex_list,
 *                                 const int l_tok_idx, const int r_tok_idx,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_new_reuse_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list, std::vector<int>  const &__pyx_v_lindex_list, std::vector<int>  const &__pyx_v_rindex_list, int const __pyx_v_l_tok_idx, int const __pyx_v_r_tok_idx, ReuseInfo &__pyx_v_reuse_info, int const __pyx_v_offset_of_field_num) {
  int __pyx_v_value;
  uint32_t __pyx_v_i;
  std::unordered_map<int,int>  __pyx_v_rmap;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "new_topk_sim_join.pyx":810
 * 
 *     cdef umap[int, int] rmap
 *     for i in xrange(rtoken_list.size() - r_tok_idx):             # <<<<<<<<<<<<<<
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]
 * 
 */
  __pyx_t_1 = (__pyx_v_rtoken_list.size() - __pyx_v_r_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":811
 *     cdef umap[int, int] rmap
 *     for i in xrange(rtoken_list.size() - r_tok_idx):
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 */
    (__pyx_v_rmap[(__pyx_v_rtoken_list[(__pyx_v_i + __pyx_v_r_tok_idx)])]) = (__pyx_v_rindex_list[(__pyx_v_i + __pyx_v_r_tok_idx)]);
  }

  /* "new_topk_sim_join.pyx":813
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):             # <<<<<<<<<<<<<<
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1
 */
  __pyx_t_1 = (__pyx_v_ltoken_list.size() - __pyx_v_l_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":814
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 */
    __pyx_t_3 = (__pyx_v_rmap.count((__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])) != 0);
    if (__pyx_t_3) {

      /* "new_topk_sim_join.pyx":815
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1             # <<<<<<<<<<<<<<
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):
 */
      __pyx_v_reuse_info.overlap = (__pyx_v_reuse_info.overlap + 1);

      /* "new_topk_sim_join.pyx":816
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]             # <<<<<<<<<<<<<<
 *             if reuse_info.map.count(value):
 *                 reuse_info.map[value] += 1
 */
      __pyx_v_value = (((__pyx_v_lindex_list[(__pyx_v_i + __pyx_v_l_tok_idx)]) * __pyx_v_offset_of_field_num) + (__pyx_v_rmap[(__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])]));

      /* "new_topk_sim_join.pyx":817
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):             # <<<<<<<<<<<<<<
 *                 reuse_info.map[value] += 1
 *             else:
 */
      __pyx_t_3 = (__pyx_v_reuse_info.map.count(__pyx_v_value) != 0);
      if (__pyx_t_3) {

        /* "new_topk_sim_join.pyx":818
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):
 *                 reuse_info.map[value] += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 reuse_info.map[value] = 1
 */
        __pyx_t_4 = __pyx_v_value;
        (__pyx_v_reuse_info.map[__pyx_t_4]) = ((__pyx_v_reuse_info.map[__pyx_t_4]) + 1);

        /* "new_topk_sim_join.pyx":817
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):             # <<<<<<<<<<<<<<
 *                 reuse_info.map[value] += 1
 *             else:
 */
        goto __pyx_L8;
      }

      /* "new_topk_sim_join.pyx":820
 *                 reuse_info.map[value] += 1
 *             else:
 *                 reuse_info.map[value] = 1             # <<<<<<<<<<<<<<
 * 
 *     return
 */
      /*else*/ {
        (__pyx_v_reuse_info.map[__pyx_v_value]) = 1;
      }
      __pyx_L8:;

      /* "new_topk_sim_join.pyx":814
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 */
    }
  }

  /* "new_topk_sim_join.pyx":822
 *                 reuse_info.map[value] = 1
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":802
 * 
 * 
 * cdef void new_reuse_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                 const vector[int]& lindex_list, const vector[int]& rindex_list,
 *                                 const int l_tok_idx, const int r_tok_idx,
 */

  /* function exit code */
  __pyx_L0:;
}

/* "new_topk_sim_join.pyx":825
 * 
 * 
 * cdef void init_shift_array(const int num, const int field_bits, const int count_bits,             # <<<<<<<<<<<<<<
 *                            uint64_t* shift_array) nogil:
 *     cdef int i, j
 */

static void __pyx_f_10debugblock_19debugblocker_cython_init_shift_array(int const __pyx_v_num, int const __pyx_v_field_bits, int const __pyx_v_count_bits, uint64_t *__pyx_v_shift_array) {
  int __pyx_v_i;
  CYTHON_UNUSED int __pyx_v_j;
  uint64_t __pyx_v_base;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "new_topk_sim_join.pyx":828
 *                            uint64_t* shift_array) nogil:
 *     cdef int i, j
 *     cdef uint64_t base = 0             # <<<<<<<<<<<<<<
 *     for i in xrange(field_bits):
 *         base = base * 2 + 1
 */
  __pyx_v_base = 0;

  /* "new_topk_sim_join.pyx":829
 *     cdef int i, j
 *     cdef uint64_t base = 0
 *     for i in xrange(field_bits):             # <<<<<<<<<<<<<<
 *         base = base * 2 + 1
 *     for i in xrange(count_bits):
 */
  __pyx_t_1 = __pyx_v_field_bits;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":830
 *     cdef uint64_t base = 0
 *     for i in xrange(field_bits):
 *         base = base * 2 + 1             # <<<<<<<<<<<<<<
 *     for i in xrange(count_bits):
 *         base <<= 1
 */
    __pyx_v_base = ((__pyx_v_base * 2) + 1);
  }

  /* "new_topk_sim_join.pyx":831
 *     for i in xrange(field_bits):
 *         base = base * 2 + 1
 *     for i in xrange(count_bits):             # <<<<<<<<<<<<<<
 *         base <<= 1
 * 
 */
  __pyx_t_1 = __pyx_v_count_bits;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":832
 *         base = base * 2 + 1
 *     for i in xrange(count_bits):
 *         base <<= 1             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(num):
 */
    __pyx_v_base = (__pyx_v_base << 1);
  }

  /* "new_topk_sim_join.pyx":834
 *         base <<= 1
 * 
 *     for i in xrange(num):             # <<<<<<<<<<<<<<
 *         shift_array[i] = base
 *         for j in xrange(field_bits):
 */
  __pyx_t_1 = __pyx_v_num;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":835
 * 
 *     for i in xrange(num):
 *         shift_array[i] = base             # <<<<<<<<<<<<<<
 *         for j in xrange(field_bits):
 *             base <<= 1
 */
    (__pyx_v_shift_array[__pyx_v_i]) = __pyx_v_base;

    /* "new_topk_sim_join.pyx":836
 *     for i in xrange(num):
 *         shift_array[i] = base
 *         for j in xrange(field_bits):             # <<<<<<<<<<<<<<
 *             base <<= 1
 *     return
 */
    __pyx_t_3 = __pyx_v_field_bits;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "new_topk_sim_join.pyx":837
 *         shift_array[i] = base
 *         for j in xrange(field_bits):
 *             base <<= 1             # <<<<<<<<<<<<<<
 *     return
 * 
 */
      __pyx_v_base = (__pyx_v_base << 1);
    }
  }

  /* "new_topk_sim_join.pyx":838
 *         for j in xrange(field_bits):
 *             base <<= 1
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":825
 * 
 * 
 * cdef void init_shift_array(const int num, const int field_bits, const int count_bits,             # <<<<<<<<<<<<<<
 *                            uint64_t* shift_array) nogil:
 *     cdef int i, j
 */

  /* function exit code */
  __pyx_L0:;
}

/* "new_topk_sim_join.pyx":844
 * ####################################################################################################
 * # For new topk sim join. Only reuse pre-calculated info but don't record.
 * cdef heap[TopPair] new_topk_sim_join_reuse(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_reuse(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_set<int>  &__pyx_v_remained_fields, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "new_topk_sim_join.pyx":851
 *                                            const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     new_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "new_topk_sim_join.pyx":854
 * 
 *     cdef heap[TopPair] topk_heap
 *     new_topk_sim_join_reuse_impl(ltoken_vector, rtoken_vector, remained_fields,             # <<<<<<<<<<<<<<
 *                                  cand_set, reuse_set, prefix_events, topk_heap,
 *                                  offset_of_field_num, prefix_match_max_size, output_size)
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_reuse_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_remained_fields, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_offset_of_field_num, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

  /* "new_topk_sim_join.pyx":858
 *                                  offset_of_field_num, prefix_match_max_size, output_size)
 * 
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":844
 * ####################################################################################################
 * # For new topk sim join. Only reuse pre-calculated info but don't record.
 * cdef heap[TopPair] new_topk_sim_join_reuse(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "new_topk_sim_join.pyx":861
 * 
 * 
 * cdef void new_topk_sim_join_reuse_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_reuse_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_set<int>  &__pyx_v_remained_fields, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_set<uint64_t>  __pyx_v_total_compared_pairs_set;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::unordered_map<int,std::unordered_map<int,short> >  __pyx_v_active_dict;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  ReuseInfo __pyx_v_reuse_info;
  double __pyx_v_sim;
  double __pyx_v_threshold;
  uint64_t __pyx_v_value;
  int __pyx_v_denom;
  int __pyx_v_lfield;
  int __pyx_v_rfield;
  std::pair<int,int>  __pyx_v_field_pair;
  double __pyx_v_bound;
  std::pair<int,std::unordered_map<int,short> >  __pyx_v_p1;
  std::pair<int,short>  __pyx_v_p2;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::set<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  double __pyx_t_6;
  std::unordered_map<int,int> ::iterator __pyx_t_7;
  std::unordered_map<int,int>  *__pyx_t_8;
  std::pair<int,int>  __pyx_t_9;
  std::unordered_set<int>  __pyx_t_10;
  int __pyx_t_11;
  std::unordered_map<int,short>  __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  std::set<std::pair<int,int> >  __pyx_t_15;
  std::unordered_map<int,std::unordered_map<int,short> > ::iterator __pyx_t_16;
  std::pair<int,std::unordered_map<int,short> >  __pyx_t_17;
  std::unordered_map<int,short> ::iterator __pyx_t_18;
  std::unordered_map<int,short>  *__pyx_t_19;
  std::pair<int,short>  __pyx_t_20;
  long __pyx_t_21;
  short __pyx_t_22;
  uint64_t __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "new_topk_sim_join.pyx":869
 *                                        const int output_size) nogil:
 *     # printf("checkpoint1\n")
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef uset[uint64_t] total_compared_pairs_set
 *     cdef umap[int, uset[int]] compared_set
 */
  __pyx_v_total_compared_pairs = 0;

  /* "new_topk_sim_join.pyx":889
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "new_topk_sim_join.pyx":890
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "new_topk_sim_join.pyx":891
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "new_topk_sim_join.pyx":890
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "new_topk_sim_join.pyx":892
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "new_topk_sim_join.pyx":893
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_prefix_events.pop();

    /* "new_topk_sim_join.pyx":894
 *         event = prefix_events.top()
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 */
    __pyx_t_3 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_3;

    /* "new_topk_sim_join.pyx":896
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_1 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_1) {

      /* "new_topk_sim_join.pyx":897
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":898
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":899
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "new_topk_sim_join.pyx":900
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "new_topk_sim_join.pyx":901
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_1 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":902
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "new_topk_sim_join.pyx":903
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_r_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_r_rec_tuple = __pyx_t_5;

          /* "new_topk_sim_join.pyx":904
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":905
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":906
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "new_topk_sim_join.pyx":908
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L13_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":909
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "new_topk_sim_join.pyx":908
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":911
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":912
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L10_continue;

            /* "new_topk_sim_join.pyx":911
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":914
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
          __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":915
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "new_topk_sim_join.pyx":916
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L22_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L22_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":917
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "new_topk_sim_join.pyx":918
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":916
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":924
 *                         #         printf("%d %d %d\n", overlap, l_tok_idx, r_tok_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

            /* "new_topk_sim_join.pyx":925
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":926
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":927
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":928
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":926
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":925
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L24;
            }

            /* "new_topk_sim_join.pyx":930
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L24:;

            /* "new_topk_sim_join.pyx":932
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":914
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L18;
          }

          /* "new_topk_sim_join.pyx":933
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
          __pyx_t_1 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":934
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap
 */
            __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L27_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L27_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":935
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             overlap = reuse_info.overlap
 *                             denom = l_len + r_len - overlap
 */
              __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

              /* "new_topk_sim_join.pyx":936
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                             denom = l_len + r_len - overlap
 *                             # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
              __pyx_t_3 = __pyx_v_reuse_info.overlap;
              __pyx_v_overlap = __pyx_t_3;

              /* "new_topk_sim_join.pyx":937
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap
 *                             denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                             # if l_rec_idx == 3482 and r_rec_idx == 4047:
 *                             #     printf("left2.1\n")
 */
              __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

              /* "new_topk_sim_join.pyx":944
 *                             #         printf("%d %d ", field_pair.first, field_pair.second)
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 */
              __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
              if (!__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L30_bool_binop_done;
              }
              __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
              if (!__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L30_bool_binop_done;
              }

              /* "new_topk_sim_join.pyx":945
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                                 for field_pair in reuse_info.map:
 *                                     lfield = field_pair.first / offset_of_field_num
 */
              __pyx_t_6 = (__pyx_v_overlap * 1.0);
              if (unlikely(__pyx_v_denom == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              __pyx_t_2 = (((__pyx_t_6 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
              __pyx_t_1 = __pyx_t_2;
              __pyx_L30_bool_binop_done:;

              /* "new_topk_sim_join.pyx":944
 *                             #         printf("%d %d ", field_pair.first, field_pair.second)
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 */
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":946
 *                             if denom <= 0 or topk_heap.size() < output_size or \
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 */
                __pyx_t_8 = &__pyx_v_reuse_info.map;
                __pyx_t_7 = __pyx_t_8->begin();
                for (;;) {
                  if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                  __pyx_t_9 = *__pyx_t_7;
                  ++__pyx_t_7;
                  __pyx_v_field_pair = __pyx_t_9;

                  /* "new_topk_sim_join.pyx":947
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 *                                     lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                  if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                  /* "new_topk_sim_join.pyx":948
 *                                 for field_pair in reuse_info.map:
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                         overlap -= field_pair.second
 */
                  if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                  /* "new_topk_sim_join.pyx":949
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                  if (!__pyx_t_2) {
                  } else {
                    __pyx_t_1 = __pyx_t_2;
                    goto __pyx_L36_bool_binop_done;
                  }
                  __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                  __pyx_t_1 = __pyx_t_2;
                  __pyx_L36_bool_binop_done:;
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":950
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                         overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:
 */
                    __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                    /* "new_topk_sim_join.pyx":949
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  }

                  /* "new_topk_sim_join.pyx":946
 *                             if denom <= 0 or topk_heap.size() < output_size or \
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 */
                }

                /* "new_topk_sim_join.pyx":951
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:
 */
                __pyx_t_6 = (__pyx_v_overlap * 1.0);
                __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                if (unlikely(__pyx_t_3 == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

                /* "new_topk_sim_join.pyx":952
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()
 */
                __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":953
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                         topk_heap.pop()
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":954
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                 else:
 */
                    __pyx_v_topk_heap.pop();

                    /* "new_topk_sim_join.pyx":955
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                    /* "new_topk_sim_join.pyx":953
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                         topk_heap.pop()
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  }

                  /* "new_topk_sim_join.pyx":952
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()
 */
                  goto __pyx_L38;
                }

                /* "new_topk_sim_join.pyx":957
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                 else:
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                             if compared_set.count(l_rec_idx):
 */
                /*else*/ {
                  __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                }
                __pyx_L38:;

                /* "new_topk_sim_join.pyx":944
 *                             #         printf("%d %d ", field_pair.first, field_pair.second)
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 */
              }

              /* "new_topk_sim_join.pyx":959
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
              __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":960
 * 
 *                             if compared_set.count(l_rec_idx):
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":959
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
                goto __pyx_L40;
              }

              /* "new_topk_sim_join.pyx":962
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
              /*else*/ {
                try {
                  __pyx_t_10 = std::unordered_set<int> ();
                } catch(...) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  __Pyx_CppExn2PyErr();
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                /* "new_topk_sim_join.pyx":963
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
              }
              __pyx_L40:;

              /* "new_topk_sim_join.pyx":965
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L42_bool_binop_done;
              }
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              __pyx_t_1 = __pyx_t_2;
              __pyx_L42_bool_binop_done:;
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":966
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         else:
 */
                (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":965
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              }

              /* "new_topk_sim_join.pyx":934
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap
 */
              goto __pyx_L26;
            }

            /* "new_topk_sim_join.pyx":971
 *                             # overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                             #                           l_tok_idx, r_tok_idx)
 *                             overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                       0, 0)
 * 
 */
            /*else*/ {
              __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), 0, 0);

              /* "new_topk_sim_join.pyx":978
 *                             #     printf("%d\n", overlap)
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # overlap += active_dict[l_rec_idx][r_rec_idx]
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 */
              __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L45_bool_binop_done;
              }
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              __pyx_t_1 = __pyx_t_2;
              __pyx_L45_bool_binop_done:;
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":980
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # overlap += active_dict[l_rec_idx][r_rec_idx]
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":978
 *                             #     printf("%d\n", overlap)
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # overlap += active_dict[l_rec_idx][r_rec_idx]
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 */
              }

              /* "new_topk_sim_join.pyx":982
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 */
              __pyx_t_6 = (__pyx_v_overlap * 1.0);
              __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
              if (unlikely(__pyx_t_3 == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

              /* "new_topk_sim_join.pyx":983
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":984
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":985
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 */
                  __pyx_v_topk_heap.pop();

                  /* "new_topk_sim_join.pyx":986
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                  /* "new_topk_sim_join.pyx":984
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                }

                /* "new_topk_sim_join.pyx":983
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
                goto __pyx_L47;
              }

              /* "new_topk_sim_join.pyx":988
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                             if compared_set.count(l_rec_idx):
 */
              /*else*/ {
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
              }
              __pyx_L47:;

              /* "new_topk_sim_join.pyx":990
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
              __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":991
 * 
 *                             if compared_set.count(l_rec_idx):
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":990
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
                goto __pyx_L49;
              }

              /* "new_topk_sim_join.pyx":993
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
              /*else*/ {
                try {
                  __pyx_t_10 = std::unordered_set<int> ();
                } catch(...) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  __Pyx_CppExn2PyErr();
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                /* "new_topk_sim_join.pyx":994
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
              }
              __pyx_L49:;
            }
            __pyx_L26:;

            /* "new_topk_sim_join.pyx":996
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("left3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":933
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
            goto __pyx_L18;
          }

          /* "new_topk_sim_join.pyx":999
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":1001
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1003
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "new_topk_sim_join.pyx":1004
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":1006
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {
                  } else {
                    __pyx_t_1 = __pyx_t_2;
                    goto __pyx_L54_bool_binop_done;
                  }
                  __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                  __pyx_t_1 = __pyx_t_2;
                  __pyx_L54_bool_binop_done:;
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":1007
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap
 */
                    __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                    /* "new_topk_sim_join.pyx":1008
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                         denom = l_len + r_len - overlap
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
                    __pyx_t_3 = __pyx_v_reuse_info.overlap;
                    __pyx_v_overlap = __pyx_t_3;

                    /* "new_topk_sim_join.pyx":1009
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 *                                         #     printf("left3\n")
 */
                    __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

                    /* "new_topk_sim_join.pyx":1016
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L57_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L57_bool_binop_done;
                    }

                    /* "new_topk_sim_join.pyx":1017
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 */
                    __pyx_t_6 = (__pyx_v_overlap * 1.0);
                    if (unlikely(__pyx_v_denom == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_t_2 = (((__pyx_t_6 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L57_bool_binop_done:;

                    /* "new_topk_sim_join.pyx":1016
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1018
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      __pyx_t_8 = &__pyx_v_reuse_info.map;
                      __pyx_t_7 = __pyx_t_8->begin();
                      for (;;) {
                        if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                        __pyx_t_9 = *__pyx_t_7;
                        ++__pyx_t_7;
                        __pyx_v_field_pair = __pyx_t_9;

                        /* "new_topk_sim_join.pyx":1019
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "new_topk_sim_join.pyx":1020
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "new_topk_sim_join.pyx":1021
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                        if (!__pyx_t_2) {
                        } else {
                          __pyx_t_1 = __pyx_t_2;
                          goto __pyx_L63_bool_binop_done;
                        }
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                        __pyx_t_1 = __pyx_t_2;
                        __pyx_L63_bool_binop_done:;
                        if (__pyx_t_1) {

                          /* "new_topk_sim_join.pyx":1022
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 */
                          __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                          /* "new_topk_sim_join.pyx":1021
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        }

                        /* "new_topk_sim_join.pyx":1018
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      }

                      /* "new_topk_sim_join.pyx":1023
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 */
                      __pyx_t_6 = (__pyx_v_overlap * 1.0);
                      __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                      if (unlikely(__pyx_t_3 == 0)) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

                      /* "new_topk_sim_join.pyx":1024
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                      if (__pyx_t_1) {

                        /* "new_topk_sim_join.pyx":1025
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                        if (__pyx_t_1) {

                          /* "new_topk_sim_join.pyx":1026
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 */
                          __pyx_v_topk_heap.pop();

                          /* "new_topk_sim_join.pyx":1027
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                          /* "new_topk_sim_join.pyx":1025
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        }

                        /* "new_topk_sim_join.pyx":1024
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                        goto __pyx_L65;
                      }

                      /* "new_topk_sim_join.pyx":1029
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                      /*else*/ {
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                      }
                      __pyx_L65:;

                      /* "new_topk_sim_join.pyx":1016
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    }

                    /* "new_topk_sim_join.pyx":1031
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1032
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "new_topk_sim_join.pyx":1031
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L67;
                    }

                    /* "new_topk_sim_join.pyx":1034
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1034; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "new_topk_sim_join.pyx":1035
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L67:;

                    /* "new_topk_sim_join.pyx":1037
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                    __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L69_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L69_bool_binop_done:;
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1038
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     else:
 */
                      (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                      /* "new_topk_sim_join.pyx":1037
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                    }

                    /* "new_topk_sim_join.pyx":1006
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 */
                    goto __pyx_L53;
                  }

                  /* "new_topk_sim_join.pyx":1042
 *                                     else:
 *                                         # overlap = value
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 */
                  /*else*/ {
                    __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), 0, 0);

                    /* "new_topk_sim_join.pyx":1044
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                    (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                    /* "new_topk_sim_join.pyx":1046
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 */
                    __pyx_t_6 = (__pyx_v_overlap * 1.0);
                    __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                    if (unlikely(__pyx_t_3 == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

                    /* "new_topk_sim_join.pyx":1047
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1048
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                      if (__pyx_t_1) {

                        /* "new_topk_sim_join.pyx":1049
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 */
                        __pyx_v_topk_heap.pop();

                        /* "new_topk_sim_join.pyx":1050
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                        /* "new_topk_sim_join.pyx":1048
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      }

                      /* "new_topk_sim_join.pyx":1047
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                      goto __pyx_L71;
                    }

                    /* "new_topk_sim_join.pyx":1052
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                    /*else*/ {
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                    }
                    __pyx_L71:;

                    /* "new_topk_sim_join.pyx":1054
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1055
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "new_topk_sim_join.pyx":1054
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L73;
                    }

                    /* "new_topk_sim_join.pyx":1057
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "new_topk_sim_join.pyx":1058
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L73:;
                  }
                  __pyx_L53:;

                  /* "new_topk_sim_join.pyx":1060
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "new_topk_sim_join.pyx":1004
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
                  goto __pyx_L52;
                }

                /* "new_topk_sim_join.pyx":1062
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 # printf("left3.1.2\n")
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_11 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) + 1);
                }
                __pyx_L52:;

                /* "new_topk_sim_join.pyx":1001
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
                goto __pyx_L51;
              }

              /* "new_topk_sim_join.pyx":1065
 *                             else:
 *                                 # printf("left3.1.2\n")
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L51:;

              /* "new_topk_sim_join.pyx":999
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
              goto __pyx_L50;
            }

            /* "new_topk_sim_join.pyx":1067
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_12 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_12;

              /* "new_topk_sim_join.pyx":1068
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L50:;
          }
          __pyx_L18:;

          /* "new_topk_sim_join.pyx":1071
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L75_bool_binop_done;
          }

          /* "new_topk_sim_join.pyx":1072
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L75_bool_binop_done:;

          /* "new_topk_sim_join.pyx":1071
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":1073
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "new_topk_sim_join.pyx":1074
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":1075
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "new_topk_sim_join.pyx":1074
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "new_topk_sim_join.pyx":1071
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "new_topk_sim_join.pyx":903
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "new_topk_sim_join.pyx":901
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "new_topk_sim_join.pyx":1080
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_l_tok_idx + 1) < __pyx_v_l_len) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":1081
 * 
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 */
        __pyx_t_6 = 1.0;
        __pyx_t_13 = (((__pyx_v_l_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_l_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_14 = (1.0 - (__pyx_t_13 / __pyx_v_l_len));
        if (((__pyx_t_6 < __pyx_t_14) != 0)) {
          __pyx_t_13 = __pyx_t_6;
        } else {
          __pyx_t_13 = __pyx_t_14;
        }
        __pyx_v_threshold = __pyx_t_13;

        /* "new_topk_sim_join.pyx":1082
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_l_rec_idx, (__pyx_v_l_tok_idx + 1)));

        /* "new_topk_sim_join.pyx":1080
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      }

      /* "new_topk_sim_join.pyx":1084
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":1085
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_15 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_15;

        /* "new_topk_sim_join.pyx":1084
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "new_topk_sim_join.pyx":1086
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "new_topk_sim_join.pyx":896
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "new_topk_sim_join.pyx":1088
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":1089
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_3;

      /* "new_topk_sim_join.pyx":1090
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "new_topk_sim_join.pyx":1091
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "new_topk_sim_join.pyx":1092
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_1 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":1093
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "new_topk_sim_join.pyx":1094
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_l_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_l_rec_tuple = __pyx_t_5;

          /* "new_topk_sim_join.pyx":1095
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":1096
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_3;

          /* "new_topk_sim_join.pyx":1097
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "new_topk_sim_join.pyx":1099
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L84_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L84_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":1100
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L81_continue;

            /* "new_topk_sim_join.pyx":1099
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":1102
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L87_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L87_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":1103
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 */
            goto __pyx_L81_continue;

            /* "new_topk_sim_join.pyx":1102
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "new_topk_sim_join.pyx":1105
 *                         continue
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
          __pyx_t_2 = (((__pyx_v_l_rec_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L90_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_rec_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L90_bool_binop_done:;
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":1106
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "new_topk_sim_join.pyx":1107
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L93_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L93_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":1108
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "new_topk_sim_join.pyx":1109
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "new_topk_sim_join.pyx":1107
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "new_topk_sim_join.pyx":1115
 *                         #     printf("%d\n", overlap)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_13 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

            /* "new_topk_sim_join.pyx":1116
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":1117
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1118
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "new_topk_sim_join.pyx":1119
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "new_topk_sim_join.pyx":1117
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "new_topk_sim_join.pyx":1116
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L95;
            }

            /* "new_topk_sim_join.pyx":1121
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L95:;

            /* "new_topk_sim_join.pyx":1123
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":1105
 *                         continue
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L89;
          }

          /* "new_topk_sim_join.pyx":1124
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
          __pyx_t_1 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":1125
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap
 */
            __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L98_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L98_bool_binop_done:;
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":1126
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             overlap = reuse_info.overlap
 *                             denom = l_len + r_len - overlap
 */
              __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

              /* "new_topk_sim_join.pyx":1127
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                             denom = l_len + r_len - overlap
 *                             # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
              __pyx_t_3 = __pyx_v_reuse_info.overlap;
              __pyx_v_overlap = __pyx_t_3;

              /* "new_topk_sim_join.pyx":1128
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap
 *                             denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                             # if l_rec_idx == 3482 and r_rec_idx == 4047:
 *                             #     printf("right2.1\n")
 */
              __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

              /* "new_topk_sim_join.pyx":1135
 *                             #         printf("%d %d ", field_pair.first, field_pair.second)
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 */
              __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
              if (!__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L101_bool_binop_done;
              }
              __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
              if (!__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L101_bool_binop_done;
              }

              /* "new_topk_sim_join.pyx":1136
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                                 for field_pair in reuse_info.map:
 *                                     lfield = field_pair.first / offset_of_field_num
 */
              __pyx_t_13 = (__pyx_v_overlap * 1.0);
              if (unlikely(__pyx_v_denom == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              __pyx_t_2 = (((__pyx_t_13 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
              __pyx_t_1 = __pyx_t_2;
              __pyx_L101_bool_binop_done:;

              /* "new_topk_sim_join.pyx":1135
 *                             #         printf("%d %d ", field_pair.first, field_pair.second)
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 */
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1137
 *                             if denom <= 0 or topk_heap.size() < output_size or \
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 */
                __pyx_t_8 = &__pyx_v_reuse_info.map;
                __pyx_t_7 = __pyx_t_8->begin();
                for (;;) {
                  if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                  __pyx_t_9 = *__pyx_t_7;
                  ++__pyx_t_7;
                  __pyx_v_field_pair = __pyx_t_9;

                  /* "new_topk_sim_join.pyx":1138
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 *                                     lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                  if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                  /* "new_topk_sim_join.pyx":1139
 *                                 for field_pair in reuse_info.map:
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                         overlap -= field_pair.second
 */
                  if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                  /* "new_topk_sim_join.pyx":1140
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                  if (!__pyx_t_2) {
                  } else {
                    __pyx_t_1 = __pyx_t_2;
                    goto __pyx_L107_bool_binop_done;
                  }
                  __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                  __pyx_t_1 = __pyx_t_2;
                  __pyx_L107_bool_binop_done:;
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":1141
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                         overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:
 */
                    __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                    /* "new_topk_sim_join.pyx":1140
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  }

                  /* "new_topk_sim_join.pyx":1137
 *                             if denom <= 0 or topk_heap.size() < output_size or \
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                     lfield = field_pair.first / offset_of_field_num
 *                                     rfield = field_pair.first % offset_of_field_num
 */
                }

                /* "new_topk_sim_join.pyx":1142
 *                                     if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:
 */
                __pyx_t_13 = (__pyx_v_overlap * 1.0);
                __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                if (unlikely(__pyx_t_3 == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

                /* "new_topk_sim_join.pyx":1143
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()
 */
                __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":1144
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                         topk_heap.pop()
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":1145
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                 else:
 */
                    __pyx_v_topk_heap.pop();

                    /* "new_topk_sim_join.pyx":1146
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                    /* "new_topk_sim_join.pyx":1144
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:
 *                                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                         topk_heap.pop()
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  }

                  /* "new_topk_sim_join.pyx":1143
 *                                         overlap -= field_pair.second
 *                                 sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                     if topk_heap.top().sim < sim:
 *                                         topk_heap.pop()
 */
                  goto __pyx_L109;
                }

                /* "new_topk_sim_join.pyx":1148
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                 else:
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                             if compared_set.count(l_rec_idx):
 */
                /*else*/ {
                  __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                }
                __pyx_L109:;

                /* "new_topk_sim_join.pyx":1135
 *                             #         printf("%d %d ", field_pair.first, field_pair.second)
 *                             #     printf("\n")
 *                             if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                     overlap * 1.0 / denom > topk_heap.top().sim:
 *                                 for field_pair in reuse_info.map:
 */
              }

              /* "new_topk_sim_join.pyx":1150
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
              __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1151
 * 
 *                             if compared_set.count(l_rec_idx):
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":1150
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
                goto __pyx_L111;
              }

              /* "new_topk_sim_join.pyx":1153
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
              /*else*/ {
                try {
                  __pyx_t_10 = std::unordered_set<int> ();
                } catch(...) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  __Pyx_CppExn2PyErr();
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                /* "new_topk_sim_join.pyx":1154
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
              }
              __pyx_L111:;

              /* "new_topk_sim_join.pyx":1156
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 *                         else:
 */
              __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L113_bool_binop_done;
              }
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              __pyx_t_1 = __pyx_t_2;
              __pyx_L113_bool_binop_done:;
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1157
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 */
                (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":1156
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 *                         else:
 */
              }

              /* "new_topk_sim_join.pyx":1125
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                             overlap = reuse_info.overlap
 */
              goto __pyx_L97;
            }

            /* "new_topk_sim_join.pyx":1159
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 *                         else:
 *                             overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                       0, 0)
 *                             # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
            /*else*/ {
              __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), 0, 0);

              /* "new_topk_sim_join.pyx":1164
 *                             #     printf("right2.2\n")
 *                             #     printf("%d\n", overlap)
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # overlap += active_dict[l_rec_idx][r_rec_idx]
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 */
              __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L116_bool_binop_done;
              }
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              __pyx_t_1 = __pyx_t_2;
              __pyx_L116_bool_binop_done:;
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1166
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # overlap += active_dict[l_rec_idx][r_rec_idx]
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":1164
 *                             #     printf("right2.2\n")
 *                             #     printf("%d\n", overlap)
 *                             if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # overlap += active_dict[l_rec_idx][r_rec_idx]
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 */
              }

              /* "new_topk_sim_join.pyx":1168
 *                                 active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 */
              __pyx_t_13 = (__pyx_v_overlap * 1.0);
              __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
              if (unlikely(__pyx_t_3 == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

              /* "new_topk_sim_join.pyx":1169
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1170
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":1171
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 */
                  __pyx_v_topk_heap.pop();

                  /* "new_topk_sim_join.pyx":1172
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                  /* "new_topk_sim_join.pyx":1170
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                }

                /* "new_topk_sim_join.pyx":1169
 * 
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
                goto __pyx_L118;
              }

              /* "new_topk_sim_join.pyx":1174
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                             if compared_set.count(l_rec_idx):
 */
              /*else*/ {
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
              }
              __pyx_L118:;

              /* "new_topk_sim_join.pyx":1176
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
              __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1177
 * 
 *                             if compared_set.count(l_rec_idx):
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                /* "new_topk_sim_join.pyx":1176
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                             if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 */
                goto __pyx_L120;
              }

              /* "new_topk_sim_join.pyx":1179
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
              /*else*/ {
                try {
                  __pyx_t_10 = std::unordered_set<int> ();
                } catch(...) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  __Pyx_CppExn2PyErr();
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                /* "new_topk_sim_join.pyx":1180
 *                             else:
 *                                 compared_set[l_rec_idx] = uset[int]()
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
                (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
              }
              __pyx_L120:;
            }
            __pyx_L97:;

            /* "new_topk_sim_join.pyx":1182
 *                                 compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("right3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "new_topk_sim_join.pyx":1124
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                             reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
            goto __pyx_L89;
          }

          /* "new_topk_sim_join.pyx":1185
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":1186
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "new_topk_sim_join.pyx":1187
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "new_topk_sim_join.pyx":1188
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "new_topk_sim_join.pyx":1189
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {
                  } else {
                    __pyx_t_1 = __pyx_t_2;
                    goto __pyx_L125_bool_binop_done;
                  }
                  __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                  __pyx_t_1 = __pyx_t_2;
                  __pyx_L125_bool_binop_done:;
                  if (__pyx_t_1) {

                    /* "new_topk_sim_join.pyx":1190
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap
 */
                    __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                    /* "new_topk_sim_join.pyx":1191
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                         denom = l_len + r_len - overlap
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
                    __pyx_t_3 = __pyx_v_reuse_info.overlap;
                    __pyx_v_overlap = __pyx_t_3;

                    /* "new_topk_sim_join.pyx":1192
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 *                                         #     printf("right3\n")
 */
                    __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

                    /* "new_topk_sim_join.pyx":1199
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L128_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L128_bool_binop_done;
                    }

                    /* "new_topk_sim_join.pyx":1200
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 */
                    __pyx_t_13 = (__pyx_v_overlap * 1.0);
                    if (unlikely(__pyx_v_denom == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_t_2 = (((__pyx_t_13 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L128_bool_binop_done:;

                    /* "new_topk_sim_join.pyx":1199
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1201
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      __pyx_t_8 = &__pyx_v_reuse_info.map;
                      __pyx_t_7 = __pyx_t_8->begin();
                      for (;;) {
                        if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                        __pyx_t_9 = *__pyx_t_7;
                        ++__pyx_t_7;
                        __pyx_v_field_pair = __pyx_t_9;

                        /* "new_topk_sim_join.pyx":1202
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "new_topk_sim_join.pyx":1203
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "new_topk_sim_join.pyx":1204
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                        if (!__pyx_t_2) {
                        } else {
                          __pyx_t_1 = __pyx_t_2;
                          goto __pyx_L134_bool_binop_done;
                        }
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                        __pyx_t_1 = __pyx_t_2;
                        __pyx_L134_bool_binop_done:;
                        if (__pyx_t_1) {

                          /* "new_topk_sim_join.pyx":1205
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 */
                          __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                          /* "new_topk_sim_join.pyx":1204
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        }

                        /* "new_topk_sim_join.pyx":1201
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      }

                      /* "new_topk_sim_join.pyx":1206
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 */
                      __pyx_t_13 = (__pyx_v_overlap * 1.0);
                      __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                      if (unlikely(__pyx_t_3 == 0)) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

                      /* "new_topk_sim_join.pyx":1207
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                      if (__pyx_t_1) {

                        /* "new_topk_sim_join.pyx":1208
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                        if (__pyx_t_1) {

                          /* "new_topk_sim_join.pyx":1209
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 */
                          __pyx_v_topk_heap.pop();

                          /* "new_topk_sim_join.pyx":1210
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                          /* "new_topk_sim_join.pyx":1208
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        }

                        /* "new_topk_sim_join.pyx":1207
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                        goto __pyx_L136;
                      }

                      /* "new_topk_sim_join.pyx":1212
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                      /*else*/ {
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                      }
                      __pyx_L136:;

                      /* "new_topk_sim_join.pyx":1199
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    }

                    /* "new_topk_sim_join.pyx":1214
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1215
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "new_topk_sim_join.pyx":1214
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L138;
                    }

                    /* "new_topk_sim_join.pyx":1217
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "new_topk_sim_join.pyx":1218
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L138:;

                    /* "new_topk_sim_join.pyx":1220
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                                     else:
 */
                    __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L140_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L140_bool_binop_done:;
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1221
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         # overlap = value
 */
                      (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                      /* "new_topk_sim_join.pyx":1220
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                                     else:
 */
                    }

                    /* "new_topk_sim_join.pyx":1189
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 */
                    goto __pyx_L124;
                  }

                  /* "new_topk_sim_join.pyx":1226
 *                                         # overlap += new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                         #                            l_tok_idx, r_tok_idx)
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 */
                  /*else*/ {
                    __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_new_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), 0, 0);

                    /* "new_topk_sim_join.pyx":1228
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                    (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                    /* "new_topk_sim_join.pyx":1230
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 */
                    __pyx_t_13 = (__pyx_v_overlap * 1.0);
                    __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                    if (unlikely(__pyx_t_3 == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

                    /* "new_topk_sim_join.pyx":1231
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1232
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                      if (__pyx_t_1) {

                        /* "new_topk_sim_join.pyx":1233
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 */
                        __pyx_v_topk_heap.pop();

                        /* "new_topk_sim_join.pyx":1234
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                        /* "new_topk_sim_join.pyx":1232
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      }

                      /* "new_topk_sim_join.pyx":1231
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                      goto __pyx_L142;
                    }

                    /* "new_topk_sim_join.pyx":1236
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                    /*else*/ {
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                    }
                    __pyx_L142:;

                    /* "new_topk_sim_join.pyx":1238
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "new_topk_sim_join.pyx":1239
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "new_topk_sim_join.pyx":1238
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L144;
                    }

                    /* "new_topk_sim_join.pyx":1241
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "new_topk_sim_join.pyx":1242
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L144:;
                  }
                  __pyx_L124:;

                  /* "new_topk_sim_join.pyx":1244
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "new_topk_sim_join.pyx":1188
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
                  goto __pyx_L123;
                }

                /* "new_topk_sim_join.pyx":1246
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_11 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) + 1);
                }
                __pyx_L123:;

                /* "new_topk_sim_join.pyx":1186
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
                goto __pyx_L122;
              }

              /* "new_topk_sim_join.pyx":1248
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L122:;

              /* "new_topk_sim_join.pyx":1185
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              goto __pyx_L121;
            }

            /* "new_topk_sim_join.pyx":1250
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_12 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_12;

              /* "new_topk_sim_join.pyx":1251
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L121:;
          }
          __pyx_L89:;

          /* "new_topk_sim_join.pyx":1254
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L146_bool_binop_done;
          }

          /* "new_topk_sim_join.pyx":1255
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L146_bool_binop_done:;

          /* "new_topk_sim_join.pyx":1254
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":1256
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "new_topk_sim_join.pyx":1257
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "new_topk_sim_join.pyx":1258
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "new_topk_sim_join.pyx":1257
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "new_topk_sim_join.pyx":1254
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "new_topk_sim_join.pyx":1094
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L81_continue:;
        }

        /* "new_topk_sim_join.pyx":1092
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "new_topk_sim_join.pyx":1263
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_r_tok_idx + 1) < __pyx_v_r_len) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":1264
 * 
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 */
        __pyx_t_13 = 1.0;
        __pyx_t_6 = (((__pyx_v_r_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_r_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_14 = (1.0 - (__pyx_t_6 / __pyx_v_r_len));
        if (((__pyx_t_13 < __pyx_t_14) != 0)) {
          __pyx_t_6 = __pyx_t_13;
        } else {
          __pyx_t_6 = __pyx_t_14;
        }
        __pyx_v_threshold = __pyx_t_6;

        /* "new_topk_sim_join.pyx":1265
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_r_rec_idx, (__pyx_v_r_tok_idx + 1)));

        /* "new_topk_sim_join.pyx":1263
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      }

      /* "new_topk_sim_join.pyx":1267
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":1268
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 *         # printf("finish\n")
 */
        try {
          __pyx_t_15 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_15;

        /* "new_topk_sim_join.pyx":1267
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "new_topk_sim_join.pyx":1269
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 *         # printf("finish\n")
 * 
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "new_topk_sim_join.pyx":1274
 *     # printf("checkpoint3\n")
 * 
 *     cdef double bound = 1e-6             # <<<<<<<<<<<<<<
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold
 */
  __pyx_v_bound = 1e-6;

  /* "new_topk_sim_join.pyx":1275
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "new_topk_sim_join.pyx":1276
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, umap[int, short]] p1
 */
    __pyx_t_6 = __pyx_v_prefix_events.top().threshold;
    __pyx_v_bound = __pyx_t_6;

    /* "new_topk_sim_join.pyx":1275
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  }

  /* "new_topk_sim_join.pyx":1280
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  __pyx_t_16 = __pyx_v_active_dict.begin();
  for (;;) {
    if (!(__pyx_t_16 != __pyx_v_active_dict.end())) break;
    __pyx_t_17 = *__pyx_t_16;
    ++__pyx_t_16;
    __pyx_v_p1 = __pyx_t_17;

    /* "new_topk_sim_join.pyx":1281
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first             # <<<<<<<<<<<<<<
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 */
    __pyx_t_3 = __pyx_v_p1.first;
    __pyx_v_l_rec_idx = __pyx_t_3;

    /* "new_topk_sim_join.pyx":1282
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    __pyx_t_19 = &__pyx_v_p1.second;
    __pyx_t_18 = __pyx_t_19->begin();
    for (;;) {
      if (!(__pyx_t_18 != __pyx_t_19->end())) break;
      __pyx_t_20 = *__pyx_t_18;
      ++__pyx_t_18;
      __pyx_v_p2 = __pyx_t_20;

      /* "new_topk_sim_join.pyx":1283
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      __pyx_t_21 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() < (__pyx_t_21 / __pyx_v_bound)) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L157_bool_binop_done;
      }

      /* "new_topk_sim_join.pyx":1284
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:             # <<<<<<<<<<<<<<
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 */
      __pyx_t_21 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_rtoken_vector[__pyx_v_p2.first]).size() < (__pyx_t_21 / __pyx_v_bound)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L157_bool_binop_done:;

      /* "new_topk_sim_join.pyx":1283
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      if (__pyx_t_1) {

        /* "new_topk_sim_join.pyx":1285
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second             # <<<<<<<<<<<<<<
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 */
        __pyx_t_22 = __pyx_v_p2.second;
        __pyx_v_value = __pyx_t_22;

        /* "new_topk_sim_join.pyx":1286
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)             # <<<<<<<<<<<<<<
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 */
        __pyx_t_6 = (__pyx_v_value * 1.0);
        __pyx_t_23 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() + (__pyx_v_rtoken_vector[__pyx_v_p2.first]).size()) - __pyx_v_value);
        if (unlikely(__pyx_t_23 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sim = (__pyx_t_6 / __pyx_t_23);

        /* "new_topk_sim_join.pyx":1287
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
        __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
        if (__pyx_t_1) {

          /* "new_topk_sim_join.pyx":1288
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
          if (__pyx_t_1) {

            /* "new_topk_sim_join.pyx":1289
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 */
            __pyx_v_topk_heap.pop();

            /* "new_topk_sim_join.pyx":1290
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));

            /* "new_topk_sim_join.pyx":1288
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          }

          /* "new_topk_sim_join.pyx":1287
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
          goto __pyx_L159;
        }

        /* "new_topk_sim_join.pyx":1292
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));
        }
        __pyx_L159:;

        /* "new_topk_sim_join.pyx":1283
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      }

      /* "new_topk_sim_join.pyx":1282
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    }

    /* "new_topk_sim_join.pyx":1280
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  }

  /* "new_topk_sim_join.pyx":1295
 * 
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint4\n")
 * 
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "new_topk_sim_join.pyx":1298
 *     # printf("checkpoint4\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":861
 * 
 * 
 * cdef void new_topk_sim_join_reuse_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.new_topk_sim_join_reuse_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "new_topk_sim_join.pyx":1301
 * 
 * 
 * cdef int new_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                          const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0
 */

static int __pyx_f_10debugblock_19debugblocker_cython_new_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list, int const __pyx_v_l_tok_idx, int const __pyx_v_r_tok_idx) {
  int __pyx_v_overlap;
  uint32_t __pyx_v_i;
  std::unordered_set<int>  __pyx_v_rset;
  int __pyx_r;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "new_topk_sim_join.pyx":1303
 * cdef int new_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,
 *                          const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef uint i
 * 
 */
  __pyx_v_overlap = 0;

  /* "new_topk_sim_join.pyx":1307
 * 
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size() - r_tok_idx):             # <<<<<<<<<<<<<<
 *         rset.insert(rtoken_list[i + r_tok_idx])
 * 
 */
  __pyx_t_1 = (__pyx_v_rtoken_list.size() - __pyx_v_r_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":1308
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size() - r_tok_idx):
 *         rset.insert(rtoken_list[i + r_tok_idx])             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 */
    __pyx_v_rset.insert((__pyx_v_rtoken_list[(__pyx_v_i + __pyx_v_r_tok_idx)]));
  }

  /* "new_topk_sim_join.pyx":1310
 *         rset.insert(rtoken_list[i + r_tok_idx])
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):             # <<<<<<<<<<<<<<
 *         if rset.count(ltoken_list[i + l_tok_idx]):
 *             overlap += 1
 */
  __pyx_t_1 = (__pyx_v_ltoken_list.size() - __pyx_v_l_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":1311
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    __pyx_t_3 = (__pyx_v_rset.count((__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])) != 0);
    if (__pyx_t_3) {

      /* "new_topk_sim_join.pyx":1312
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):
 *             overlap += 1             # <<<<<<<<<<<<<<
 * 
 *     return overlap
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "new_topk_sim_join.pyx":1311
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    }
  }

  /* "new_topk_sim_join.pyx":1314
 *             overlap += 1
 * 
 *     return overlap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":1301
 * 
 * 
 * cdef int new_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                          const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "new_topk_sim_join.pyx":1321
 * ####################################################################################################
 * ####################################################################################################
 * cdef void new_generate_prefix_events(const vector[vector[int]]& ltable,             # <<<<<<<<<<<<<<
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 */

static void __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events(std::vector<std::vector<int> >  const &__pyx_v_ltable, std::vector<std::vector<int> >  const &__pyx_v_rtable, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events) {

  /* "new_topk_sim_join.pyx":1324
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 *     new_generate_prefix_events_impl(ltable, 0, prefix_events)             # <<<<<<<<<<<<<<
 *     new_generate_prefix_events_impl(rtable, 1, prefix_events)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events_impl(__pyx_v_ltable, 0, __pyx_v_prefix_events);

  /* "new_topk_sim_join.pyx":1325
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 *     new_generate_prefix_events_impl(ltable, 0, prefix_events)
 *     new_generate_prefix_events_impl(rtable, 1, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     return
 */
  __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events_impl(__pyx_v_rtable, 1, __pyx_v_prefix_events);

  /* "new_topk_sim_join.pyx":1327
 *     new_generate_prefix_events_impl(rtable, 1, prefix_events)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":1321
 * ####################################################################################################
 * ####################################################################################################
 * cdef void new_generate_prefix_events(const vector[vector[int]]& ltable,             # <<<<<<<<<<<<<<
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 */

  /* function exit code */
  __pyx_L0:;
}

/* "new_topk_sim_join.pyx":1330
 * 
 * 
 * cdef void new_generate_prefix_events_impl(const vector[vector[int]]& table,             # <<<<<<<<<<<<<<
 *                                       const int table_indicator,
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 */

static void __pyx_f_10debugblock_19debugblocker_cython_new_generate_prefix_events_impl(std::vector<std::vector<int> >  const &__pyx_v_table, int const __pyx_v_table_indicator, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events) {
  uint32_t __pyx_v_i;
  uint32_t __pyx_v_length;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "new_topk_sim_join.pyx":1334
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 *     cdef uint i, length
 *     for i in xrange(table.size()):             # <<<<<<<<<<<<<<
 *         length = table[i].size()
 *         if length > 0:
 */
  __pyx_t_1 = __pyx_v_table.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "new_topk_sim_join.pyx":1335
 *     cdef uint i, length
 *     for i in xrange(table.size()):
 *         length = table[i].size()             # <<<<<<<<<<<<<<
 *         if length > 0:
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 */
    __pyx_v_length = (__pyx_v_table[__pyx_v_i]).size();

    /* "new_topk_sim_join.pyx":1336
 *     for i in xrange(table.size()):
 *         length = table[i].size()
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 * 
 */
    __pyx_t_3 = ((__pyx_v_length > 0) != 0);
    if (__pyx_t_3) {

      /* "new_topk_sim_join.pyx":1337
 *         length = table[i].size()
 *         if length > 0:
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))             # <<<<<<<<<<<<<<
 * 
 *     return
 */
      __pyx_v_prefix_events.push(PrefixEvent(1.0, __pyx_v_table_indicator, __pyx_v_i, 0));

      /* "new_topk_sim_join.pyx":1336
 *     for i in xrange(table.size()):
 *         length = table[i].size()
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 * 
 */
    }
  }

  /* "new_topk_sim_join.pyx":1339
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 * 
 *     return             # <<<<<<<<<<<<<<
 */
  goto __pyx_L0;

  /* "new_topk_sim_join.pyx":1330
 * 
 * 
 * cdef void new_generate_prefix_events_impl(const vector[vector[int]]& table,             # <<<<<<<<<<<<<<
 *                                       const int table_indicator,
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 */

  /* function exit code */
  __pyx_L0:;
}

/* "original_topk_sim_join.pyx":45
 * # For original topk sim join. The simplest version as described in the paper. Don't reuse or
 * # recording.
 * cdef heap[TopPair] original_topk_sim_join_plain(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                                 const vector[vector[int]]& rtoken_vector,
 *                                                 umap[int, uset[int]]& cand_set,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_plain(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "original_topk_sim_join.pyx":50
 *                                                 const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     original_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "original_topk_sim_join.pyx":53
 * 
 *     cdef heap[TopPair] topk_heap
 *     original_topk_sim_join_plain_impl(ltoken_vector, rtoken_vector, cand_set, prefix_events,             # <<<<<<<<<<<<<<
 *                                       topk_heap, output_size)
 *     return topk_heap
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_plain_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_cand_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_output_size);

  /* "original_topk_sim_join.pyx":55
 *     original_topk_sim_join_plain_impl(ltoken_vector, rtoken_vector, cand_set, prefix_events,
 *                                       topk_heap, output_size)
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":45
 * # For original topk sim join. The simplest version as described in the paper. Don't reuse or
 * # recording.
 * cdef heap[TopPair] original_topk_sim_join_plain(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                                 const vector[vector[int]]& rtoken_vector,
 *                                                 umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "original_topk_sim_join.pyx":58
 * 
 * 
 * cdef void original_topk_sim_join_plain_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             umap[int, uset[int]]& cand_set, heap[PrefixEvent]& prefix_events,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_plain_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  double __pyx_v_sim;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::set<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  double __pyx_t_6;
  std::unordered_set<int>  __pyx_t_7;
  std::set<std::pair<int,int> >  __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "original_topk_sim_join.pyx":62
 *                                             umap[int, uset[int]]& cand_set, heap[PrefixEvent]& prefix_events,
 *                                             heap[TopPair]& topk_heap, const int output_size) nogil:
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef umap[int, uset[int]] compared_set
 * 
 */
  __pyx_v_total_compared_pairs = 0;

  /* "original_topk_sim_join.pyx":77
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "original_topk_sim_join.pyx":78
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "original_topk_sim_join.pyx":79
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "original_topk_sim_join.pyx":78
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "original_topk_sim_join.pyx":80
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "original_topk_sim_join.pyx":81
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 */
    __pyx_v_prefix_events.pop();

    /* "original_topk_sim_join.pyx":83
 *         prefix_events.pop()
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 */
    __pyx_t_3 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_3;

    /* "original_topk_sim_join.pyx":84
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_1 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_1) {

      /* "original_topk_sim_join.pyx":85
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":86
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":87
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "original_topk_sim_join.pyx":88
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "original_topk_sim_join.pyx":89
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_1 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":90
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "original_topk_sim_join.pyx":91
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_r_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_r_rec_tuple = __pyx_t_5;

          /* "original_topk_sim_join.pyx":92
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":93
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":94
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() > 0 and \
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "original_topk_sim_join.pyx":96
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }

          /* "original_topk_sim_join.pyx":97
 * 
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = ((__pyx_v_l_len < (__pyx_v_topk_heap.top().sim * __pyx_v_r_len)) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_6 = __pyx_v_topk_heap.top().sim;
          if (unlikely(__pyx_t_6 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_2 = ((__pyx_v_l_len > (__pyx_v_r_len / __pyx_t_6)) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L13_bool_binop_done:;

          /* "original_topk_sim_join.pyx":96
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":98
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":96
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          }

          /* "original_topk_sim_join.pyx":100
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L17_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L17_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":101
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":100
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":103
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L20_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":104
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     overlap = original_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":103
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":106
 *                         continue
 * 
 *                     overlap = original_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 * 
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
          __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_original_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

          /* "original_topk_sim_join.pyx":108
 *                     overlap = original_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() == output_size:
 */
          __pyx_t_6 = (__pyx_v_overlap * 1.0);
          __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
          if (unlikely(__pyx_t_3 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

          /* "original_topk_sim_join.pyx":110
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":111
 * 
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":112
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 */
              __pyx_v_topk_heap.pop();

              /* "original_topk_sim_join.pyx":113
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

              /* "original_topk_sim_join.pyx":111
 * 
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            }

            /* "original_topk_sim_join.pyx":110
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
            goto __pyx_L22;
          }

          /* "original_topk_sim_join.pyx":115
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                     total_compared_pairs += 1
 */
          /*else*/ {
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
          }
          __pyx_L22:;

          /* "original_topk_sim_join.pyx":117
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
          __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

          /* "original_topk_sim_join.pyx":118
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":119
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
            printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

            /* "original_topk_sim_join.pyx":118
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          }

          /* "original_topk_sim_join.pyx":124
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":125
 * 
 *                     if compared_set.count(l_rec_idx):
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

            /* "original_topk_sim_join.pyx":124
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
            goto __pyx_L25;
          }

          /* "original_topk_sim_join.pyx":127
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
          /*else*/ {
            try {
              __pyx_t_7 = std::unordered_set<int> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

            /* "original_topk_sim_join.pyx":128
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
          }
          __pyx_L25:;

          /* "original_topk_sim_join.pyx":91
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "original_topk_sim_join.pyx":89
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "original_topk_sim_join.pyx":130
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":131
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_8 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_8;

        /* "original_topk_sim_join.pyx":130
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "original_topk_sim_join.pyx":132
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "original_topk_sim_join.pyx":84
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "original_topk_sim_join.pyx":134
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":135
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":136
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "original_topk_sim_join.pyx":137
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "original_topk_sim_join.pyx":138
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_1 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":139
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "original_topk_sim_join.pyx":140
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_l_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_l_rec_tuple = __pyx_t_5;

          /* "original_topk_sim_join.pyx":141
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":142
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":143
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() > 0 and \
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "original_topk_sim_join.pyx":145
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L31_bool_binop_done;
          }

          /* "original_topk_sim_join.pyx":146
 * 
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = ((__pyx_v_l_len < (__pyx_v_topk_heap.top().sim * __pyx_v_r_len)) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L31_bool_binop_done;
          }
          __pyx_t_6 = __pyx_v_topk_heap.top().sim;
          if (unlikely(__pyx_t_6 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_2 = ((__pyx_v_l_len > (__pyx_v_r_len / __pyx_t_6)) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L31_bool_binop_done:;

          /* "original_topk_sim_join.pyx":145
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":147
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L28_continue;

            /* "original_topk_sim_join.pyx":145
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          }

          /* "original_topk_sim_join.pyx":149
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L35_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L35_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":150
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L28_continue;

            /* "original_topk_sim_join.pyx":149
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":152
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L38_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L38_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":153
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     overlap = original_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
            goto __pyx_L28_continue;

            /* "original_topk_sim_join.pyx":152
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":155
 *                         continue
 * 
 *                     overlap = original_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 * 
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
          __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_original_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

          /* "original_topk_sim_join.pyx":157
 *                     overlap = original_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() == output_size:
 */
          __pyx_t_6 = (__pyx_v_overlap * 1.0);
          __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
          if (unlikely(__pyx_t_3 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

          /* "original_topk_sim_join.pyx":159
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":160
 * 
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":161
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 */
              __pyx_v_topk_heap.pop();

              /* "original_topk_sim_join.pyx":162
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

              /* "original_topk_sim_join.pyx":160
 * 
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            }

            /* "original_topk_sim_join.pyx":159
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
            goto __pyx_L40;
          }

          /* "original_topk_sim_join.pyx":164
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                     total_compared_pairs += 1
 */
          /*else*/ {
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
          }
          __pyx_L40:;

          /* "original_topk_sim_join.pyx":166
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
          __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

          /* "original_topk_sim_join.pyx":167
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":168
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
            printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

            /* "original_topk_sim_join.pyx":167
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          }

          /* "original_topk_sim_join.pyx":173
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":174
 * 
 *                     if compared_set.count(l_rec_idx):
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

            /* "original_topk_sim_join.pyx":173
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
            goto __pyx_L43;
          }

          /* "original_topk_sim_join.pyx":176
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
          /*else*/ {
            try {
              __pyx_t_7 = std::unordered_set<int> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

            /* "original_topk_sim_join.pyx":177
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
          }
          __pyx_L43:;

          /* "original_topk_sim_join.pyx":140
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L28_continue:;
        }

        /* "original_topk_sim_join.pyx":138
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "original_topk_sim_join.pyx":179
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":180
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 * 
 */
        try {
          __pyx_t_8 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_8;

        /* "original_topk_sim_join.pyx":179
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "original_topk_sim_join.pyx":181
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "original_topk_sim_join.pyx":183
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint3\n")
 * 
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "original_topk_sim_join.pyx":186
 *     # printf("checkpoint3\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":58
 * 
 * 
 * cdef void original_topk_sim_join_plain_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             umap[int, uset[int]]& cand_set, heap[PrefixEvent]& prefix_events,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.original_topk_sim_join_plain_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "original_topk_sim_join.pyx":189
 * 
 * 
 * cdef int original_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef uint i
 */

static int __pyx_f_10debugblock_19debugblocker_cython_original_plain_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list) {
  int __pyx_v_overlap;
  uint32_t __pyx_v_i;
  std::unordered_set<int>  __pyx_v_rset;
  int __pyx_r;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "original_topk_sim_join.pyx":190
 * 
 * cdef int original_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef uint i
 * 
 */
  __pyx_v_overlap = 0;

  /* "original_topk_sim_join.pyx":194
 * 
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size()):             # <<<<<<<<<<<<<<
 *         rset.insert(rtoken_list[i])
 * 
 */
  __pyx_t_1 = __pyx_v_rtoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "original_topk_sim_join.pyx":195
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size()):
 *         rset.insert(rtoken_list[i])             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size()):
 */
    __pyx_v_rset.insert((__pyx_v_rtoken_list[__pyx_v_i]));
  }

  /* "original_topk_sim_join.pyx":197
 *         rset.insert(rtoken_list[i])
 * 
 *     for i in xrange(ltoken_list.size()):             # <<<<<<<<<<<<<<
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1
 */
  __pyx_t_1 = __pyx_v_ltoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "original_topk_sim_join.pyx":198
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    __pyx_t_3 = (__pyx_v_rset.count((__pyx_v_ltoken_list[__pyx_v_i])) != 0);
    if (__pyx_t_3) {

      /* "original_topk_sim_join.pyx":199
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1             # <<<<<<<<<<<<<<
 * 
 *     return overlap
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "original_topk_sim_join.pyx":198
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    }
  }

  /* "original_topk_sim_join.pyx":201
 *             overlap += 1
 * 
 *     return overlap             # <<<<<<<<<<<<<<
 * 
 * ####################################################################################################
 */
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":189
 * 
 * 
 * cdef int original_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef uint i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "original_topk_sim_join.pyx":206
 * ####################################################################################################
 * # For original topk sim join. Only record pre-calculated info but don't reuse.
 * cdef heap[TopPair] original_topk_sim_join_record(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                                  const vector[vector[int]]& rtoken_vector,
 *                                                  const vector[vector[int]]& lindex_vector,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_record(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  const &__pyx_v_lindex_vector, std::vector<std::vector<int> >  const &__pyx_v_rindex_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, int const __pyx_v_offset_of_field_num, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "original_topk_sim_join.pyx":215
 *                                                  const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     original_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "original_topk_sim_join.pyx":218
 * 
 *     cdef heap[TopPair] topk_heap
 *     original_topk_sim_join_record_impl(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                        cand_set, reuse_set, prefix_events, topk_heap,
 *                                        offset_of_field_num, output_size)
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_record_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_offset_of_field_num, __pyx_v_output_size);

  /* "original_topk_sim_join.pyx":222
 *                                        offset_of_field_num, output_size)
 * 
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":206
 * ####################################################################################################
 * # For original topk sim join. Only record pre-calculated info but don't reuse.
 * cdef heap[TopPair] original_topk_sim_join_record(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                                  const vector[vector[int]]& rtoken_vector,
 *                                                  const vector[vector[int]]& lindex_vector,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "original_topk_sim_join.pyx":225
 * 
 * 
 * cdef void original_topk_sim_join_record_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                              const vector[vector[int]]& rtoken_vector,
 *                                              const vector[vector[int]]& lindex_vector,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_record_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  const &__pyx_v_lindex_vector, std::vector<std::vector<int> >  const &__pyx_v_rindex_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_offset_of_field_num, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  ReuseInfo __pyx_v_reuse_info;
  double __pyx_v_sim;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::set<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  double __pyx_t_6;
  std::unordered_set<int>  __pyx_t_7;
  std::unordered_map<int,ReuseInfo>  __pyx_t_8;
  std::set<std::pair<int,int> >  __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "original_topk_sim_join.pyx":233
 *                                              heap[PrefixEvent]& prefix_events, heap[TopPair]& topk_heap,
 *                                              const int offset_of_field_num, const int output_size) nogil:
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef umap[int, uset[int]] compared_set
 * 
 */
  __pyx_v_total_compared_pairs = 0;

  /* "original_topk_sim_join.pyx":247
 *     cdef double sim
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "original_topk_sim_join.pyx":248
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "original_topk_sim_join.pyx":249
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "original_topk_sim_join.pyx":248
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "original_topk_sim_join.pyx":250
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "original_topk_sim_join.pyx":251
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 */
    __pyx_v_prefix_events.pop();

    /* "original_topk_sim_join.pyx":253
 *         prefix_events.pop()
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 */
    __pyx_t_3 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_3;

    /* "original_topk_sim_join.pyx":254
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_1 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_1) {

      /* "original_topk_sim_join.pyx":255
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":256
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":257
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "original_topk_sim_join.pyx":258
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "original_topk_sim_join.pyx":259
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_1 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":260
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "original_topk_sim_join.pyx":261
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_r_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_r_rec_tuple = __pyx_t_5;

          /* "original_topk_sim_join.pyx":262
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":263
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":264
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() > 0 and \
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "original_topk_sim_join.pyx":266
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }

          /* "original_topk_sim_join.pyx":267
 * 
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = ((__pyx_v_l_len < (__pyx_v_topk_heap.top().sim * __pyx_v_r_len)) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_6 = __pyx_v_topk_heap.top().sim;
          if (unlikely(__pyx_t_6 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_2 = ((__pyx_v_l_len > (__pyx_v_r_len / __pyx_t_6)) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L13_bool_binop_done:;

          /* "original_topk_sim_join.pyx":266
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":268
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":266
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          }

          /* "original_topk_sim_join.pyx":270
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L17_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L17_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":271
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":270
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":273
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L20_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":274
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     reuse_info = ReuseInfo(0)
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":273
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":276
 *                         continue
 * 
 *                     reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                     original_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                                lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
          __pyx_v_reuse_info = ReuseInfo(0);

          /* "original_topk_sim_join.pyx":277
 * 
 *                     reuse_info = ReuseInfo(0)
 *                     original_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                l_tok_idx, r_tok_idx, reuse_info, offset_of_field_num)
 */
          __pyx_f_10debugblock_19debugblocker_cython_original_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), __pyx_v_l_tok_idx, __pyx_v_r_tok_idx, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

          /* "original_topk_sim_join.pyx":281
 *                                                l_tok_idx, r_tok_idx, reuse_info, offset_of_field_num)
 * 
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)             # <<<<<<<<<<<<<<
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 */
          __pyx_t_6 = (__pyx_v_reuse_info.overlap * 1.0);
          __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_reuse_info.overlap);
          if (unlikely(__pyx_t_3 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

          /* "original_topk_sim_join.pyx":282
 * 
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":283
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":284
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 */
              __pyx_v_topk_heap.pop();

              /* "original_topk_sim_join.pyx":285
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

              /* "original_topk_sim_join.pyx":283
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            }

            /* "original_topk_sim_join.pyx":282
 * 
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
            goto __pyx_L22;
          }

          /* "original_topk_sim_join.pyx":287
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                     total_compared_pairs += 1
 */
          /*else*/ {
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
          }
          __pyx_L22:;

          /* "original_topk_sim_join.pyx":289
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
          __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

          /* "original_topk_sim_join.pyx":290
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":291
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
            printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

            /* "original_topk_sim_join.pyx":290
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          }

          /* "original_topk_sim_join.pyx":296
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":297
 * 
 *                     if compared_set.count(l_rec_idx):
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

            /* "original_topk_sim_join.pyx":296
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
            goto __pyx_L25;
          }

          /* "original_topk_sim_join.pyx":299
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
          /*else*/ {
            try {
              __pyx_t_7 = std::unordered_set<int> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

            /* "original_topk_sim_join.pyx":300
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                     if reuse_set.count(l_rec_idx):
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
          }
          __pyx_L25:;

          /* "original_topk_sim_join.pyx":302
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":303
 * 
 *                     if reuse_set.count(l_rec_idx):
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                     else:
 *                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
            ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

            /* "original_topk_sim_join.pyx":302
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                     else:
 */
            goto __pyx_L26;
          }

          /* "original_topk_sim_join.pyx":305
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                     else:
 *                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
          /*else*/ {
            try {
              __pyx_t_8 = std::unordered_map<int,ReuseInfo> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

            /* "original_topk_sim_join.pyx":306
 *                     else:
 *                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
            ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
          }
          __pyx_L26:;

          /* "original_topk_sim_join.pyx":261
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "original_topk_sim_join.pyx":259
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "original_topk_sim_join.pyx":308
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":309
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_9 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_9;

        /* "original_topk_sim_join.pyx":308
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "original_topk_sim_join.pyx":310
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "original_topk_sim_join.pyx":254
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "original_topk_sim_join.pyx":312
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":313
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":314
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "original_topk_sim_join.pyx":315
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "original_topk_sim_join.pyx":316
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_1 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":317
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "original_topk_sim_join.pyx":318
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_l_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_l_rec_tuple = __pyx_t_5;

          /* "original_topk_sim_join.pyx":319
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":320
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":321
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() > 0 and \
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "original_topk_sim_join.pyx":323
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L32_bool_binop_done;
          }

          /* "original_topk_sim_join.pyx":324
 * 
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = ((__pyx_v_l_len < (__pyx_v_topk_heap.top().sim * __pyx_v_r_len)) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_6 = __pyx_v_topk_heap.top().sim;
          if (unlikely(__pyx_t_6 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_2 = ((__pyx_v_l_len > (__pyx_v_r_len / __pyx_t_6)) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L32_bool_binop_done:;

          /* "original_topk_sim_join.pyx":323
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":325
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L29_continue;

            /* "original_topk_sim_join.pyx":323
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          }

          /* "original_topk_sim_join.pyx":327
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L36_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L36_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":328
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L29_continue;

            /* "original_topk_sim_join.pyx":327
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":330
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L39_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L39_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":331
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 * 
 */
            goto __pyx_L29_continue;

            /* "original_topk_sim_join.pyx":330
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":334
 * 
 * 
 *                     reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                     original_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                                lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
          __pyx_v_reuse_info = ReuseInfo(0);

          /* "original_topk_sim_join.pyx":335
 * 
 *                     reuse_info = ReuseInfo(0)
 *                     original_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                l_tok_idx, r_tok_idx, reuse_info, offset_of_field_num)
 */
          __pyx_f_10debugblock_19debugblocker_cython_original_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), __pyx_v_l_tok_idx, __pyx_v_r_tok_idx, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

          /* "original_topk_sim_join.pyx":339
 *                                                l_tok_idx, r_tok_idx, reuse_info, offset_of_field_num)
 * 
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)             # <<<<<<<<<<<<<<
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 */
          __pyx_t_6 = (__pyx_v_reuse_info.overlap * 1.0);
          __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_reuse_info.overlap);
          if (unlikely(__pyx_t_3 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

          /* "original_topk_sim_join.pyx":340
 * 
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":341
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":342
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 */
              __pyx_v_topk_heap.pop();

              /* "original_topk_sim_join.pyx":343
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

              /* "original_topk_sim_join.pyx":341
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            }

            /* "original_topk_sim_join.pyx":340
 * 
 *                     sim = reuse_info.overlap * 1.0 / (l_len + r_len - reuse_info.overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
            goto __pyx_L41;
          }

          /* "original_topk_sim_join.pyx":345
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                     total_compared_pairs += 1
 */
          /*else*/ {
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
          }
          __pyx_L41:;

          /* "original_topk_sim_join.pyx":347
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
          __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

          /* "original_topk_sim_join.pyx":348
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":349
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
            printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

            /* "original_topk_sim_join.pyx":348
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          }

          /* "original_topk_sim_join.pyx":354
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":355
 * 
 *                     if compared_set.count(l_rec_idx):
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

            /* "original_topk_sim_join.pyx":354
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
            goto __pyx_L44;
          }

          /* "original_topk_sim_join.pyx":357
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
          /*else*/ {
            try {
              __pyx_t_7 = std::unordered_set<int> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

            /* "original_topk_sim_join.pyx":358
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                     if reuse_set.count(l_rec_idx):
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
          }
          __pyx_L44:;

          /* "original_topk_sim_join.pyx":360
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":361
 * 
 *                     if reuse_set.count(l_rec_idx):
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                     else:
 *                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
            ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

            /* "original_topk_sim_join.pyx":360
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                     else:
 */
            goto __pyx_L45;
          }

          /* "original_topk_sim_join.pyx":363
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                     else:
 *                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
          /*else*/ {
            try {
              __pyx_t_8 = std::unordered_map<int,ReuseInfo> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

            /* "original_topk_sim_join.pyx":364
 *                     else:
 *                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
            ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
          }
          __pyx_L45:;

          /* "original_topk_sim_join.pyx":318
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L29_continue:;
        }

        /* "original_topk_sim_join.pyx":316
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "original_topk_sim_join.pyx":366
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":367
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 * 
 */
        try {
          __pyx_t_9 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_9;

        /* "original_topk_sim_join.pyx":366
 *                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "original_topk_sim_join.pyx":368
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "original_topk_sim_join.pyx":370
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 * 
 *     return
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "original_topk_sim_join.pyx":372
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":225
 * 
 * 
 * cdef void original_topk_sim_join_record_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                              const vector[vector[int]]& rtoken_vector,
 *                                              const vector[vector[int]]& lindex_vector,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.original_topk_sim_join_record_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "original_topk_sim_join.pyx":375
 * 
 * 
 * cdef void original_reuse_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                      const vector[int]& lindex_list, const vector[int]& rindex_list,
 *                                      const int l_tok_idx, const int r_tok_idx,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_original_reuse_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list, std::vector<int>  const &__pyx_v_lindex_list, std::vector<int>  const &__pyx_v_rindex_list, int const __pyx_v_l_tok_idx, int const __pyx_v_r_tok_idx, ReuseInfo &__pyx_v_reuse_info, int const __pyx_v_offset_of_field_num) {
  int __pyx_v_value;
  uint32_t __pyx_v_i;
  std::unordered_map<int,int>  __pyx_v_rmap;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "original_topk_sim_join.pyx":383
 * 
 *     cdef umap[int, int] rmap
 *     for i in xrange(rtoken_list.size() - r_tok_idx):             # <<<<<<<<<<<<<<
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]
 * 
 */
  __pyx_t_1 = (__pyx_v_rtoken_list.size() - __pyx_v_r_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "original_topk_sim_join.pyx":384
 *     cdef umap[int, int] rmap
 *     for i in xrange(rtoken_list.size() - r_tok_idx):
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 */
    (__pyx_v_rmap[(__pyx_v_rtoken_list[(__pyx_v_i + __pyx_v_r_tok_idx)])]) = (__pyx_v_rindex_list[(__pyx_v_i + __pyx_v_r_tok_idx)]);
  }

  /* "original_topk_sim_join.pyx":386
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):             # <<<<<<<<<<<<<<
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1
 */
  __pyx_t_1 = (__pyx_v_ltoken_list.size() - __pyx_v_l_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "original_topk_sim_join.pyx":387
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 */
    __pyx_t_3 = (__pyx_v_rmap.count((__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])) != 0);
    if (__pyx_t_3) {

      /* "original_topk_sim_join.pyx":388
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1             # <<<<<<<<<<<<<<
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):
 */
      __pyx_v_reuse_info.overlap = (__pyx_v_reuse_info.overlap + 1);

      /* "original_topk_sim_join.pyx":389
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]             # <<<<<<<<<<<<<<
 *             if reuse_info.map.count(value):
 *                 reuse_info.map[value] += 1
 */
      __pyx_v_value = (((__pyx_v_lindex_list[(__pyx_v_i + __pyx_v_l_tok_idx)]) * __pyx_v_offset_of_field_num) + (__pyx_v_rmap[(__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])]));

      /* "original_topk_sim_join.pyx":390
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):             # <<<<<<<<<<<<<<
 *                 reuse_info.map[value] += 1
 *             else:
 */
      __pyx_t_3 = (__pyx_v_reuse_info.map.count(__pyx_v_value) != 0);
      if (__pyx_t_3) {

        /* "original_topk_sim_join.pyx":391
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):
 *                 reuse_info.map[value] += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 reuse_info.map[value] = 1
 */
        __pyx_t_4 = __pyx_v_value;
        (__pyx_v_reuse_info.map[__pyx_t_4]) = ((__pyx_v_reuse_info.map[__pyx_t_4]) + 1);

        /* "original_topk_sim_join.pyx":390
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):             # <<<<<<<<<<<<<<
 *                 reuse_info.map[value] += 1
 *             else:
 */
        goto __pyx_L8;
      }

      /* "original_topk_sim_join.pyx":393
 *                 reuse_info.map[value] += 1
 *             else:
 *                 reuse_info.map[value] = 1             # <<<<<<<<<<<<<<
 * 
 *     return
 */
      /*else*/ {
        (__pyx_v_reuse_info.map[__pyx_v_value]) = 1;
      }
      __pyx_L8:;

      /* "original_topk_sim_join.pyx":387
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 */
    }
  }

  /* "original_topk_sim_join.pyx":395
 *                 reuse_info.map[value] = 1
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * ####################################################################################################
 */
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":375
 * 
 * 
 * cdef void original_reuse_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                      const vector[int]& lindex_list, const vector[int]& rindex_list,
 *                                      const int l_tok_idx, const int r_tok_idx,
 */

  /* function exit code */
  __pyx_L0:;
}

/* "original_topk_sim_join.pyx":400
 * ####################################################################################################
 * # For original topk sim join. Only reuse pre-calculated info but don't record.
 * cdef heap[TopPair] original_topk_sim_join_reuse(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_reuse(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_set<int>  &__pyx_v_remained_fields, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, int const __pyx_v_offset_of_field_num, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "original_topk_sim_join.pyx":407
 *                                        const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     original_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "original_topk_sim_join.pyx":410
 * 
 *     cdef heap[TopPair] topk_heap
 *     original_topk_sim_join_reuse_impl(ltoken_vector, rtoken_vector, remained_fields, cand_set,             # <<<<<<<<<<<<<<
 *                                       reuse_set, prefix_events, topk_heap,
 *                                       offset_of_field_num, output_size)
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_reuse_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_remained_fields, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_offset_of_field_num, __pyx_v_output_size);

  /* "original_topk_sim_join.pyx":414
 *                                       offset_of_field_num, output_size)
 * 
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":400
 * ####################################################################################################
 * # For original topk sim join. Only reuse pre-calculated info but don't record.
 * cdef heap[TopPair] original_topk_sim_join_reuse(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "original_topk_sim_join.pyx":417
 * 
 * 
 * cdef void original_topk_sim_join_reuse_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_reuse_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_set<int>  &__pyx_v_remained_fields, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_offset_of_field_num, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  int __pyx_v_denom;
  ReuseInfo __pyx_v_reuse_info;
  double __pyx_v_sim;
  std::pair<int,int>  __pyx_v_field_pair;
  int __pyx_v_lfield;
  int __pyx_v_rfield;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::set<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  double __pyx_t_6;
  std::unordered_map<int,int> ::iterator __pyx_t_7;
  std::unordered_map<int,int>  *__pyx_t_8;
  std::pair<int,int>  __pyx_t_9;
  std::unordered_set<int>  __pyx_t_10;
  std::set<std::pair<int,int> >  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "original_topk_sim_join.pyx":424
 *                                             const int offset_of_field_num, const int output_size) nogil:
 *     # printf("checkpoint1\n")
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef umap[int, uset[int]] compared_set
 * 
 */
  __pyx_v_total_compared_pairs = 0;

  /* "original_topk_sim_join.pyx":440
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "original_topk_sim_join.pyx":441
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "original_topk_sim_join.pyx":442
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "original_topk_sim_join.pyx":441
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "original_topk_sim_join.pyx":443
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "original_topk_sim_join.pyx":444
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 */
    __pyx_v_prefix_events.pop();

    /* "original_topk_sim_join.pyx":446
 *         prefix_events.pop()
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 */
    __pyx_t_3 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_3;

    /* "original_topk_sim_join.pyx":447
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_1 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_1) {

      /* "original_topk_sim_join.pyx":448
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":449
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":450
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "original_topk_sim_join.pyx":451
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "original_topk_sim_join.pyx":452
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_1 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":453
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "original_topk_sim_join.pyx":454
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_r_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_r_rec_tuple = __pyx_t_5;

          /* "original_topk_sim_join.pyx":455
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":456
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":457
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() > 0 and \
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "original_topk_sim_join.pyx":459
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }

          /* "original_topk_sim_join.pyx":460
 * 
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = ((__pyx_v_l_len < (__pyx_v_topk_heap.top().sim * __pyx_v_r_len)) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_6 = __pyx_v_topk_heap.top().sim;
          if (unlikely(__pyx_t_6 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_2 = ((__pyx_v_l_len > (__pyx_v_r_len / __pyx_t_6)) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L13_bool_binop_done:;

          /* "original_topk_sim_join.pyx":459
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":461
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":459
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          }

          /* "original_topk_sim_join.pyx":463
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L17_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L17_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":464
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":463
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":466
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L20_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L20_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":467
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":466
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":469
 *                         continue
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap
 */
          __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L23_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L23_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":470
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 */
            __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

            /* "original_topk_sim_join.pyx":471
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 */
            __pyx_t_3 = __pyx_v_reuse_info.overlap;
            __pyx_v_overlap = __pyx_t_3;

            /* "original_topk_sim_join.pyx":472
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 */
            __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

            /* "original_topk_sim_join.pyx":473
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 */
            __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L26_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L26_bool_binop_done;
            }

            /* "original_topk_sim_join.pyx":474
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                             for field_pair in reuse_info.map:
 *                                 lfield = field_pair.first / offset_of_field_num
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            if (unlikely(__pyx_v_denom == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_t_2 = (((__pyx_t_6 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L26_bool_binop_done:;

            /* "original_topk_sim_join.pyx":473
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 */
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":475
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 */
              __pyx_t_8 = &__pyx_v_reuse_info.map;
              __pyx_t_7 = __pyx_t_8->begin();
              for (;;) {
                if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                __pyx_t_9 = *__pyx_t_7;
                ++__pyx_t_7;
                __pyx_v_field_pair = __pyx_t_9;

                /* "original_topk_sim_join.pyx":476
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 *                                 lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                /* "original_topk_sim_join.pyx":477
 *                             for field_pair in reuse_info.map:
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                     overlap -= field_pair.second
 */
                if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                /* "original_topk_sim_join.pyx":478
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                if (!__pyx_t_2) {
                } else {
                  __pyx_t_1 = __pyx_t_2;
                  goto __pyx_L32_bool_binop_done;
                }
                __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                __pyx_t_1 = __pyx_t_2;
                __pyx_L32_bool_binop_done:;
                if (__pyx_t_1) {

                  /* "original_topk_sim_join.pyx":479
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                     overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 */
                  __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                  /* "original_topk_sim_join.pyx":478
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                }

                /* "original_topk_sim_join.pyx":475
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 */
              }

              /* "original_topk_sim_join.pyx":480
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 */
              __pyx_t_6 = (__pyx_v_overlap * 1.0);
              __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
              if (unlikely(__pyx_t_3 == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[2]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

              /* "original_topk_sim_join.pyx":481
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
              if (__pyx_t_1) {

                /* "original_topk_sim_join.pyx":482
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                if (__pyx_t_1) {

                  /* "original_topk_sim_join.pyx":483
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 */
                  __pyx_v_topk_heap.pop();

                  /* "original_topk_sim_join.pyx":484
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                  /* "original_topk_sim_join.pyx":482
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                }

                /* "original_topk_sim_join.pyx":481
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
                goto __pyx_L34;
              }

              /* "original_topk_sim_join.pyx":486
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
              /*else*/ {
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
              }
              __pyx_L34:;

              /* "original_topk_sim_join.pyx":473
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 */
            }

            /* "original_topk_sim_join.pyx":488
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":489
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "original_topk_sim_join.pyx":488
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L36;
            }

            /* "original_topk_sim_join.pyx":491
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_10 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[2]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

              /* "original_topk_sim_join.pyx":492
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L36:;

            /* "original_topk_sim_join.pyx":494
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                         if total_compared_pairs % 100000 == 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "original_topk_sim_join.pyx":495
 * 
 *                         total_compared_pairs += 1
 *                         if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":496
 *                         total_compared_pairs += 1
 *                         if total_compared_pairs % 100000 == 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "original_topk_sim_join.pyx":495
 * 
 *                         total_compared_pairs += 1
 *                         if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "original_topk_sim_join.pyx":500
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     overlap = original_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 */
            goto __pyx_L10_continue;

            /* "original_topk_sim_join.pyx":469
 *                         continue
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap
 */
          }

          /* "original_topk_sim_join.pyx":502
 *                         continue
 * 
 *                     overlap = original_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                    l_tok_idx, r_tok_idx)
 * 
 */
          __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_original_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), __pyx_v_l_tok_idx, __pyx_v_r_tok_idx);

          /* "original_topk_sim_join.pyx":505
 *                                                    l_tok_idx, r_tok_idx)
 * 
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 */
          __pyx_t_6 = (__pyx_v_overlap * 1.0);
          __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
          if (unlikely(__pyx_t_3 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

          /* "original_topk_sim_join.pyx":506
 * 
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":507
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":508
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 */
              __pyx_v_topk_heap.pop();

              /* "original_topk_sim_join.pyx":509
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

              /* "original_topk_sim_join.pyx":507
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            }

            /* "original_topk_sim_join.pyx":506
 * 
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
            goto __pyx_L38;
          }

          /* "original_topk_sim_join.pyx":511
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                     total_compared_pairs += 1
 */
          /*else*/ {
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
          }
          __pyx_L38:;

          /* "original_topk_sim_join.pyx":513
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
          __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

          /* "original_topk_sim_join.pyx":514
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":515
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
            printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

            /* "original_topk_sim_join.pyx":514
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          }

          /* "original_topk_sim_join.pyx":520
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":521
 * 
 *                     if compared_set.count(l_rec_idx):
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

            /* "original_topk_sim_join.pyx":520
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
            goto __pyx_L41;
          }

          /* "original_topk_sim_join.pyx":523
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
          /*else*/ {
            try {
              __pyx_t_10 = std::unordered_set<int> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

            /* "original_topk_sim_join.pyx":524
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
          }
          __pyx_L41:;

          /* "original_topk_sim_join.pyx":454
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "original_topk_sim_join.pyx":452
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "original_topk_sim_join.pyx":526
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":527
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_11 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_11;

        /* "original_topk_sim_join.pyx":526
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "original_topk_sim_join.pyx":528
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "original_topk_sim_join.pyx":447
 *         # printf("%0.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         table_indicator = event.table_indicator
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "original_topk_sim_join.pyx":530
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":531
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_3;

      /* "original_topk_sim_join.pyx":532
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "original_topk_sim_join.pyx":533
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "original_topk_sim_join.pyx":534
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_1 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":535
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "original_topk_sim_join.pyx":536
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_l_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_l_rec_tuple = __pyx_t_5;

          /* "original_topk_sim_join.pyx":537
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":538
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_3;

          /* "original_topk_sim_join.pyx":539
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if topk_heap.size() > 0 and \
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "original_topk_sim_join.pyx":541
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L47_bool_binop_done;
          }

          /* "original_topk_sim_join.pyx":542
 * 
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = ((__pyx_v_l_len < (__pyx_v_topk_heap.top().sim * __pyx_v_r_len)) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L47_bool_binop_done;
          }
          __pyx_t_6 = __pyx_v_topk_heap.top().sim;
          if (unlikely(__pyx_t_6 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_2 = ((__pyx_v_l_len > (__pyx_v_r_len / __pyx_t_6)) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L47_bool_binop_done:;

          /* "original_topk_sim_join.pyx":541
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":543
 *                     if topk_heap.size() > 0 and \
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L44_continue;

            /* "original_topk_sim_join.pyx":541
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if topk_heap.size() > 0 and \             # <<<<<<<<<<<<<<
 *                             (l_len < topk_heap.top().sim * r_len or l_len > r_len / topk_heap.top().sim):
 *                         continue
 */
          }

          /* "original_topk_sim_join.pyx":545
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L51_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L51_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":546
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L44_continue;

            /* "original_topk_sim_join.pyx":545
 *                         continue
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":548
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L54_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L54_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":549
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L44_continue;

            /* "original_topk_sim_join.pyx":548
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "original_topk_sim_join.pyx":551
 *                         continue
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap
 */
          __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L57_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L57_bool_binop_done:;
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":552
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 */
            __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

            /* "original_topk_sim_join.pyx":553
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 */
            __pyx_t_3 = __pyx_v_reuse_info.overlap;
            __pyx_v_overlap = __pyx_t_3;

            /* "original_topk_sim_join.pyx":554
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 */
            __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

            /* "original_topk_sim_join.pyx":555
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 */
            __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L60_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L60_bool_binop_done;
            }

            /* "original_topk_sim_join.pyx":556
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                             for field_pair in reuse_info.map:
 *                                 lfield = field_pair.first / offset_of_field_num
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            if (unlikely(__pyx_v_denom == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_t_2 = (((__pyx_t_6 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L60_bool_binop_done:;

            /* "original_topk_sim_join.pyx":555
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 */
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":557
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 */
              __pyx_t_8 = &__pyx_v_reuse_info.map;
              __pyx_t_7 = __pyx_t_8->begin();
              for (;;) {
                if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                __pyx_t_9 = *__pyx_t_7;
                ++__pyx_t_7;
                __pyx_v_field_pair = __pyx_t_9;

                /* "original_topk_sim_join.pyx":558
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 *                                 lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                /* "original_topk_sim_join.pyx":559
 *                             for field_pair in reuse_info.map:
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                     overlap -= field_pair.second
 */
                if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                  #ifdef WITH_THREAD
                  PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                }
                __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                /* "original_topk_sim_join.pyx":560
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                if (!__pyx_t_2) {
                } else {
                  __pyx_t_1 = __pyx_t_2;
                  goto __pyx_L66_bool_binop_done;
                }
                __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                __pyx_t_1 = __pyx_t_2;
                __pyx_L66_bool_binop_done:;
                if (__pyx_t_1) {

                  /* "original_topk_sim_join.pyx":561
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                     overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 */
                  __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                  /* "original_topk_sim_join.pyx":560
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                }

                /* "original_topk_sim_join.pyx":557
 *                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                 lfield = field_pair.first / offset_of_field_num
 *                                 rfield = field_pair.first % offset_of_field_num
 */
              }

              /* "original_topk_sim_join.pyx":562
 *                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 */
              __pyx_t_6 = (__pyx_v_overlap * 1.0);
              __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
              if (unlikely(__pyx_t_3 == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[2]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

              /* "original_topk_sim_join.pyx":563
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
              if (__pyx_t_1) {

                /* "original_topk_sim_join.pyx":564
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                if (__pyx_t_1) {

                  /* "original_topk_sim_join.pyx":565
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 */
                  __pyx_v_topk_heap.pop();

                  /* "original_topk_sim_join.pyx":566
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                  __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                  /* "original_topk_sim_join.pyx":564
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:
 *                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                     topk_heap.pop()
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                }

                /* "original_topk_sim_join.pyx":563
 *                                     overlap -= field_pair.second
 *                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                 if topk_heap.top().sim < sim:
 *                                     topk_heap.pop()
 */
                goto __pyx_L68;
              }

              /* "original_topk_sim_join.pyx":568
 *                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                             else:
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
              /*else*/ {
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
              }
              __pyx_L68:;

              /* "original_topk_sim_join.pyx":555
 *                         overlap = reuse_info.overlap
 *                         denom = l_len + r_len - overlap
 *                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                             for field_pair in reuse_info.map:
 */
            }

            /* "original_topk_sim_join.pyx":570
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":571
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "original_topk_sim_join.pyx":570
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L70;
            }

            /* "original_topk_sim_join.pyx":573
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_10 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[2]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

              /* "original_topk_sim_join.pyx":574
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L70:;

            /* "original_topk_sim_join.pyx":576
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                         if total_compared_pairs % 100000 == 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "original_topk_sim_join.pyx":577
 * 
 *                         total_compared_pairs += 1
 *                         if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":578
 *                         total_compared_pairs += 1
 *                         if total_compared_pairs % 100000 == 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "original_topk_sim_join.pyx":577
 * 
 *                         total_compared_pairs += 1
 *                         if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "original_topk_sim_join.pyx":582
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     overlap = original_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 */
            goto __pyx_L44_continue;

            /* "original_topk_sim_join.pyx":551
 *                         continue
 * 
 *                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                         overlap = reuse_info.overlap
 */
          }

          /* "original_topk_sim_join.pyx":584
 *                         continue
 * 
 *                     overlap = original_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                    l_tok_idx, r_tok_idx)
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
          __pyx_v_overlap = __pyx_f_10debugblock_19debugblocker_cython_original_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), __pyx_v_l_tok_idx, __pyx_v_r_tok_idx);

          /* "original_topk_sim_join.pyx":586
 *                     overlap = original_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                                    l_tok_idx, r_tok_idx)
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 */
          __pyx_t_6 = (__pyx_v_overlap * 1.0);
          __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
          if (unlikely(__pyx_t_3 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[2]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

          /* "original_topk_sim_join.pyx":587
 *                                                    l_tok_idx, r_tok_idx)
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":588
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
            if (__pyx_t_1) {

              /* "original_topk_sim_join.pyx":589
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 */
              __pyx_v_topk_heap.pop();

              /* "original_topk_sim_join.pyx":590
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

              /* "original_topk_sim_join.pyx":588
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:
 *                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                             topk_heap.pop()
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
            }

            /* "original_topk_sim_join.pyx":587
 *                                                    l_tok_idx, r_tok_idx)
 *                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                         if topk_heap.top().sim < sim:
 *                             topk_heap.pop()
 */
            goto __pyx_L72;
          }

          /* "original_topk_sim_join.pyx":592
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                     else:
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                     total_compared_pairs += 1
 */
          /*else*/ {
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
          }
          __pyx_L72:;

          /* "original_topk_sim_join.pyx":594
 *                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
          __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

          /* "original_topk_sim_join.pyx":595
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          __pyx_t_1 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":596
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
            printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

            /* "original_topk_sim_join.pyx":595
 * 
 *                     total_compared_pairs += 1
 *                     if total_compared_pairs % 100000 == 0:             # <<<<<<<<<<<<<<
 *                         printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
          }

          /* "original_topk_sim_join.pyx":601
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
          __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_1) {

            /* "original_topk_sim_join.pyx":602
 * 
 *                     if compared_set.count(l_rec_idx):
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

            /* "original_topk_sim_join.pyx":601
 *                                prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 */
            goto __pyx_L75;
          }

          /* "original_topk_sim_join.pyx":604
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
          /*else*/ {
            try {
              __pyx_t_10 = std::unordered_set<int> ();
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[2]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

            /* "original_topk_sim_join.pyx":605
 *                     else:
 *                         compared_set[l_rec_idx] = uset[int]()
 *                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
            (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
          }
          __pyx_L75:;

          /* "original_topk_sim_join.pyx":536
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L44_continue:;
        }

        /* "original_topk_sim_join.pyx":534
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "original_topk_sim_join.pyx":607
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "original_topk_sim_join.pyx":608
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 * 
 */
        try {
          __pyx_t_11 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_11;

        /* "original_topk_sim_join.pyx":607
 *                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "original_topk_sim_join.pyx":609
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "original_topk_sim_join.pyx":611
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint3\n")
 * 
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "original_topk_sim_join.pyx":614
 *     # printf("checkpoint3\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":417
 * 
 * 
 * cdef void original_topk_sim_join_reuse_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.original_topk_sim_join_reuse_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "original_topk_sim_join.pyx":617
 * 
 * 
 * cdef int original_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0
 */

static int __pyx_f_10debugblock_19debugblocker_cython_original_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list, int const __pyx_v_l_tok_idx, int const __pyx_v_r_tok_idx) {
  int __pyx_v_overlap;
  uint32_t __pyx_v_i;
  std::unordered_set<int>  __pyx_v_rset;
  int __pyx_r;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "original_topk_sim_join.pyx":619
 * cdef int original_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,
 *                                const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef uint i
 * 
 */
  __pyx_v_overlap = 0;

  /* "original_topk_sim_join.pyx":623
 * 
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size() - r_tok_idx):             # <<<<<<<<<<<<<<
 *         rset.insert(rtoken_list[i + r_tok_idx])
 * 
 */
  __pyx_t_1 = (__pyx_v_rtoken_list.size() - __pyx_v_r_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "original_topk_sim_join.pyx":624
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size() - r_tok_idx):
 *         rset.insert(rtoken_list[i + r_tok_idx])             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 */
    __pyx_v_rset.insert((__pyx_v_rtoken_list[(__pyx_v_i + __pyx_v_r_tok_idx)]));
  }

  /* "original_topk_sim_join.pyx":626
 *         rset.insert(rtoken_list[i + r_tok_idx])
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):             # <<<<<<<<<<<<<<
 *         if rset.count(ltoken_list[i + l_tok_idx]):
 *             overlap += 1
 */
  __pyx_t_1 = (__pyx_v_ltoken_list.size() - __pyx_v_l_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "original_topk_sim_join.pyx":627
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    __pyx_t_3 = (__pyx_v_rset.count((__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])) != 0);
    if (__pyx_t_3) {

      /* "original_topk_sim_join.pyx":628
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):
 *             overlap += 1             # <<<<<<<<<<<<<<
 * 
 *     return overlap
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "original_topk_sim_join.pyx":627
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    }
  }

  /* "original_topk_sim_join.pyx":630
 *             overlap += 1
 * 
 *     return overlap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":617
 * 
 * 
 * cdef int original_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "original_topk_sim_join.pyx":638
 * ####################################################################################################
 * ####################################################################################################
 * cdef void original_generate_prefix_events(const vector[vector[int]]& ltable,             # <<<<<<<<<<<<<<
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 */

static void __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events(std::vector<std::vector<int> >  const &__pyx_v_ltable, std::vector<std::vector<int> >  const &__pyx_v_rtable, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events) {

  /* "original_topk_sim_join.pyx":641
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 *     original_generate_prefix_events_impl(ltable, 0, prefix_events)             # <<<<<<<<<<<<<<
 *     original_generate_prefix_events_impl(rtable, 1, prefix_events)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events_impl(__pyx_v_ltable, 0, __pyx_v_prefix_events);

  /* "original_topk_sim_join.pyx":642
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 *     original_generate_prefix_events_impl(ltable, 0, prefix_events)
 *     original_generate_prefix_events_impl(rtable, 1, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     return
 */
  __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events_impl(__pyx_v_rtable, 1, __pyx_v_prefix_events);

  /* "original_topk_sim_join.pyx":644
 *     original_generate_prefix_events_impl(rtable, 1, prefix_events)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":638
 * ####################################################################################################
 * ####################################################################################################
 * cdef void original_generate_prefix_events(const vector[vector[int]]& ltable,             # <<<<<<<<<<<<<<
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 */

  /* function exit code */
  __pyx_L0:;
}

/* "original_topk_sim_join.pyx":647
 * 
 * 
 * cdef void original_generate_prefix_events_impl(const vector[vector[int]]& table,             # <<<<<<<<<<<<<<
 *                                       const int table_indicator,
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 */

static void __pyx_f_10debugblock_19debugblocker_cython_original_generate_prefix_events_impl(std::vector<std::vector<int> >  const &__pyx_v_table, int const __pyx_v_table_indicator, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events) {
  uint32_t __pyx_v_i;
  uint32_t __pyx_v_length;
  int __pyx_v_j;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;
  uint32_t __pyx_t_4;
  int __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "original_topk_sim_join.pyx":653
 *     cdef int j
 * 
 *     for i in xrange(table.size()):             # <<<<<<<<<<<<<<
 *         length = table[i].size()
 *         if length > 0:
 */
  __pyx_t_1 = __pyx_v_table.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "original_topk_sim_join.pyx":654
 * 
 *     for i in xrange(table.size()):
 *         length = table[i].size()             # <<<<<<<<<<<<<<
 *         if length > 0:
 *             for j in xrange(length):
 */
    __pyx_v_length = (__pyx_v_table[__pyx_v_i]).size();

    /* "original_topk_sim_join.pyx":655
 *     for i in xrange(table.size()):
 *         length = table[i].size()
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             for j in xrange(length):
 *                 prefix_events.push(PrefixEvent(1.0 - j * 1.0 / length, table_indicator, i, j))
 */
    __pyx_t_3 = ((__pyx_v_length > 0) != 0);
    if (__pyx_t_3) {

      /* "original_topk_sim_join.pyx":656
 *         length = table[i].size()
 *         if length > 0:
 *             for j in xrange(length):             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(1.0 - j * 1.0 / length, table_indicator, i, j))
 * 
 */
      __pyx_t_4 = __pyx_v_length;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "original_topk_sim_join.pyx":657
 *         if length > 0:
 *             for j in xrange(length):
 *                 prefix_events.push(PrefixEvent(1.0 - j * 1.0 / length, table_indicator, i, j))             # <<<<<<<<<<<<<<
 * 
 *     return
 */
        __pyx_t_6 = (__pyx_v_j * 1.0);
        if (unlikely(__pyx_v_length == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_prefix_events.push(PrefixEvent((1.0 - (__pyx_t_6 / __pyx_v_length)), __pyx_v_table_indicator, __pyx_v_i, __pyx_v_j));
      }

      /* "original_topk_sim_join.pyx":655
 *     for i in xrange(table.size()):
 *         length = table[i].size()
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             for j in xrange(length):
 *                 prefix_events.push(PrefixEvent(1.0 - j * 1.0 / length, table_indicator, i, j))
 */
    }
  }

  /* "original_topk_sim_join.pyx":659
 *                 prefix_events.push(PrefixEvent(1.0 - j * 1.0 / length, table_indicator, i, j))
 * 
 *     return             # <<<<<<<<<<<<<<
 */
  goto __pyx_L0;

  /* "original_topk_sim_join.pyx":647
 * 
 * 
 * cdef void original_generate_prefix_events_impl(const vector[vector[int]]& table,             # <<<<<<<<<<<<<<
 *                                       const int table_indicator,
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.original_generate_prefix_events_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "debugblock/debugblocker_cython.pyx":45
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         ltable_field_token_sum, rtable_field_token_sum, py_cand_set,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10debugblock_19debugblocker_cython_1debugblocker_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10debugblock_19debugblocker_cython_1debugblocker_cython = {"debugblocker_cython", (PyCFunction)__pyx_pw_10debugblock_19debugblocker_cython_1debugblocker_cython, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10debugblock_19debugblocker_cython_1debugblocker_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lrecord_token_list = 0;
  PyObject *__pyx_v_rrecord_token_list = 0;
  PyObject *__pyx_v_lrecord_index_list = 0;
  PyObject *__pyx_v_rrecord_index_list = 0;
  PyObject *__pyx_v_ltable_field_token_sum = 0;
  PyObject *__pyx_v_rtable_field_token_sum = 0;
  PyObject *__pyx_v_py_cand_set = 0;
  PyObject *__pyx_v_py_num_fields = 0;
  PyObject *__pyx_v_py_output_size = 0;
  PyObject *__pyx_v_py_output_path = 0;
  PyObject *__pyx_v_py_use_plain = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("debugblocker_cython (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lrecord_token_list,&__pyx_n_s_rrecord_token_list,&__pyx_n_s_lrecord_index_list,&__pyx_n_s_rrecord_index_list,&__pyx_n_s_ltable_field_token_sum,&__pyx_n_s_rtable_field_token_sum,&__pyx_n_s_py_cand_set,&__pyx_n_s_py_num_fields,&__pyx_n_s_py_output_size,&__pyx_n_s_py_output_path,&__pyx_n_s_py_use_plain,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lrecord_token_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rrecord_token_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lrecord_index_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rrecord_index_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 3); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ltable_field_token_sum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 4); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rtable_field_token_sum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 5); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_cand_set)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 6); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_num_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 7); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_output_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 8); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_output_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 9); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_py_use_plain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, 10); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "debugblocker_cython") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_lrecord_token_list = values[0];
    __pyx_v_rrecord_token_list = values[1];
    __pyx_v_lrecord_index_list = values[2];
    __pyx_v_rrecord_index_list = values[3];
    __pyx_v_ltable_field_token_sum = values[4];
    __pyx_v_rtable_field_token_sum = values[5];
    __pyx_v_py_cand_set = values[6];
    __pyx_v_py_num_fields = values[7];
    __pyx_v_py_output_size = values[8];
    __pyx_v_py_output_path = values[9];
    __pyx_v_py_use_plain = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("debugblocker_cython", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("debugblock.debugblocker_cython.debugblocker_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10debugblock_19debugblocker_cython_debugblocker_cython(__pyx_self, __pyx_v_lrecord_token_list, __pyx_v_rrecord_token_list, __pyx_v_lrecord_index_list, __pyx_v_rrecord_index_list, __pyx_v_ltable_field_token_sum, __pyx_v_rtable_field_token_sum, __pyx_v_py_cand_set, __pyx_v_py_num_fields, __pyx_v_py_output_size, __pyx_v_py_output_path, __pyx_v_py_use_plain);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10debugblock_19debugblocker_cython_debugblocker_cython(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lrecord_token_list, PyObject *__pyx_v_rrecord_token_list, PyObject *__pyx_v_lrecord_index_list, PyObject *__pyx_v_rrecord_index_list, PyObject *__pyx_v_ltable_field_token_sum, PyObject *__pyx_v_rtable_field_token_sum, PyObject *__pyx_v_py_cand_set, PyObject *__pyx_v_py_num_fields, PyObject *__pyx_v_py_output_size, PyObject *__pyx_v_py_output_path, PyObject *__pyx_v_py_use_plain) {
  std::string __pyx_v_output_path;
  bool __pyx_v_use_plain;
  std::vector<std::vector<int> >  __pyx_v_ltoken_vector;
  std::vector<std::vector<int> >  __pyx_v_rtoken_vector;
  std::vector<std::vector<int> >  __pyx_v_lindex_vector;
  std::vector<std::vector<int> >  __pyx_v_rindex_vector;
  std::vector<int>  __pyx_v_ltoken_sum;
  std::vector<int>  __pyx_v_rtoken_sum;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_cand_set;
  std::vector<int>  __pyx_v_field_list;
  PyObject *__pyx_v_i = NULL;
  uint32_t __pyx_v_output_size;
  uint32_t __pyx_v_prefix_match_max_size;
  uint32_t __pyx_v_prefix_multiply_factor;
  uint32_t __pyx_v_offset_of_field_num;
  uint32_t __pyx_v_minimal_num_fields;
  double __pyx_v_field_remove_ratio;
  std::vector<std::vector<TopPair> >  __pyx_v_topk_lists;
  std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  __pyx_v_reuse_set;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  uint32_t __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("debugblocker_cython", 0);
  __Pyx_INCREF(__pyx_v_lrecord_token_list);
  __Pyx_INCREF(__pyx_v_rrecord_token_list);
  __Pyx_INCREF(__pyx_v_lrecord_index_list);
  __Pyx_INCREF(__pyx_v_rrecord_index_list);
  __Pyx_INCREF(__pyx_v_py_cand_set);

  /* "debugblock/debugblocker_cython.pyx":49
 *                         ltable_field_token_sum, rtable_field_token_sum, py_cand_set,
 *                         py_num_fields, py_output_size, py_output_path, py_use_plain):
 *     cdef string output_path = py_output_path             # <<<<<<<<<<<<<<
 *     cdef bool use_plain = py_use_plain
 * 
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_py_output_path); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_output_path = __pyx_t_1;

  /* "debugblock/debugblocker_cython.pyx":50
 *                         py_num_fields, py_output_size, py_output_path, py_use_plain):
 *     cdef string output_path = py_output_path
 *     cdef bool use_plain = py_use_plain             # <<<<<<<<<<<<<<
 * 
 *     ### Convert py objs to c++ objs
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_py_use_plain); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_use_plain = __pyx_t_2;

  /* "debugblock/debugblocker_cython.pyx":54
 *     ### Convert py objs to c++ objs
 *     cdef vector[vector[int]] ltoken_vector, rtoken_vector
 *     convert_table_to_vector(lrecord_token_list, ltoken_vector)             # <<<<<<<<<<<<<<
 *     convert_table_to_vector(rrecord_token_list, rtoken_vector)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_lrecord_token_list, __pyx_v_ltoken_vector);

  /* "debugblock/debugblocker_cython.pyx":55
 *     cdef vector[vector[int]] ltoken_vector, rtoken_vector
 *     convert_table_to_vector(lrecord_token_list, ltoken_vector)
 *     convert_table_to_vector(rrecord_token_list, rtoken_vector)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[vector[int]] lindex_vector, rindex_vector
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_rrecord_token_list, __pyx_v_rtoken_vector);

  /* "debugblock/debugblocker_cython.pyx":58
 * 
 *     cdef vector[vector[int]] lindex_vector, rindex_vector
 *     convert_table_to_vector(lrecord_index_list, lindex_vector)             # <<<<<<<<<<<<<<
 *     convert_table_to_vector(rrecord_index_list, rindex_vector)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_lrecord_index_list, __pyx_v_lindex_vector);

  /* "debugblock/debugblocker_cython.pyx":59
 *     cdef vector[vector[int]] lindex_vector, rindex_vector
 *     convert_table_to_vector(lrecord_index_list, lindex_vector)
 *     convert_table_to_vector(rrecord_index_list, rindex_vector)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] ltoken_sum, rtoken_sum
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(__pyx_v_rrecord_index_list, __pyx_v_rindex_vector);

  /* "debugblock/debugblocker_cython.pyx":62
 * 
 *     cdef vector[int] ltoken_sum, rtoken_sum
 *     convert_py_list_to_vector(ltable_field_token_sum, ltoken_sum)             # <<<<<<<<<<<<<<
 *     convert_py_list_to_vector(rtable_field_token_sum, rtoken_sum)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(__pyx_v_ltable_field_token_sum, __pyx_v_ltoken_sum);

  /* "debugblock/debugblocker_cython.pyx":63
 *     cdef vector[int] ltoken_sum, rtoken_sum
 *     convert_py_list_to_vector(ltable_field_token_sum, ltoken_sum)
 *     convert_py_list_to_vector(rtable_field_token_sum, rtoken_sum)             # <<<<<<<<<<<<<<
 * 
 *     cdef cmap[int, cset[int]] cand_set
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(__pyx_v_rtable_field_token_sum, __pyx_v_rtoken_sum);

  /* "debugblock/debugblocker_cython.pyx":66
 * 
 *     cdef cmap[int, cset[int]] cand_set
 *     convert_candidate_set_to_c_map(py_cand_set, cand_set)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] field_list
 */
  __pyx_f_10debugblock_19debugblocker_cython_convert_candidate_set_to_c_map(__pyx_v_py_cand_set, __pyx_v_cand_set);

  /* "debugblock/debugblocker_cython.pyx":69
 * 
 *     cdef vector[int] field_list
 *     for i in range(py_num_fields):             # <<<<<<<<<<<<<<
 *         field_list.push_back(i)
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_py_num_fields);
  __Pyx_GIVEREF(__pyx_v_py_num_fields);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_py_num_fields);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":70
 *     cdef vector[int] field_list
 *     for i in range(py_num_fields):
 *         field_list.push_back(i)             # <<<<<<<<<<<<<<
 * 
 *     cdef uint output_size = py_output_size
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {
      __pyx_v_field_list.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":69
 * 
 *     cdef vector[int] field_list
 *     for i in range(py_num_fields):             # <<<<<<<<<<<<<<
 *         field_list.push_back(i)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":72
 *         field_list.push_back(i)
 * 
 *     cdef uint output_size = py_output_size             # <<<<<<<<<<<<<<
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE
 *     cdef uint prefix_multiply_factor = PREFIX_MULTIPLY_FACTOR
 */
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_v_py_output_size); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_output_size = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":73
 * 
 *     cdef uint output_size = py_output_size
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE             # <<<<<<<<<<<<<<
 *     cdef uint prefix_multiply_factor = PREFIX_MULTIPLY_FACTOR
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PREFIX_MATCH_MAX_SIZE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_prefix_match_max_size = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":74
 *     cdef uint output_size = py_output_size
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE
 *     cdef uint prefix_multiply_factor = PREFIX_MULTIPLY_FACTOR             # <<<<<<<<<<<<<<
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PREFIX_MULTIPLY_FACTOR); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_prefix_multiply_factor = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":75
 *     cdef uint prefix_match_max_size = PREFIX_MATCH_MAX_SIZE
 *     cdef uint prefix_multiply_factor = PREFIX_MULTIPLY_FACTOR
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM             # <<<<<<<<<<<<<<
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_OFFSET_OF_FIELD_NUM); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_offset_of_field_num = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":76
 *     cdef uint prefix_multiply_factor = PREFIX_MULTIPLY_FACTOR
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS             # <<<<<<<<<<<<<<
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MINIMAL_NUM_FIELDS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_minimal_num_fields = __pyx_t_8;

  /* "debugblock/debugblocker_cython.pyx":77
 *     cdef uint offset_of_field_num = OFFSET_OF_FIELD_NUM
 *     cdef uint minimal_num_fields = MINIMAL_NUM_FIELDS
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO             # <<<<<<<<<<<<<<
 * 
 *     del lrecord_token_list, rrecord_token_list
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FIELD_REMOVE_RATIO); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_field_remove_ratio = __pyx_t_9;

  /* "debugblock/debugblocker_cython.pyx":79
 *     cdef double field_remove_ratio = FIELD_REMOVE_RATIO
 * 
 *     del lrecord_token_list, rrecord_token_list             # <<<<<<<<<<<<<<
 *     del lrecord_index_list, rrecord_index_list
 *     del py_cand_set
 */
  __Pyx_DECREF(__pyx_v_lrecord_token_list);
  __pyx_v_lrecord_token_list = NULL;
  __Pyx_DECREF(__pyx_v_rrecord_token_list);
  __pyx_v_rrecord_token_list = NULL;

  /* "debugblock/debugblocker_cython.pyx":80
 * 
 *     del lrecord_token_list, rrecord_token_list
 *     del lrecord_index_list, rrecord_index_list             # <<<<<<<<<<<<<<
 *     del py_cand_set
 * 
 */
  __Pyx_DECREF(__pyx_v_lrecord_index_list);
  __pyx_v_lrecord_index_list = NULL;
  __Pyx_DECREF(__pyx_v_rrecord_index_list);
  __pyx_v_rrecord_index_list = NULL;

  /* "debugblock/debugblocker_cython.pyx":81
 *     del lrecord_token_list, rrecord_token_list
 *     del lrecord_index_list, rrecord_index_list
 *     del py_cand_set             # <<<<<<<<<<<<<<
 * 
 *     ### Generate recommendation topk lists
 */
  __Pyx_DECREF(__pyx_v_py_cand_set);
  __pyx_v_py_cand_set = NULL;

  /* "debugblock/debugblocker_cython.pyx":87
 *     cdef cmap[int, cmap[int, ReuseInfo]] reuse_set
 * 
 *     generate_recom_lists(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                          ltoken_sum, rtoken_sum, field_list, topk_lists,
 *                          cand_set, reuse_set, prefix_match_max_size,
 */
  __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_ltoken_sum, __pyx_v_rtoken_sum, __pyx_v_field_list, __pyx_v_topk_lists, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_match_max_size, __pyx_v_prefix_multiply_factor, __pyx_v_offset_of_field_num, __pyx_v_minimal_num_fields, __pyx_v_field_remove_ratio, __pyx_v_output_size, __pyx_v_output_path, __pyx_v_use_plain);

  /* "debugblock/debugblocker_cython.pyx":45
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         ltable_field_token_sum, rtable_field_token_sum, py_cand_set,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("debugblock.debugblocker_cython.debugblocker_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_lrecord_token_list);
  __Pyx_XDECREF(__pyx_v_rrecord_token_list);
  __Pyx_XDECREF(__pyx_v_lrecord_index_list);
  __Pyx_XDECREF(__pyx_v_rrecord_index_list);
  __Pyx_XDECREF(__pyx_v_py_cand_set);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "debugblock/debugblocker_cython.pyx":94
 * 
 * 
 * cdef void generate_recom_lists(vector[vector[int]]& ltoken_vector, vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                vector[vector[int]]& lindex_vector, vector[vector[int]]& rindex_vector,
 *                                const vector[int]& ltoken_sum_vector, const vector[int]& rtoken_sum_vector,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(std::vector<std::vector<int> >  &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  &__pyx_v_lindex_vector, std::vector<std::vector<int> >  &__pyx_v_rindex_vector, std::vector<int>  const &__pyx_v_ltoken_sum_vector, std::vector<int>  const &__pyx_v_rtoken_sum_vector, std::vector<int>  &__pyx_v_field_list, std::vector<std::vector<TopPair> >  &__pyx_v_topk_lists, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  __pyx_v_reuse_set, uint32_t const __pyx_v_prefix_match_max_size, uint32_t const __pyx_v_prefix_multiply_factor, uint32_t const __pyx_v_offset_of_field_num, uint32_t const __pyx_v_minimal_num_fields, double const __pyx_v_field_remove_ratio, uint32_t const __pyx_v_output_size, std::string const __pyx_v_output_path, bool const __pyx_v_use_plain) {
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_end = NULL;
  uint32_t __pyx_v_i;
  int __pyx_v_p;
  double __pyx_v_max_ratio;
  uint32_t __pyx_v_ltoken_total_sum;
  uint32_t __pyx_v_rtoken_total_sum;
  int __pyx_v_removed_field_index;
  CYTHON_UNUSED bool __pyx_v_has_long_field;
  double __pyx_v_lrec_ave_len;
  double __pyx_v_rrec_ave_len;
  double __pyx_v_ratio;
  std::vector<std::vector<std::vector<int> > >  __pyx_v_ltoken_vector_parallel;
  std::vector<std::vector<std::vector<int> > >  __pyx_v_rtoken_vector_parallel;
  std::vector<std::vector<int> >  __pyx_v_field_list_parallel;
  std::vector<int>  __pyx_v_field_parallel;
  std::vector<int>  __pyx_v_temp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  uint32_t __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  std::vector<int>  __pyx_t_11;
  std::vector<std::vector<int> >  __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_recom_lists", 0);

  /* "debugblock/debugblocker_cython.pyx":103
 *                                const double field_remove_ratio, const uint output_size,
 *                                const string output_path, const bool use_plain):
 *     if field_list.size() <= minimal_num_fields:             # <<<<<<<<<<<<<<
 *         print 'too few lists:', field_list
 *         return
 */
  __pyx_t_1 = ((__pyx_v_field_list.size() <= __pyx_v_minimal_num_fields) != 0);
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":104
 *                                const string output_path, const bool use_plain):
 *     if field_list.size() <= minimal_num_fields:
 *         print 'too few lists:', field_list             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_field_list); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_s_too_few_lists);
    __Pyx_GIVEREF(__pyx_kp_s_too_few_lists);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_too_few_lists);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "debugblock/debugblocker_cython.pyx":105
 *     if field_list.size() <= minimal_num_fields:
 *         print 'too few lists:', field_list
 *         return             # <<<<<<<<<<<<<<
 * 
 *     start = time.time()
 */
    goto __pyx_L0;

    /* "debugblock/debugblocker_cython.pyx":103
 *                                const double field_remove_ratio, const uint output_size,
 *                                const string output_path, const bool use_plain):
 *     if field_list.size() <= minimal_num_fields:             # <<<<<<<<<<<<<<
 *         print 'too few lists:', field_list
 *         return
 */
  }

  /* "debugblock/debugblocker_cython.pyx":107
 *         return
 * 
 *     start = time.time()             # <<<<<<<<<<<<<<
 *     generate_recom_list_for_config(ltoken_vector, rtoken_vector,
 *                                    lindex_vector, rindex_vector,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_start = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":108
 * 
 *     start = time.time()
 *     generate_recom_list_for_config(ltoken_vector, rtoken_vector,             # <<<<<<<<<<<<<<
 *                                    lindex_vector, rindex_vector,
 *                                    ltoken_sum_vector, rtoken_sum_vector,
 */
  __pyx_f_10debugblock_19debugblocker_cython_generate_recom_list_for_config(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, __pyx_v_field_list, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_match_max_size, __pyx_v_prefix_multiply_factor, __pyx_v_offset_of_field_num, __pyx_v_output_size, __pyx_v_use_plain, 0, __pyx_v_output_path);

  /* "debugblock/debugblocker_cython.pyx":114
 *                                    prefix_match_max_size, prefix_multiply_factor,
 *                                    offset_of_field_num, output_size, use_plain, 0, output_path)
 *     end = time.time()             # <<<<<<<<<<<<<<
 *     print 'join time:', end - start
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_end = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":115
 *                                    offset_of_field_num, output_size, use_plain, 0, output_path)
 *     end = time.time()
 *     print 'join time:', end - start             # <<<<<<<<<<<<<<
 * 
 *     cdef uint i
 */
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_end, __pyx_v_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_join_time);
  __Pyx_GIVEREF(__pyx_kp_s_join_time);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_join_time);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "debugblock/debugblocker_cython.pyx":119
 *     cdef uint i
 *     cdef int p
 *     cdef double max_ratio = 0.0             # <<<<<<<<<<<<<<
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0
 *     cdef int removed_field_index = -1
 */
  __pyx_v_max_ratio = 0.0;

  /* "debugblock/debugblocker_cython.pyx":120
 *     cdef int p
 *     cdef double max_ratio = 0.0
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0             # <<<<<<<<<<<<<<
 *     cdef int removed_field_index = -1
 *     cdef bool has_long_field = False
 */
  __pyx_v_ltoken_total_sum = 0;
  __pyx_v_rtoken_total_sum = 0;

  /* "debugblock/debugblocker_cython.pyx":121
 *     cdef double max_ratio = 0.0
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0
 *     cdef int removed_field_index = -1             # <<<<<<<<<<<<<<
 *     cdef bool has_long_field = False
 * 
 */
  __pyx_v_removed_field_index = -1;

  /* "debugblock/debugblocker_cython.pyx":122
 *     cdef uint ltoken_total_sum = 0, rtoken_total_sum = 0
 *     cdef int removed_field_index = -1
 *     cdef bool has_long_field = False             # <<<<<<<<<<<<<<
 * 
 *     for i in range(field_list.size()):
 */
  __pyx_v_has_long_field = 0;

  /* "debugblock/debugblocker_cython.pyx":124
 *     cdef bool has_long_field = False
 * 
 *     for i in range(field_list.size()):             # <<<<<<<<<<<<<<
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 */
  __pyx_t_5 = __pyx_v_field_list.size();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "debugblock/debugblocker_cython.pyx":125
 * 
 *     for i in range(field_list.size()):
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]             # <<<<<<<<<<<<<<
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 * 
 */
    __pyx_v_ltoken_total_sum = (__pyx_v_ltoken_total_sum + (__pyx_v_ltoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]));

    /* "debugblock/debugblocker_cython.pyx":126
 *     for i in range(field_list.size()):
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]             # <<<<<<<<<<<<<<
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 */
    __pyx_v_rtoken_total_sum = (__pyx_v_rtoken_total_sum + (__pyx_v_rtoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]));
  }

  /* "debugblock/debugblocker_cython.pyx":128
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()             # <<<<<<<<<<<<<<
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\
 */
  __pyx_t_7 = (__pyx_v_ltoken_total_sum * 1.0);
  __pyx_t_5 = __pyx_v_ltoken_vector.size();
  if (unlikely(__pyx_t_5 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_lrec_ave_len = (__pyx_t_7 / __pyx_t_5);

  /* "debugblock/debugblocker_cython.pyx":129
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()             # <<<<<<<<<<<<<<
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)
 */
  __pyx_t_7 = (__pyx_v_rtoken_total_sum * 1.0);
  __pyx_t_5 = __pyx_v_rtoken_vector.size();
  if (unlikely(__pyx_t_5 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rrec_ave_len = (__pyx_t_7 / __pyx_t_5);

  /* "debugblock/debugblocker_cython.pyx":130
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\             # <<<<<<<<<<<<<<
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)
 * 
 */
  __pyx_t_7 = ((__pyx_v_field_list.size() - 1) * __pyx_v_field_remove_ratio);
  __pyx_t_8 = (1.0 + __pyx_v_field_remove_ratio);
  if (unlikely(__pyx_t_8 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "debugblock/debugblocker_cython.pyx":131
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(field_list.size()):
 */
  __pyx_t_9 = ((__pyx_t_7 / __pyx_t_8) * __pyx_f_10debugblock_19debugblocker_cython_double_max(__pyx_v_lrec_ave_len, __pyx_v_rrec_ave_len));
  __pyx_t_8 = (__pyx_v_lrec_ave_len + __pyx_v_rrec_ave_len);
  if (unlikely(__pyx_t_8 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "debugblock/debugblocker_cython.pyx":130
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double ratio = 1 - (field_list.size() - 1) * field_remove_ratio / (1.0 + field_remove_ratio) *\             # <<<<<<<<<<<<<<
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)
 * 
 */
  __pyx_v_ratio = (1.0 - (__pyx_t_9 / __pyx_t_8));

  /* "debugblock/debugblocker_cython.pyx":133
 *                  double_max(lrec_ave_len, rrec_ave_len) / (lrec_ave_len + rrec_ave_len)
 * 
 *     for i in range(field_list.size()):             # <<<<<<<<<<<<<<
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 */
  __pyx_t_5 = __pyx_v_field_list.size();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "debugblock/debugblocker_cython.pyx":134
 * 
 *     for i in range(field_list.size()):
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,             # <<<<<<<<<<<<<<
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 */
    __pyx_t_8 = ((__pyx_v_ltoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) * 1.0);
    if (unlikely(__pyx_v_ltoken_total_sum == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":135
 *     for i in range(field_list.size()):
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))             # <<<<<<<<<<<<<<
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 */
    __pyx_t_9 = ((__pyx_v_rtoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) * 1.0);
    if (unlikely(__pyx_v_rtoken_total_sum == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":134
 * 
 *     for i in range(field_list.size()):
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,             # <<<<<<<<<<<<<<
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 */
    __pyx_v_max_ratio = __pyx_f_10debugblock_19debugblocker_cython_double_max(__pyx_v_max_ratio, __pyx_f_10debugblock_19debugblocker_cython_double_max((__pyx_t_8 / __pyx_v_ltoken_total_sum), (__pyx_t_9 / __pyx_v_rtoken_total_sum)));

    /* "debugblock/debugblocker_cython.pyx":136
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\             # <<<<<<<<<<<<<<
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 */
    __pyx_t_10 = (((__pyx_v_ltoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) > (__pyx_v_ltoken_total_sum * __pyx_v_ratio)) != 0);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_1 = __pyx_t_10;
      goto __pyx_L9_bool_binop_done;
    }

    /* "debugblock/debugblocker_cython.pyx":137
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:             # <<<<<<<<<<<<<<
 *             removed_field_index = i
 *             has_long_field = True
 */
    __pyx_t_10 = (((__pyx_v_rtoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]) > (__pyx_v_rtoken_total_sum * __pyx_v_ratio)) != 0);
    __pyx_t_1 = __pyx_t_10;
    __pyx_L9_bool_binop_done:;

    /* "debugblock/debugblocker_cython.pyx":136
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\             # <<<<<<<<<<<<<<
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 */
    if (__pyx_t_1) {

      /* "debugblock/debugblocker_cython.pyx":138
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i             # <<<<<<<<<<<<<<
 *             has_long_field = True
 *             break
 */
      __pyx_v_removed_field_index = __pyx_v_i;

      /* "debugblock/debugblocker_cython.pyx":139
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 *             has_long_field = True             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_has_long_field = 1;

      /* "debugblock/debugblocker_cython.pyx":140
 *             removed_field_index = i
 *             has_long_field = True
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if removed_field_index < 0:
 */
      goto __pyx_L7_break;

      /* "debugblock/debugblocker_cython.pyx":136
 *         max_ratio = double_max(max_ratio, double_max(ltoken_sum_vector[field_list[i]] * 1.0 / ltoken_total_sum,
 *                                                      rtoken_sum_vector[field_list[i]] * 1.0 / rtoken_total_sum))
 *         if ltoken_sum_vector[field_list[i]] > ltoken_total_sum * ratio or\             # <<<<<<<<<<<<<<
 *                 rtoken_sum_vector[field_list[i]] > rtoken_total_sum * ratio:
 *             removed_field_index = i
 */
    }
  }
  __pyx_L7_break:;

  /* "debugblock/debugblocker_cython.pyx":142
 *             break
 * 
 *     if removed_field_index < 0:             # <<<<<<<<<<<<<<
 *         removed_field_index = field_list.size() - 1
 *     print 'required remove-field ratio:', ratio
 */
  __pyx_t_1 = ((__pyx_v_removed_field_index < 0) != 0);
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":143
 * 
 *     if removed_field_index < 0:
 *         removed_field_index = field_list.size() - 1             # <<<<<<<<<<<<<<
 *     print 'required remove-field ratio:', ratio
 *     print 'actual max ratio:', max_ratio
 */
    __pyx_v_removed_field_index = (__pyx_v_field_list.size() - 1);

    /* "debugblock/debugblocker_cython.pyx":142
 *             break
 * 
 *     if removed_field_index < 0:             # <<<<<<<<<<<<<<
 *         removed_field_index = field_list.size() - 1
 *     print 'required remove-field ratio:', ratio
 */
  }

  /* "debugblock/debugblocker_cython.pyx":144
 *     if removed_field_index < 0:
 *         removed_field_index = field_list.size() - 1
 *     print 'required remove-field ratio:', ratio             # <<<<<<<<<<<<<<
 *     print 'actual max ratio:', max_ratio
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_ratio); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_required_remove_field_ratio);
  __Pyx_GIVEREF(__pyx_kp_s_required_remove_field_ratio);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_required_remove_field_ratio);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":145
 *         removed_field_index = field_list.size() - 1
 *     print 'required remove-field ratio:', ratio
 *     print 'actual max ratio:', max_ratio             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[vector[TopPair]] temp_lists
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_max_ratio); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_actual_max_ratio);
  __Pyx_GIVEREF(__pyx_kp_s_actual_max_ratio);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_actual_max_ratio);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "debugblock/debugblocker_cython.pyx":155
 *     if True:
 *     # if not has_long_field:
 *         for i in range(field_list.size()):             # <<<<<<<<<<<<<<
 *             if i != removed_field_index:
 *                 temp = vector[int](field_list)
 */
  __pyx_t_5 = __pyx_v_field_list.size();
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "debugblock/debugblocker_cython.pyx":156
 *     # if not has_long_field:
 *         for i in range(field_list.size()):
 *             if i != removed_field_index:             # <<<<<<<<<<<<<<
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 */
    __pyx_t_1 = ((__pyx_v_i != __pyx_v_removed_field_index) != 0);
    if (__pyx_t_1) {

      /* "debugblock/debugblocker_cython.pyx":157
 *         for i in range(field_list.size()):
 *             if i != removed_field_index:
 *                 temp = vector[int](field_list)             # <<<<<<<<<<<<<<
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:
 */
      try {
        __pyx_t_11 = std::vector<int> (__pyx_v_field_list);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_temp = __pyx_t_11;

      /* "debugblock/debugblocker_cython.pyx":158
 *             if i != removed_field_index:
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)             # <<<<<<<<<<<<<<
 *                 if temp.size() > minimal_num_fields:
 *                     field_list_parallel.push_back(temp)
 */
      __pyx_v_temp.erase((__pyx_v_temp.begin() + __pyx_v_i));

      /* "debugblock/debugblocker_cython.pyx":159
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:             # <<<<<<<<<<<<<<
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])
 */
      __pyx_t_1 = ((__pyx_v_temp.size() > __pyx_v_minimal_num_fields) != 0);
      if (__pyx_t_1) {

        /* "debugblock/debugblocker_cython.pyx":160
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:
 *                     field_list_parallel.push_back(temp)             # <<<<<<<<<<<<<<
 *                     field_parallel.push_back(field_list[i])
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())
 */
        try {
          __pyx_v_field_list_parallel.push_back(__pyx_v_temp);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":161
 *                 if temp.size() > minimal_num_fields:
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])             # <<<<<<<<<<<<<<
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())
 *                     copy_table_and_remove_field(ltoken_vector, lindex_vector,
 */
        try {
          __pyx_v_field_parallel.push_back((__pyx_v_field_list[__pyx_v_i]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":162
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())             # <<<<<<<<<<<<<<
 *                     copy_table_and_remove_field(ltoken_vector, lindex_vector,
 *                                                 ltoken_vector_parallel[ltoken_vector_parallel.size() - 1],
 */
        try {
          __pyx_t_12 = std::vector<std::vector<int> > ();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        try {
          __pyx_v_ltoken_vector_parallel.push_back(__pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":163
 *                     field_parallel.push_back(field_list[i])
 *                     ltoken_vector_parallel.push_back(vector[vector[int]]())
 *                     copy_table_and_remove_field(ltoken_vector, lindex_vector,             # <<<<<<<<<<<<<<
 *                                                 ltoken_vector_parallel[ltoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 */
        __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(__pyx_v_ltoken_vector, __pyx_v_lindex_vector, (__pyx_v_ltoken_vector_parallel[(__pyx_v_ltoken_vector_parallel.size() - 1)]), (__pyx_v_field_list[__pyx_v_i]));

        /* "debugblock/debugblocker_cython.pyx":166
 *                                                 ltoken_vector_parallel[ltoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 *                     rtoken_vector_parallel.push_back(vector[vector[int]]())             # <<<<<<<<<<<<<<
 *                     copy_table_and_remove_field(rtoken_vector, rindex_vector,
 *                                                 rtoken_vector_parallel[rtoken_vector_parallel.size() - 1],
 */
        try {
          __pyx_t_12 = std::vector<std::vector<int> > ();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        try {
          __pyx_v_rtoken_vector_parallel.push_back(__pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":167
 *                                                 field_list[i])
 *                     rtoken_vector_parallel.push_back(vector[vector[int]]())
 *                     copy_table_and_remove_field(rtoken_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                                 rtoken_vector_parallel[rtoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 */
        __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(__pyx_v_rtoken_vector, __pyx_v_rindex_vector, (__pyx_v_rtoken_vector_parallel[(__pyx_v_rtoken_vector_parallel.size() - 1)]), (__pyx_v_field_list[__pyx_v_i]));

        /* "debugblock/debugblocker_cython.pyx":159
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 *                 if temp.size() > minimal_num_fields:             # <<<<<<<<<<<<<<
 *                     field_list_parallel.push_back(temp)
 *                     field_parallel.push_back(field_list[i])
 */
      }

      /* "debugblock/debugblocker_cython.pyx":156
 *     # if not has_long_field:
 *         for i in range(field_list.size()):
 *             if i != removed_field_index:             # <<<<<<<<<<<<<<
 *                 temp = vector[int](field_list)
 *                 temp.erase(temp.begin() + i)
 */
    }
  }

  /* "debugblock/debugblocker_cython.pyx":170
 *                                                 rtoken_vector_parallel[rtoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 *         with nogil, parallel(num_threads=field_parallel.size()):             # <<<<<<<<<<<<<<
 *             for p in prange(field_parallel.size()):
 *                 generate_recom_list_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {
        {
            __pyx_t_5 = __pyx_v_field_parallel.size();
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_13, __pyx_t_15, __pyx_t_14) num_threads(__pyx_t_5)
            #endif /* _OPENMP */
            {

                /* "debugblock/debugblocker_cython.pyx":171
 *                                                 field_list[i])
 *         with nogil, parallel(num_threads=field_parallel.size()):
 *             for p in prange(field_parallel.size()):             # <<<<<<<<<<<<<<
 *                 generate_recom_list_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],
 *                                                lindex_vector, rindex_vector,
 */
                __pyx_t_13 = __pyx_v_field_parallel.size();
                if (1 == 0) abort();
                {
                    __pyx_t_15 = (__pyx_t_13 - 0) / 1;
                    if (__pyx_t_15 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p)
                        #endif /* _OPENMP */
                        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_15; __pyx_t_14++){
                            {
                                __pyx_v_p = 0 + 1 * __pyx_t_14;

                                /* "debugblock/debugblocker_cython.pyx":172
 *         with nogil, parallel(num_threads=field_parallel.size()):
 *             for p in prange(field_parallel.size()):
 *                 generate_recom_list_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],             # <<<<<<<<<<<<<<
 *                                                lindex_vector, rindex_vector,
 *                                                ltoken_sum_vector, rtoken_sum_vector,
 */
                                __pyx_f_10debugblock_19debugblocker_cython_generate_recom_list_for_config((__pyx_v_ltoken_vector_parallel[__pyx_v_p]), (__pyx_v_rtoken_vector_parallel[__pyx_v_p]), __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, (__pyx_v_field_list_parallel[__pyx_v_p]), __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_match_max_size, __pyx_v_prefix_multiply_factor, __pyx_v_offset_of_field_num, __pyx_v_output_size, __pyx_v_use_plain, 1, __pyx_v_output_path);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "debugblock/debugblocker_cython.pyx":170
 *                                                 rtoken_vector_parallel[rtoken_vector_parallel.size() - 1],
 *                                                 field_list[i])
 *         with nogil, parallel(num_threads=field_parallel.size()):             # <<<<<<<<<<<<<<
 *             for p in prange(field_parallel.size()):
 *                 generate_recom_list_for_config(ltoken_vector_parallel[p], rtoken_vector_parallel[p],
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L18;
        }
        __pyx_L18:;
      }
  }

  /* "debugblock/debugblocker_cython.pyx":179
 *                                                offset_of_field_num, output_size, use_plain, 1, output_path)
 * 
 *     print 'remove', field_list[removed_field_index]             # <<<<<<<<<<<<<<
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])
 */
  __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_field_list[__pyx_v_removed_field_index])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_remove);
  __Pyx_GIVEREF(__pyx_n_s_remove);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_remove);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  if (__Pyx_Print(0, __pyx_t_3, 1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "debugblock/debugblocker_cython.pyx":180
 * 
 *     print 'remove', field_list[removed_field_index]
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])             # <<<<<<<<<<<<<<
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])
 *     field_list.erase(field_list.begin() + removed_field_index)
 */
  __pyx_f_10debugblock_19debugblocker_cython_remove_field(__pyx_v_ltoken_vector, __pyx_v_lindex_vector, (__pyx_v_field_list[__pyx_v_removed_field_index]));

  /* "debugblock/debugblocker_cython.pyx":181
 *     print 'remove', field_list[removed_field_index]
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])             # <<<<<<<<<<<<<<
 *     field_list.erase(field_list.begin() + removed_field_index)
 * 
 */
  __pyx_f_10debugblock_19debugblocker_cython_remove_field(__pyx_v_rtoken_vector, __pyx_v_rindex_vector, (__pyx_v_field_list[__pyx_v_removed_field_index]));

  /* "debugblock/debugblocker_cython.pyx":182
 *     remove_field(ltoken_vector, lindex_vector, field_list[removed_field_index])
 *     remove_field(rtoken_vector, rindex_vector, field_list[removed_field_index])
 *     field_list.erase(field_list.begin() + removed_field_index)             # <<<<<<<<<<<<<<
 * 
 *     generate_recom_lists(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 */
  __pyx_v_field_list.erase((__pyx_v_field_list.begin() + __pyx_v_removed_field_index));

  /* "debugblock/debugblocker_cython.pyx":184
 *     field_list.erase(field_list.begin() + removed_field_index)
 * 
 *     generate_recom_lists(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                          ltoken_sum_vector, rtoken_sum_vector, field_list, topk_lists, cand_set, reuse_set,
 *                          prefix_match_max_size, prefix_multiply_factor, offset_of_field_num,
 */
  __pyx_f_10debugblock_19debugblocker_cython_generate_recom_lists(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_ltoken_sum_vector, __pyx_v_rtoken_sum_vector, __pyx_v_field_list, __pyx_v_topk_lists, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_match_max_size, __pyx_v_prefix_multiply_factor, __pyx_v_offset_of_field_num, __pyx_v_minimal_num_fields, __pyx_v_field_remove_ratio, __pyx_v_output_size, __pyx_v_output_path, __pyx_v_use_plain);

  /* "debugblock/debugblocker_cython.pyx":189
 *                          minimal_num_fields, field_remove_ratio, output_size, output_path, use_plain)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":94
 * 
 * 
 * cdef void generate_recom_lists(vector[vector[int]]& ltoken_vector, vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                vector[vector[int]]& lindex_vector, vector[vector[int]]& rindex_vector,
 *                                const vector[int]& ltoken_sum_vector, const vector[int]& rtoken_sum_vector,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.generate_recom_lists", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":192
 * 
 * 
 * cdef void generate_recom_list_for_config(const vector[vector[int]]& ltoken_vector, const vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                          const vector[vector[int]]& lindex_vector, const vector[vector[int]]& rindex_vector,
 *                                          const vector[int]& ltoken_sum_vector, const vector[int]& rtoken_sum_vector,
 */

static void __pyx_f_10debugblock_19debugblocker_cython_generate_recom_list_for_config(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  const &__pyx_v_lindex_vector, std::vector<std::vector<int> >  const &__pyx_v_rindex_vector, std::vector<int>  const &__pyx_v_ltoken_sum_vector, std::vector<int>  const &__pyx_v_rtoken_sum_vector, std::vector<int>  const &__pyx_v_field_list, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, uint32_t const __pyx_v_prefix_match_max_size, uint32_t const __pyx_v_prefix_multiply_factor, uint32_t const __pyx_v_offset_of_field_num, uint32_t const __pyx_v_output_size, bool const __pyx_v_use_plain, uint32_t const __pyx_v_type, std::string const &__pyx_v_output_path) {
  uint32_t __pyx_v_i;
  char __pyx_v_buf[10];
  std::string __pyx_v_info;
  int __pyx_v_ltoken_total_sum;
  int __pyx_v_rtoken_total_sum;
  double __pyx_v_lrec_ave_len;
  double __pyx_v_rrec_ave_len;
  double __pyx_v_len_threshold;
  std::unordered_set<int>  __pyx_v_remained_fields;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::string __pyx_t_1;
  size_t __pyx_t_2;
  uint32_t __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "debugblock/debugblocker_cython.pyx":204
 * 
 * 
 *     cdef string info = string(<char *>'current configuration: [')             # <<<<<<<<<<<<<<
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])
 */
  try {
    __pyx_t_1 = std::string(((char *)__pyx_k_current_configuration));
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_info = __pyx_t_1;

  /* "debugblock/debugblocker_cython.pyx":205
 * 
 *     cdef string info = string(<char *>'current configuration: [')
 *     for i in xrange(field_list.size()):             # <<<<<<<<<<<<<<
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:
 */
  __pyx_t_2 = __pyx_v_field_list.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "debugblock/debugblocker_cython.pyx":206
 *     cdef string info = string(<char *>'current configuration: [')
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])             # <<<<<<<<<<<<<<
 *         if i != 0:
 *             info.append(<char *>', ')
 */
    sprintf(__pyx_v_buf, __pyx_k_d, (__pyx_v_field_list[__pyx_v_i]));

    /* "debugblock/debugblocker_cython.pyx":207
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             info.append(<char *>', ')
 *         info.append(buf)
 */
    __pyx_t_4 = ((__pyx_v_i != 0) != 0);
    if (__pyx_t_4) {

      /* "debugblock/debugblocker_cython.pyx":208
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:
 *             info.append(<char *>', ')             # <<<<<<<<<<<<<<
 *         info.append(buf)
 *     info += <char *>"]  "
 */
      __pyx_v_info.append(((char *)__pyx_k_));

      /* "debugblock/debugblocker_cython.pyx":207
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             info.append(<char *>', ')
 *         info.append(buf)
 */
    }

    /* "debugblock/debugblocker_cython.pyx":209
 *         if i != 0:
 *             info.append(<char *>', ')
 *         info.append(buf)             # <<<<<<<<<<<<<<
 *     info += <char *>"]  "
 *     # printf("current configuration: [")
 */
    __pyx_v_info.append(__pyx_v_buf);
  }

  /* "debugblock/debugblocker_cython.pyx":210
 *             info.append(<char *>', ')
 *         info.append(buf)
 *     info += <char *>"]  "             # <<<<<<<<<<<<<<
 *     # printf("current configuration: [")
 *     # for i in xrange(field_list.size()):
 */
  __pyx_v_info += ((char *)__pyx_k__2);

  /* "debugblock/debugblocker_cython.pyx":219
 *     # printf("]\n")
 * 
 *     cdef int ltoken_total_sum = 0, rtoken_total_sum = 0             # <<<<<<<<<<<<<<
 *     for i in xrange(field_list.size()):
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]
 */
  __pyx_v_ltoken_total_sum = 0;
  __pyx_v_rtoken_total_sum = 0;

  /* "debugblock/debugblocker_cython.pyx":220
 * 
 *     cdef int ltoken_total_sum = 0, rtoken_total_sum = 0
 *     for i in xrange(field_list.size()):             # <<<<<<<<<<<<<<
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 */
  __pyx_t_2 = __pyx_v_field_list.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "debugblock/debugblocker_cython.pyx":221
 *     cdef int ltoken_total_sum = 0, rtoken_total_sum = 0
 *     for i in xrange(field_list.size()):
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]             # <<<<<<<<<<<<<<
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 * 
 */
    __pyx_v_ltoken_total_sum = (__pyx_v_ltoken_total_sum + (__pyx_v_ltoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]));

    /* "debugblock/debugblocker_cython.pyx":222
 *     for i in xrange(field_list.size()):
 *         ltoken_total_sum += ltoken_sum_vector[field_list[i]]
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]             # <<<<<<<<<<<<<<
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 */
    __pyx_v_rtoken_total_sum = (__pyx_v_rtoken_total_sum + (__pyx_v_rtoken_sum_vector[(__pyx_v_field_list[__pyx_v_i])]));
  }

  /* "debugblock/debugblocker_cython.pyx":224
 *         rtoken_total_sum += rtoken_sum_vector[field_list[i]]
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()             # <<<<<<<<<<<<<<
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double len_threshold = prefix_match_max_size * 1.0 * prefix_multiply_factor
 */
  __pyx_t_5 = (__pyx_v_ltoken_total_sum * 1.0);
  __pyx_t_2 = __pyx_v_ltoken_vector.size();
  if (unlikely(__pyx_t_2 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_lrec_ave_len = (__pyx_t_5 / __pyx_t_2);

  /* "debugblock/debugblocker_cython.pyx":225
 * 
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()             # <<<<<<<<<<<<<<
 *     cdef double len_threshold = prefix_match_max_size * 1.0 * prefix_multiply_factor
 * 
 */
  __pyx_t_5 = (__pyx_v_rtoken_total_sum * 1.0);
  __pyx_t_2 = __pyx_v_rtoken_vector.size();
  if (unlikely(__pyx_t_2 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rrec_ave_len = (__pyx_t_5 / __pyx_t_2);

  /* "debugblock/debugblocker_cython.pyx":226
 *     cdef double lrec_ave_len = ltoken_total_sum * 1.0 / ltoken_vector.size()
 *     cdef double rrec_ave_len = rtoken_total_sum * 1.0 / rtoken_vector.size()
 *     cdef double len_threshold = prefix_match_max_size * 1.0 * prefix_multiply_factor             # <<<<<<<<<<<<<<
 * 
 *     cdef cset[int] remained_fields
 */
  __pyx_v_len_threshold = ((__pyx_v_prefix_match_max_size * 1.0) * __pyx_v_prefix_multiply_factor);

  /* "debugblock/debugblocker_cython.pyx":229
 * 
 *     cdef cset[int] remained_fields
 *     for i in xrange(field_list.size()):             # <<<<<<<<<<<<<<
 *         remained_fields.insert(field_list[i])
 * 
 */
  __pyx_t_2 = __pyx_v_field_list.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "debugblock/debugblocker_cython.pyx":230
 *     cdef cset[int] remained_fields
 *     for i in xrange(field_list.size()):
 *         remained_fields.insert(field_list[i])             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
    __pyx_v_remained_fields.insert((__pyx_v_field_list[__pyx_v_i]));
  }

  /* "debugblock/debugblocker_cython.pyx":234
 *     cdef heap[TopPair] topk_heap
 * 
 *     if use_plain:             # <<<<<<<<<<<<<<
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:
 *             topk_heap = new_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set,
 */
  __pyx_t_4 = (__pyx_v_use_plain != 0);
  if (__pyx_t_4) {

    /* "debugblock/debugblocker_cython.pyx":235
 * 
 *     if use_plain:
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:             # <<<<<<<<<<<<<<
 *             topk_heap = new_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set,
 *                                                 prefix_match_max_size, output_size)
 */
    __pyx_t_6 = ((__pyx_v_lrec_ave_len >= __pyx_v_len_threshold) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_rrec_ave_len >= __pyx_v_len_threshold) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_4) {

      /* "debugblock/debugblocker_cython.pyx":236
 *     if use_plain:
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:
 *             topk_heap = new_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set,             # <<<<<<<<<<<<<<
 *                                                 prefix_match_max_size, output_size)
 *         else:
 */
      __pyx_v_topk_heap = __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_plain(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_cand_set, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

      /* "debugblock/debugblocker_cython.pyx":235
 * 
 *     if use_plain:
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:             # <<<<<<<<<<<<<<
 *             topk_heap = new_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set,
 *                                                 prefix_match_max_size, output_size)
 */
      goto __pyx_L11;
    }

    /* "debugblock/debugblocker_cython.pyx":239
 *                                                 prefix_match_max_size, output_size)
 *         else:
 *             topk_heap = original_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set, output_size)             # <<<<<<<<<<<<<<
 *     else:
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:
 */
    /*else*/ {
      __pyx_v_topk_heap = __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_plain(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_cand_set, __pyx_v_output_size);
    }
    __pyx_L11:;

    /* "debugblock/debugblocker_cython.pyx":234
 *     cdef heap[TopPair] topk_heap
 * 
 *     if use_plain:             # <<<<<<<<<<<<<<
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:
 *             topk_heap = new_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set,
 */
    goto __pyx_L10;
  }

  /* "debugblock/debugblocker_cython.pyx":241
 *             topk_heap = original_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set, output_size)
 *     else:
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:             # <<<<<<<<<<<<<<
 *             info += <char *>'new topk'
 *             printf("%s\n", info.c_str())
 */
  /*else*/ {
    __pyx_t_6 = ((__pyx_v_lrec_ave_len >= __pyx_v_len_threshold) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_rrec_ave_len >= __pyx_v_len_threshold) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_4) {

      /* "debugblock/debugblocker_cython.pyx":242
 *     else:
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:
 *             info += <char *>'new topk'             # <<<<<<<<<<<<<<
 *             printf("%s\n", info.c_str())
 *             if type == 0:
 */
      __pyx_v_info += ((char *)__pyx_k_new_topk);

      /* "debugblock/debugblocker_cython.pyx":243
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:
 *             info += <char *>'new topk'
 *             printf("%s\n", info.c_str())             # <<<<<<<<<<<<<<
 *             if type == 0:
 *                 topk_heap = new_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 */
      printf(__pyx_k_s, __pyx_v_info.c_str());

      /* "debugblock/debugblocker_cython.pyx":244
 *             info += <char *>'new topk'
 *             printf("%s\n", info.c_str())
 *             if type == 0:             # <<<<<<<<<<<<<<
 *                 topk_heap = new_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 */
      switch (__pyx_v_type) {
        case 0:

        /* "debugblock/debugblocker_cython.pyx":245
 *             printf("%s\n", info.c_str())
 *             if type == 0:
 *                 topk_heap = new_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 *             elif type == 1:
 */
        __pyx_v_topk_heap = __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_record(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_offset_of_field_num, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

        /* "debugblock/debugblocker_cython.pyx":244
 *             info += <char *>'new topk'
 *             printf("%s\n", info.c_str())
 *             if type == 0:             # <<<<<<<<<<<<<<
 *                 topk_heap = new_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 */
        break;

        /* "debugblock/debugblocker_cython.pyx":247
 *                 topk_heap = new_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 *             elif type == 1:             # <<<<<<<<<<<<<<
 *                 topk_heap = new_topk_sim_join_reuse(ltoken_vector, rtoken_vector, remained_fields,
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 */
        case 1:

        /* "debugblock/debugblocker_cython.pyx":248
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 *             elif type == 1:
 *                 topk_heap = new_topk_sim_join_reuse(ltoken_vector, rtoken_vector, remained_fields,             # <<<<<<<<<<<<<<
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 *         else:
 */
        __pyx_v_topk_heap = __pyx_f_10debugblock_19debugblocker_cython_new_topk_sim_join_reuse(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_remained_fields, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_offset_of_field_num, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

        /* "debugblock/debugblocker_cython.pyx":247
 *                 topk_heap = new_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 *             elif type == 1:             # <<<<<<<<<<<<<<
 *                 topk_heap = new_topk_sim_join_reuse(ltoken_vector, rtoken_vector, remained_fields,
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 */
        break;
        default: break;
      }

      /* "debugblock/debugblocker_cython.pyx":241
 *             topk_heap = original_topk_sim_join_plain(ltoken_vector, rtoken_vector, cand_set, output_size)
 *     else:
 *         if lrec_ave_len >= len_threshold and rrec_ave_len >= len_threshold:             # <<<<<<<<<<<<<<
 *             info += <char *>'new topk'
 *             printf("%s\n", info.c_str())
 */
      goto __pyx_L14;
    }

    /* "debugblock/debugblocker_cython.pyx":251
 *                                          cand_set, reuse_set, offset_of_field_num, prefix_match_max_size, output_size)
 *         else:
 *             info += <char *>'original topk'             # <<<<<<<<<<<<<<
 *             printf("%s\n", info.c_str())
 *             if type == 0:
 */
    /*else*/ {
      __pyx_v_info += ((char *)__pyx_k_original_topk);

      /* "debugblock/debugblocker_cython.pyx":252
 *         else:
 *             info += <char *>'original topk'
 *             printf("%s\n", info.c_str())             # <<<<<<<<<<<<<<
 *             if type == 0:
 *                 topk_heap = original_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 */
      printf(__pyx_k_s, __pyx_v_info.c_str());

      /* "debugblock/debugblocker_cython.pyx":253
 *             info += <char *>'original topk'
 *             printf("%s\n", info.c_str())
 *             if type == 0:             # <<<<<<<<<<<<<<
 *                 topk_heap = original_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                               cand_set, reuse_set, offset_of_field_num, output_size)
 */
      switch (__pyx_v_type) {
        case 0:

        /* "debugblock/debugblocker_cython.pyx":254
 *             printf("%s\n", info.c_str())
 *             if type == 0:
 *                 topk_heap = original_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                               cand_set, reuse_set, offset_of_field_num, output_size)
 *             elif type == 1:
 */
        __pyx_v_topk_heap = __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_record(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_offset_of_field_num, __pyx_v_output_size);

        /* "debugblock/debugblocker_cython.pyx":253
 *             info += <char *>'original topk'
 *             printf("%s\n", info.c_str())
 *             if type == 0:             # <<<<<<<<<<<<<<
 *                 topk_heap = original_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                               cand_set, reuse_set, offset_of_field_num, output_size)
 */
        break;

        /* "debugblock/debugblocker_cython.pyx":256
 *                 topk_heap = original_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                               cand_set, reuse_set, offset_of_field_num, output_size)
 *             elif type == 1:             # <<<<<<<<<<<<<<
 *                 topk_heap = original_topk_sim_join_reuse(ltoken_vector, rtoken_vector, remained_fields,
 *                                              cand_set, reuse_set, offset_of_field_num, output_size)
 */
        case 1:

        /* "debugblock/debugblocker_cython.pyx":257
 *                                               cand_set, reuse_set, offset_of_field_num, output_size)
 *             elif type == 1:
 *                 topk_heap = original_topk_sim_join_reuse(ltoken_vector, rtoken_vector, remained_fields,             # <<<<<<<<<<<<<<
 *                                              cand_set, reuse_set, offset_of_field_num, output_size)
 * 
 */
        __pyx_v_topk_heap = __pyx_f_10debugblock_19debugblocker_cython_original_topk_sim_join_reuse(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_remained_fields, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_offset_of_field_num, __pyx_v_output_size);

        /* "debugblock/debugblocker_cython.pyx":256
 *                 topk_heap = original_topk_sim_join_record(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,
 *                                               cand_set, reuse_set, offset_of_field_num, output_size)
 *             elif type == 1:             # <<<<<<<<<<<<<<
 *                 topk_heap = original_topk_sim_join_reuse(ltoken_vector, rtoken_vector, remained_fields,
 *                                              cand_set, reuse_set, offset_of_field_num, output_size)
 */
        break;
        default: break;
      }
    }
    __pyx_L14:;
  }
  __pyx_L10:;

  /* "debugblock/debugblocker_cython.pyx":260
 *                                              cand_set, reuse_set, offset_of_field_num, output_size)
 * 
 *     save_topk_list_to_file(field_list, output_path, topk_heap)             # <<<<<<<<<<<<<<
 * 
 *     return
 */
  __pyx_f_10debugblock_19debugblocker_cython_save_topk_list_to_file(__pyx_v_field_list, __pyx_v_output_path, __pyx_v_topk_heap);

  /* "debugblock/debugblocker_cython.pyx":262
 *     save_topk_list_to_file(field_list, output_path, topk_heap)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":192
 * 
 * 
 * cdef void generate_recom_list_for_config(const vector[vector[int]]& ltoken_vector, const vector[vector[int]]& rtoken_vector,             # <<<<<<<<<<<<<<
 *                                          const vector[vector[int]]& lindex_vector, const vector[vector[int]]& rindex_vector,
 *                                          const vector[int]& ltoken_sum_vector, const vector[int]& rtoken_sum_vector,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.generate_recom_list_for_config", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "debugblock/debugblocker_cython.pyx":265
 * 
 * 
 * cdef void save_topk_list_to_file(const vector[int]& field_list, const string& output_path,             # <<<<<<<<<<<<<<
 *                                  heap[TopPair] topk_heap) nogil:
 *     cdef string path = output_path + <char *>'topk_'
 */

static void __pyx_f_10debugblock_19debugblocker_cython_save_topk_list_to_file(std::vector<int>  const &__pyx_v_field_list, std::string const &__pyx_v_output_path, std::priority_queue<TopPair>  __pyx_v_topk_heap) {
  std::string __pyx_v_path;
  char __pyx_v_buf[10];
  int __pyx_v_i;
  TopPair __pyx_v_pair;
  FILE *__pyx_v_fp;
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "debugblock/debugblocker_cython.pyx":267
 * cdef void save_topk_list_to_file(const vector[int]& field_list, const string& output_path,
 *                                  heap[TopPair] topk_heap) nogil:
 *     cdef string path = output_path + <char *>'topk_'             # <<<<<<<<<<<<<<
 *     cdef char buf[10]
 *     cdef int i
 */
  __pyx_v_path = (__pyx_v_output_path + ((char *)__pyx_k_topk));

  /* "debugblock/debugblocker_cython.pyx":270
 *     cdef char buf[10]
 *     cdef int i
 *     for i in xrange(field_list.size()):             # <<<<<<<<<<<<<<
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:
 */
  __pyx_t_1 = __pyx_v_field_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":271
 *     cdef int i
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])             # <<<<<<<<<<<<<<
 *         if i != 0:
 *             path.append(<char *>'_')
 */
    sprintf(__pyx_v_buf, __pyx_k_d, (__pyx_v_field_list[__pyx_v_i]));

    /* "debugblock/debugblocker_cython.pyx":272
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             path.append(<char *>'_')
 *         path.append(buf)
 */
    __pyx_t_3 = ((__pyx_v_i != 0) != 0);
    if (__pyx_t_3) {

      /* "debugblock/debugblocker_cython.pyx":273
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:
 *             path.append(<char *>'_')             # <<<<<<<<<<<<<<
 *         path.append(buf)
 *     path += <char *>'.txt'
 */
      __pyx_v_path.append(((char *)__pyx_k__3));

      /* "debugblock/debugblocker_cython.pyx":272
 *     for i in xrange(field_list.size()):
 *         sprintf(buf, "%d", field_list[i])
 *         if i != 0:             # <<<<<<<<<<<<<<
 *             path.append(<char *>'_')
 *         path.append(buf)
 */
    }

    /* "debugblock/debugblocker_cython.pyx":274
 *         if i != 0:
 *             path.append(<char *>'_')
 *         path.append(buf)             # <<<<<<<<<<<<<<
 *     path += <char *>'.txt'
 *     printf("%s\n", path.c_str())
 */
    __pyx_v_path.append(__pyx_v_buf);
  }

  /* "debugblock/debugblocker_cython.pyx":275
 *             path.append(<char *>'_')
 *         path.append(buf)
 *     path += <char *>'.txt'             # <<<<<<<<<<<<<<
 *     printf("%s\n", path.c_str())
 * 
 */
  __pyx_v_path += ((char *)__pyx_k_txt);

  /* "debugblock/debugblocker_cython.pyx":276
 *         path.append(buf)
 *     path += <char *>'.txt'
 *     printf("%s\n", path.c_str())             # <<<<<<<<<<<<<<
 * 
 *     cdef TopPair pair
 */
  printf(__pyx_k_s, __pyx_v_path.c_str());

  /* "debugblock/debugblocker_cython.pyx":279
 * 
 *     cdef TopPair pair
 *     cdef FILE* fp = fopen(path.c_str(), "w+")             # <<<<<<<<<<<<<<
 *     while topk_heap.size() > 0:
 *         pair = topk_heap.top()
 */
  __pyx_v_fp = fopen(__pyx_v_path.c_str(), __pyx_k_w);

  /* "debugblock/debugblocker_cython.pyx":280
 *     cdef TopPair pair
 *     cdef FILE* fp = fopen(path.c_str(), "w+")
 *     while topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *         pair = topk_heap.top()
 *         topk_heap.pop()
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_topk_heap.size() > 0) != 0);
    if (!__pyx_t_3) break;

    /* "debugblock/debugblocker_cython.pyx":281
 *     cdef FILE* fp = fopen(path.c_str(), "w+")
 *     while topk_heap.size() > 0:
 *         pair = topk_heap.top()             # <<<<<<<<<<<<<<
 *         topk_heap.pop()
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)
 */
    __pyx_v_pair = __pyx_v_topk_heap.top();

    /* "debugblock/debugblocker_cython.pyx":282
 *     while topk_heap.size() > 0:
 *         pair = topk_heap.top()
 *         topk_heap.pop()             # <<<<<<<<<<<<<<
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)
 *     fclose(fp)
 */
    __pyx_v_topk_heap.pop();

    /* "debugblock/debugblocker_cython.pyx":283
 *         pair = topk_heap.top()
 *         topk_heap.pop()
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)             # <<<<<<<<<<<<<<
 *     fclose(fp)
 * 
 */
    fprintf(__pyx_v_fp, __pyx_k_16f_d_d, __pyx_v_pair.sim, __pyx_v_pair.l_rec, __pyx_v_pair.r_rec);
  }

  /* "debugblock/debugblocker_cython.pyx":284
 *         topk_heap.pop()
 *         fprintf(fp, "%.16f %d %d\n", pair.sim, pair.l_rec, pair.r_rec)
 *     fclose(fp)             # <<<<<<<<<<<<<<
 * 
 *     return
 */
  fclose(__pyx_v_fp);

  /* "debugblock/debugblocker_cython.pyx":286
 *     fclose(fp)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":265
 * 
 * 
 * cdef void save_topk_list_to_file(const vector[int]& field_list, const string& output_path,             # <<<<<<<<<<<<<<
 *                                  heap[TopPair] topk_heap) nogil:
 *     cdef string path = output_path + <char *>'topk_'
 */

  /* function exit code */
  __pyx_L0:;
}

/* "debugblock/debugblocker_cython.pyx":289
 * 
 * 
 * cdef void copy_table_and_remove_field(const vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                                       const vector[vector[int]]& index_vector,
 *                                       vector[vector[int]]& new_table_vector, int rm_field):
 */

static void __pyx_f_10debugblock_19debugblocker_cython_copy_table_and_remove_field(std::vector<std::vector<int> >  const &__pyx_v_table_vector, std::vector<std::vector<int> >  const &__pyx_v_index_vector, std::vector<std::vector<int> >  &__pyx_v_new_table_vector, int __pyx_v_rm_field) {
  uint32_t __pyx_v_i;
  uint32_t __pyx_v_j;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  std::vector<int>  __pyx_t_3;
  size_t __pyx_t_4;
  uint32_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_table_and_remove_field", 0);

  /* "debugblock/debugblocker_cython.pyx":293
 *                                       vector[vector[int]]& new_table_vector, int rm_field):
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):             # <<<<<<<<<<<<<<
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):
 */
  __pyx_t_1 = __pyx_v_table_vector.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":294
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):
 *         new_table_vector.push_back(vector[int]())             # <<<<<<<<<<<<<<
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:
 */
    try {
      __pyx_t_3 = std::vector<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_new_table_vector.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":295
 *     for i in xrange(table_vector.size()):
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):             # <<<<<<<<<<<<<<
 *             if index_vector[i][j] != rm_field:
 *                 new_table_vector[i].push_back(table_vector[i][j])
 */
    __pyx_t_4 = (__pyx_v_table_vector[__pyx_v_i]).size();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "debugblock/debugblocker_cython.pyx":296
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:             # <<<<<<<<<<<<<<
 *                 new_table_vector[i].push_back(table_vector[i][j])
 * 
 */
      __pyx_t_6 = ((((__pyx_v_index_vector[__pyx_v_i])[__pyx_v_j]) != __pyx_v_rm_field) != 0);
      if (__pyx_t_6) {

        /* "debugblock/debugblocker_cython.pyx":297
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:
 *                 new_table_vector[i].push_back(table_vector[i][j])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        try {
          (__pyx_v_new_table_vector[__pyx_v_i]).push_back(((__pyx_v_table_vector[__pyx_v_i])[__pyx_v_j]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "debugblock/debugblocker_cython.pyx":296
 *         new_table_vector.push_back(vector[int]())
 *         for j in xrange(table_vector[i].size()):
 *             if index_vector[i][j] != rm_field:             # <<<<<<<<<<<<<<
 *                 new_table_vector[i].push_back(table_vector[i][j])
 * 
 */
      }
    }
  }

  /* "debugblock/debugblocker_cython.pyx":289
 * 
 * 
 * cdef void copy_table_and_remove_field(const vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                                       const vector[vector[int]]& index_vector,
 *                                       vector[vector[int]]& new_table_vector, int rm_field):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.copy_table_and_remove_field", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":300
 * 
 * 
 * cdef void remove_field(vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                        vector[vector[int]]& index_vector, int rm_field):
 *     cdef uint i, j
 */

static void __pyx_f_10debugblock_19debugblocker_cython_remove_field(std::vector<std::vector<int> >  &__pyx_v_table_vector, std::vector<std::vector<int> >  &__pyx_v_index_vector, int __pyx_v_rm_field) {
  uint32_t __pyx_v_i;
  uint32_t __pyx_v_j;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  uint32_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("remove_field", 0);

  /* "debugblock/debugblocker_cython.pyx":303
 *                        vector[vector[int]]& index_vector, int rm_field):
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):             # <<<<<<<<<<<<<<
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:
 */
  __pyx_t_1 = __pyx_v_table_vector.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":304
 *     cdef uint i, j
 *     for i in xrange(table_vector.size()):
 *         for j in reversed(range(table_vector[i].size())):             # <<<<<<<<<<<<<<
 *             if index_vector[i][j] == rm_field:
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 */
    for (__pyx_t_3 = (__pyx_v_table_vector[__pyx_v_i]).size()-1 + 1; __pyx_t_3 >= 0 + 1; ) { __pyx_t_3-=1;
      __pyx_v_j = __pyx_t_3;

      /* "debugblock/debugblocker_cython.pyx":305
 *     for i in xrange(table_vector.size()):
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:             # <<<<<<<<<<<<<<
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 *                 table_vector[i].erase(table_vector[i].begin() + j)
 */
      __pyx_t_4 = ((((__pyx_v_index_vector[__pyx_v_i])[__pyx_v_j]) == __pyx_v_rm_field) != 0);
      if (__pyx_t_4) {

        /* "debugblock/debugblocker_cython.pyx":306
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:
 *                 index_vector[i].erase(index_vector[i].begin() + j)             # <<<<<<<<<<<<<<
 *                 table_vector[i].erase(table_vector[i].begin() + j)
 * 
 */
        (__pyx_v_index_vector[__pyx_v_i]).erase(((__pyx_v_index_vector[__pyx_v_i]).begin() + __pyx_v_j));

        /* "debugblock/debugblocker_cython.pyx":307
 *             if index_vector[i][j] == rm_field:
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 *                 table_vector[i].erase(table_vector[i].begin() + j)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (__pyx_v_table_vector[__pyx_v_i]).erase(((__pyx_v_table_vector[__pyx_v_i]).begin() + __pyx_v_j));

        /* "debugblock/debugblocker_cython.pyx":305
 *     for i in xrange(table_vector.size()):
 *         for j in reversed(range(table_vector[i].size())):
 *             if index_vector[i][j] == rm_field:             # <<<<<<<<<<<<<<
 *                 index_vector[i].erase(index_vector[i].begin() + j)
 *                 table_vector[i].erase(table_vector[i].begin() + j)
 */
      }
    }
  }

  /* "debugblock/debugblocker_cython.pyx":300
 * 
 * 
 * cdef void remove_field(vector[vector[int]]& table_vector,             # <<<<<<<<<<<<<<
 *                        vector[vector[int]]& index_vector, int rm_field):
 *     cdef uint i, j
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":310
 * 
 * 
 * cdef void convert_table_to_vector(table_list, vector[vector[int]]& table_vector):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     for i in range(len(table_list)):
 */

static void __pyx_f_10debugblock_19debugblocker_cython_convert_table_to_vector(PyObject *__pyx_v_table_list, std::vector<std::vector<int> >  &__pyx_v_table_vector) {
  int __pyx_v_i;
  int __pyx_v_j;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  std::vector<int>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_table_to_vector", 0);

  /* "debugblock/debugblocker_cython.pyx":312
 * cdef void convert_table_to_vector(table_list, vector[vector[int]]& table_vector):
 *     cdef int i, j
 *     for i in range(len(table_list)):             # <<<<<<<<<<<<<<
 *         table_vector.push_back(vector[int]())
 *         for j in range(len(table_list[i])):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_table_list); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/debugblocker_cython.pyx":313
 *     cdef int i, j
 *     for i in range(len(table_list)):
 *         table_vector.push_back(vector[int]())             # <<<<<<<<<<<<<<
 *         for j in range(len(table_list[i])):
 *             table_vector[i].push_back(table_list[i][j])
 */
    try {
      __pyx_t_3 = std::vector<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_table_vector.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":314
 *     for i in range(len(table_list)):
 *         table_vector.push_back(vector[int]())
 *         for j in range(len(table_list[i])):             # <<<<<<<<<<<<<<
 *             table_vector[i].push_back(table_list[i][j])
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_table_list, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "debugblock/debugblocker_cython.pyx":315
 *         table_vector.push_back(vector[int]())
 *         for j in range(len(table_list[i])):
 *             table_vector[i].push_back(table_list[i][j])             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_table_list, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      try {
        (__pyx_v_table_vector[__pyx_v_i]).push_back(__pyx_t_8);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
  }

  /* "debugblock/debugblocker_cython.pyx":310
 * 
 * 
 * cdef void convert_table_to_vector(table_list, vector[vector[int]]& table_vector):             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     for i in range(len(table_list)):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.convert_table_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":318
 * 
 * 
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):             # <<<<<<<<<<<<<<
 *     cdef int key, value
 *     for key in cand_set:
 */

static void __pyx_f_10debugblock_19debugblocker_cython_convert_candidate_set_to_c_map(PyObject *__pyx_v_cand_set, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_new_set) {
  int __pyx_v_key;
  int __pyx_v_value;
  PyObject *__pyx_v_l = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  std::unordered_set<int>  __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_candidate_set_to_c_map", 0);

  /* "debugblock/debugblocker_cython.pyx":320
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):
 *     cdef int key, value
 *     for key in cand_set:             # <<<<<<<<<<<<<<
 *         if not new_set.count(key):
 *             new_set[key] = cset[int]()
 */
  if (likely(PyList_CheckExact(__pyx_v_cand_set)) || PyTuple_CheckExact(__pyx_v_cand_set)) {
    __pyx_t_1 = __pyx_v_cand_set; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_cand_set); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_key = __pyx_t_5;

    /* "debugblock/debugblocker_cython.pyx":321
 *     cdef int key, value
 *     for key in cand_set:
 *         if not new_set.count(key):             # <<<<<<<<<<<<<<
 *             new_set[key] = cset[int]()
 * 
 */
    __pyx_t_6 = ((!(__pyx_v_new_set.count(__pyx_v_key) != 0)) != 0);
    if (__pyx_t_6) {

      /* "debugblock/debugblocker_cython.pyx":322
 *     for key in cand_set:
 *         if not new_set.count(key):
 *             new_set[key] = cset[int]()             # <<<<<<<<<<<<<<
 * 
 *         l = cand_set[key]
 */
      try {
        __pyx_t_7 = std::unordered_set<int> ();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_new_set[__pyx_v_key]) = __pyx_t_7;

      /* "debugblock/debugblocker_cython.pyx":321
 *     cdef int key, value
 *     for key in cand_set:
 *         if not new_set.count(key):             # <<<<<<<<<<<<<<
 *             new_set[key] = cset[int]()
 * 
 */
    }

    /* "debugblock/debugblocker_cython.pyx":324
 *             new_set[key] = cset[int]()
 * 
 *         l = cand_set[key]             # <<<<<<<<<<<<<<
 *         for value in l:
 *             new_set[key].insert(value)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_cand_set, __pyx_v_key, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":325
 * 
 *         l = cand_set[key]
 *         for value in l:             # <<<<<<<<<<<<<<
 *             new_set[key].insert(value)
 * 
 */
    if (likely(PyList_CheckExact(__pyx_v_l)) || PyTuple_CheckExact(__pyx_v_l)) {
      __pyx_t_4 = __pyx_v_l; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_l); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_value = __pyx_t_5;

      /* "debugblock/debugblocker_cython.pyx":326
 *         l = cand_set[key]
 *         for value in l:
 *             new_set[key].insert(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      (__pyx_v_new_set[__pyx_v_key]).insert(__pyx_v_value);

      /* "debugblock/debugblocker_cython.pyx":325
 * 
 *         l = cand_set[key]
 *         for value in l:             # <<<<<<<<<<<<<<
 *             new_set[key].insert(value)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":320
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):
 *     cdef int key, value
 *     for key in cand_set:             # <<<<<<<<<<<<<<
 *         if not new_set.count(key):
 *             new_set[key] = cset[int]()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":318
 * 
 * 
 * cdef void convert_candidate_set_to_c_map(cand_set, cmap[int, cset[int]]& new_set):             # <<<<<<<<<<<<<<
 *     cdef int key, value
 *     for key in cand_set:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.convert_candidate_set_to_c_map", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_RefNannyFinishContext();
}

/* "debugblock/debugblocker_cython.pyx":329
 * 
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):             # <<<<<<<<<<<<<<
 *     for value in py_list:
 *         vector.push_back(value)
 */

static int __pyx_f_10debugblock_19debugblocker_cython_convert_py_list_to_vector(PyObject *__pyx_v_py_list, std::vector<int>  &__pyx_v_vector) {
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_py_list_to_vector", 0);

  /* "debugblock/debugblocker_cython.pyx":330
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):
 *     for value in py_list:             # <<<<<<<<<<<<<<
 *         vector.push_back(value)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_py_list)) || PyTuple_CheckExact(__pyx_v_py_list)) {
    __pyx_t_1 = __pyx_v_py_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_py_list); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "debugblock/debugblocker_cython.pyx":331
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):
 *     for value in py_list:
 *         vector.push_back(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {
      __pyx_v_vector.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "debugblock/debugblocker_cython.pyx":330
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):
 *     for value in py_list:             # <<<<<<<<<<<<<<
 *         vector.push_back(value)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":329
 * 
 * 
 * cdef int convert_py_list_to_vector(py_list, vector[int]& vector):             # <<<<<<<<<<<<<<
 *     for value in py_list:
 *         vector.push_back(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("debugblock.debugblocker_cython.convert_py_list_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "debugblock/debugblocker_cython.pyx":334
 * 
 * 
 * cdef double double_max(const double a, double b):             # <<<<<<<<<<<<<<
 *     if a > b:
 *         return a
 */

static double __pyx_f_10debugblock_19debugblocker_cython_double_max(double const __pyx_v_a, double __pyx_v_b) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("double_max", 0);

  /* "debugblock/debugblocker_cython.pyx":335
 * 
 * cdef double double_max(const double a, double b):
 *     if a > b:             # <<<<<<<<<<<<<<
 *         return a
 *     return b
 */
  __pyx_t_1 = ((__pyx_v_a > __pyx_v_b) != 0);
  if (__pyx_t_1) {

    /* "debugblock/debugblocker_cython.pyx":336
 * cdef double double_max(const double a, double b):
 *     if a > b:
 *         return a             # <<<<<<<<<<<<<<
 *     return b
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "debugblock/debugblocker_cython.pyx":335
 * 
 * cdef double double_max(const double a, double b):
 *     if a > b:             # <<<<<<<<<<<<<<
 *         return a
 *     return b
 */
  }

  /* "debugblock/debugblocker_cython.pyx":337
 *     if a > b:
 *         return a
 *     return b             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_b;
  goto __pyx_L0;

  /* "debugblock/debugblocker_cython.pyx":334
 * 
 * 
 * cdef double double_max(const double a, double b):             # <<<<<<<<<<<<<<
 *     if a > b:
 *         return a
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "debugblocker_cython",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_FIELD_REMOVE_RATIO, __pyx_k_FIELD_REMOVE_RATIO, sizeof(__pyx_k_FIELD_REMOVE_RATIO), 0, 0, 1, 1},
  {&__pyx_n_s_MINIMAL_NUM_FIELDS, __pyx_k_MINIMAL_NUM_FIELDS, sizeof(__pyx_k_MINIMAL_NUM_FIELDS), 0, 0, 1, 1},
  {&__pyx_n_s_OFFSET_OF_FIELD_NUM, __pyx_k_OFFSET_OF_FIELD_NUM, sizeof(__pyx_k_OFFSET_OF_FIELD_NUM), 0, 0, 1, 1},
  {&__pyx_n_s_PREFIX_MATCH_MAX_SIZE, __pyx_k_PREFIX_MATCH_MAX_SIZE, sizeof(__pyx_k_PREFIX_MATCH_MAX_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_PREFIX_MULTIPLY_FACTOR, __pyx_k_PREFIX_MULTIPLY_FACTOR, sizeof(__pyx_k_PREFIX_MULTIPLY_FACTOR), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_lihan_Documents_CharmPyWo, __pyx_k_Users_lihan_Documents_CharmPyWo, sizeof(__pyx_k_Users_lihan_Documents_CharmPyWo), 0, 0, 1, 0},
  {&__pyx_kp_s_actual_max_ratio, __pyx_k_actual_max_ratio, sizeof(__pyx_k_actual_max_ratio), 0, 0, 1, 0},
  {&__pyx_n_s_cand_set, __pyx_k_cand_set, sizeof(__pyx_k_cand_set), 0, 0, 1, 1},
  {&__pyx_n_s_debugblock_debugblocker_cython, __pyx_k_debugblock_debugblocker_cython, sizeof(__pyx_k_debugblock_debugblocker_cython), 0, 0, 1, 1},
  {&__pyx_n_s_debugblocker_cython, __pyx_k_debugblocker_cython, sizeof(__pyx_k_debugblocker_cython), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_field_list, __pyx_k_field_list, sizeof(__pyx_k_field_list), 0, 0, 1, 1},
  {&__pyx_n_s_field_remove_ratio, __pyx_k_field_remove_ratio, sizeof(__pyx_k_field_remove_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_s_join_time, __pyx_k_join_time, sizeof(__pyx_k_join_time), 0, 0, 1, 0},
  {&__pyx_n_s_lindex_vector, __pyx_k_lindex_vector, sizeof(__pyx_k_lindex_vector), 0, 0, 1, 1},
  {&__pyx_n_s_lrecord_index_list, __pyx_k_lrecord_index_list, sizeof(__pyx_k_lrecord_index_list), 0, 0, 1, 1},
  {&__pyx_n_s_lrecord_token_list, __pyx_k_lrecord_token_list, sizeof(__pyx_k_lrecord_token_list), 0, 0, 1, 1},
  {&__pyx_n_s_ltable_field_token_sum, __pyx_k_ltable_field_token_sum, sizeof(__pyx_k_ltable_field_token_sum), 0, 0, 1, 1},
  {&__pyx_n_s_ltoken_sum, __pyx_k_ltoken_sum, sizeof(__pyx_k_ltoken_sum), 0, 0, 1, 1},
  {&__pyx_n_s_ltoken_vector, __pyx_k_ltoken_vector, sizeof(__pyx_k_ltoken_vector), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_minimal_num_fields, __pyx_k_minimal_num_fields, sizeof(__pyx_k_minimal_num_fields), 0, 0, 1, 1},
  {&__pyx_n_s_offset_of_field_num, __pyx_k_offset_of_field_num, sizeof(__pyx_k_offset_of_field_num), 0, 0, 1, 1},
  {&__pyx_n_s_output_path, __pyx_k_output_path, sizeof(__pyx_k_output_path), 0, 0, 1, 1},
  {&__pyx_n_s_output_size, __pyx_k_output_size, sizeof(__pyx_k_output_size), 0, 0, 1, 1},
  {&__pyx_n_s_prefix_match_max_size, __pyx_k_prefix_match_max_size, sizeof(__pyx_k_prefix_match_max_size), 0, 0, 1, 1},
  {&__pyx_n_s_prefix_multiply_factor, __pyx_k_prefix_multiply_factor, sizeof(__pyx_k_prefix_multiply_factor), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_cand_set, __pyx_k_py_cand_set, sizeof(__pyx_k_py_cand_set), 0, 0, 1, 1},
  {&__pyx_n_s_py_num_fields, __pyx_k_py_num_fields, sizeof(__pyx_k_py_num_fields), 0, 0, 1, 1},
  {&__pyx_n_s_py_output_path, __pyx_k_py_output_path, sizeof(__pyx_k_py_output_path), 0, 0, 1, 1},
  {&__pyx_n_s_py_output_size, __pyx_k_py_output_size, sizeof(__pyx_k_py_output_size), 0, 0, 1, 1},
  {&__pyx_n_s_py_use_plain, __pyx_k_py_use_plain, sizeof(__pyx_k_py_use_plain), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_kp_s_required_remove_field_ratio, __pyx_k_required_remove_field_ratio, sizeof(__pyx_k_required_remove_field_ratio), 0, 0, 1, 0},
  {&__pyx_n_s_reuse_set, __pyx_k_reuse_set, sizeof(__pyx_k_reuse_set), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_rindex_vector, __pyx_k_rindex_vector, sizeof(__pyx_k_rindex_vector), 0, 0, 1, 1},
  {&__pyx_n_s_rrecord_index_list, __pyx_k_rrecord_index_list, sizeof(__pyx_k_rrecord_index_list), 0, 0, 1, 1},
  {&__pyx_n_s_rrecord_token_list, __pyx_k_rrecord_token_list, sizeof(__pyx_k_rrecord_token_list), 0, 0, 1, 1},
  {&__pyx_n_s_rtable_field_token_sum, __pyx_k_rtable_field_token_sum, sizeof(__pyx_k_rtable_field_token_sum), 0, 0, 1, 1},
  {&__pyx_n_s_rtoken_sum, __pyx_k_rtoken_sum, sizeof(__pyx_k_rtoken_sum), 0, 0, 1, 1},
  {&__pyx_n_s_rtoken_vector, __pyx_k_rtoken_vector, sizeof(__pyx_k_rtoken_vector), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_kp_s_too_few_lists, __pyx_k_too_few_lists, sizeof(__pyx_k_too_few_lists), 0, 0, 1, 0},
  {&__pyx_n_s_topk_lists, __pyx_k_topk_lists, sizeof(__pyx_k_topk_lists), 0, 0, 1, 1},
  {&__pyx_n_s_use_plain, __pyx_k_use_plain, sizeof(__pyx_k_use_plain), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "debugblock/debugblocker_cython.pyx":45
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         ltable_field_token_sum, rtable_field_token_sum, py_cand_set,
 */
  __pyx_tuple__4 = PyTuple_Pack(30, __pyx_n_s_lrecord_token_list, __pyx_n_s_rrecord_token_list, __pyx_n_s_lrecord_index_list, __pyx_n_s_rrecord_index_list, __pyx_n_s_ltable_field_token_sum, __pyx_n_s_rtable_field_token_sum, __pyx_n_s_py_cand_set, __pyx_n_s_py_num_fields, __pyx_n_s_py_output_size, __pyx_n_s_py_output_path, __pyx_n_s_py_use_plain, __pyx_n_s_output_path, __pyx_n_s_use_plain, __pyx_n_s_ltoken_vector, __pyx_n_s_rtoken_vector, __pyx_n_s_lindex_vector, __pyx_n_s_rindex_vector, __pyx_n_s_ltoken_sum, __pyx_n_s_rtoken_sum, __pyx_n_s_cand_set, __pyx_n_s_field_list, __pyx_n_s_i, __pyx_n_s_output_size, __pyx_n_s_prefix_match_max_size, __pyx_n_s_prefix_multiply_factor, __pyx_n_s_offset_of_field_num, __pyx_n_s_minimal_num_fields, __pyx_n_s_field_remove_ratio, __pyx_n_s_topk_lists, __pyx_n_s_reuse_set); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(11, 0, 30, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_lihan_Documents_CharmPyWo, __pyx_n_s_debugblocker_cython, 45, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initdebugblocker_cython(void); /*proto*/
PyMODINIT_FUNC initdebugblocker_cython(void)
#else
PyMODINIT_FUNC PyInit_debugblocker_cython(void); /*proto*/
PyMODINIT_FUNC PyInit_debugblocker_cython(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_debugblocker_cython(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("debugblocker_cython", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_debugblock__debugblocker_cython) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "debugblock.debugblocker_cython")) {
      if (unlikely(PyDict_SetItemString(modules, "debugblock.debugblocker_cython", __pyx_m) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "debugblock/debugblocker_cython.pyx":10
 * from libc.stdint cimport uint32_t as uint, uint64_t
 * from cython.parallel import prange, parallel
 * import time             # <<<<<<<<<<<<<<
 * 
 * include "new_topk_sim_join.pyx"
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":39
 * 
 * 
 * PREFIX_MATCH_MAX_SIZE = 4             # <<<<<<<<<<<<<<
 * PREFIX_MULTIPLY_FACTOR = 5
 * OFFSET_OF_FIELD_NUM = 10
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PREFIX_MATCH_MAX_SIZE, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":40
 * 
 * PREFIX_MATCH_MAX_SIZE = 4
 * PREFIX_MULTIPLY_FACTOR = 5             # <<<<<<<<<<<<<<
 * OFFSET_OF_FIELD_NUM = 10
 * MINIMAL_NUM_FIELDS = 1
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PREFIX_MULTIPLY_FACTOR, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":41
 * PREFIX_MATCH_MAX_SIZE = 4
 * PREFIX_MULTIPLY_FACTOR = 5
 * OFFSET_OF_FIELD_NUM = 10             # <<<<<<<<<<<<<<
 * MINIMAL_NUM_FIELDS = 1
 * FIELD_REMOVE_RATIO = 0.1
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OFFSET_OF_FIELD_NUM, __pyx_int_10) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":42
 * PREFIX_MULTIPLY_FACTOR = 5
 * OFFSET_OF_FIELD_NUM = 10
 * MINIMAL_NUM_FIELDS = 1             # <<<<<<<<<<<<<<
 * FIELD_REMOVE_RATIO = 0.1
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MINIMAL_NUM_FIELDS, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":43
 * OFFSET_OF_FIELD_NUM = 10
 * MINIMAL_NUM_FIELDS = 1
 * FIELD_REMOVE_RATIO = 0.1             # <<<<<<<<<<<<<<
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FIELD_REMOVE_RATIO, __pyx_float_0_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "debugblock/debugblocker_cython.pyx":45
 * FIELD_REMOVE_RATIO = 0.1
 * 
 * def debugblocker_cython(lrecord_token_list, rrecord_token_list,             # <<<<<<<<<<<<<<
 *                         lrecord_index_list, rrecord_index_list,
 *                         ltable_field_token_sum, rtable_field_token_sum, py_cand_set,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10debugblock_19debugblocker_cython_1debugblocker_cython, NULL, __pyx_n_s_debugblock_debugblocker_cython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_debugblocker_cython, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "debugblock/debugblocker_cython.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * from libcpp.unordered_set cimport unordered_set as cset
 * from libcpp.unordered_map cimport unordered_map as cmap
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init debugblock.debugblocker_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init debugblock.debugblocker_cython");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
