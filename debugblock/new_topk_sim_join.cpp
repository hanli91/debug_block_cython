/* Generated by Cython 0.23.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "PrefixEvent.h", 
            "ReuseInfo.h", 
            "TopPair.h"
        ], 
        "extra_compile_args": [
            "-O3", 
            "-ffast-math", 
            "-march=native", 
            "-std=c++11"
        ], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__debugblock__new_topk_sim_join
#define __PYX_HAVE_API__debugblock__new_topk_sim_join
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <unordered_set>
#include <unordered_map>
#include <set>
#include <map>
#include <queue>
#include "string.h"
#include "stdio.h"
#include "stdint.h"
#include "stdlib.h"
#include "TopPair.h"
#include "PrefixEvent.h"
#include "ReuseInfo.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "debugblock/new_topk_sim_join.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

static CYTHON_INLINE long __Pyx_div_long(long, long);

#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_INLINE int __Pyx_div_int(int, int);

static CYTHON_INLINE int __Pyx_mod_int(int, int);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'debugblock.new_topk_sim_join' */
static void __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_plain_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const ); /*proto*/
static int __pyx_f_10debugblock_17new_topk_sim_join_new_plain_get_overlap(std::vector<int>  const &, std::vector<int>  const &); /*proto*/
static void __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_record_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const , int const ); /*proto*/
static void __pyx_f_10debugblock_17new_topk_sim_join_new_reuse_get_overlap(std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  const &, std::vector<int>  const &, int const , int const , ReuseInfo &, int const ); /*proto*/
static void __pyx_f_10debugblock_17new_topk_sim_join_init_shift_array(int const , int const , int const , uint64_t *); /*proto*/
static void __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_reuse_impl(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::unordered_set<int>  &, std::unordered_map<int,std::unordered_set<int> >  &, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &, std::priority_queue<PrefixEvent>  &, std::priority_queue<TopPair>  &, int const , int const , int const ); /*proto*/
static int __pyx_f_10debugblock_17new_topk_sim_join_new_get_overlap(std::vector<int>  const &, std::vector<int>  const &, int const , int const ); /*proto*/
static void __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events(std::vector<std::vector<int> >  const &, std::vector<std::vector<int> >  const &, std::priority_queue<PrefixEvent>  &); /*proto*/
static void __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events_impl(std::vector<std::vector<int> >  const &, int const , std::priority_queue<PrefixEvent>  &); /*proto*/
#define __Pyx_MODULE_NAME "debugblock.new_topk_sim_join"
int __pyx_module_is_main_debugblock__new_topk_sim_join = 0;

/* Implementation of 'debugblock.new_topk_sim_join' */
static PyObject *__pyx_builtin_xrange;
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_range[] = "range";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_in_new_topk[] = "in new topk\n";
static char __pyx_k_ld_16f_d_d_16f_d_d_d[] = "%ld (%.16f %d %d) (%.16f %d %d %d)\n";
static char __pyx_k_number_of_reused_pairs_d[] = "number of reused pairs: %d\n";
static char __pyx_k_number_of_compared_pairs_ld[] = "number of compared pairs: %ld\n";
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_xrange;

/* "debugblock/new_topk_sim_join.pyx":45
 * ####################################################################################################
 * # For new topk sim join. The simplest version. Don't reuse or recording.
 * cdef heap[TopPair] new_topk_sim_join_plain(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            umap[int, uset[int]]& cand_set,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_plain(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "debugblock/new_topk_sim_join.pyx":51
 *                                            const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     new_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "debugblock/new_topk_sim_join.pyx":54
 * 
 *     cdef heap[TopPair] topk_heap
 *     new_topk_sim_join_plain_impl(ltoken_vector, rtoken_vector,             # <<<<<<<<<<<<<<
 *                                  cand_set, prefix_events, topk_heap,
 *                                  prefix_match_max_size, output_size)
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_plain_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_cand_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

  /* "debugblock/new_topk_sim_join.pyx":58
 *                                  prefix_match_max_size, output_size)
 * 
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":45
 * ####################################################################################################
 * # For new topk sim join. The simplest version. Don't reuse or recording.
 * cdef heap[TopPair] new_topk_sim_join_plain(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "debugblock/new_topk_sim_join.pyx":61
 * 
 * 
 * cdef void new_topk_sim_join_plain_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        umap[int, uset[int]]& cand_set, heap[PrefixEvent]& prefix_events,
 */

static void __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_plain_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_set<uint64_t>  __pyx_v_total_compared_pairs_set;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::unordered_map<int,std::unordered_map<int,short> >  __pyx_v_active_dict;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  double __pyx_v_sim;
  double __pyx_v_threshold;
  uint64_t __pyx_v_value;
  double __pyx_v_bound;
  std::pair<int,std::unordered_map<int,short> >  __pyx_v_p1;
  std::pair<int,short>  __pyx_v_p2;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::set<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  double __pyx_t_6;
  std::unordered_set<int>  __pyx_t_7;
  int __pyx_t_8;
  std::unordered_map<int,short>  __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  std::set<std::pair<int,int> >  __pyx_t_12;
  std::unordered_map<int,std::unordered_map<int,short> > ::iterator __pyx_t_13;
  std::pair<int,std::unordered_map<int,short> >  __pyx_t_14;
  std::unordered_map<int,short> ::iterator __pyx_t_15;
  std::unordered_map<int,short>  *__pyx_t_16;
  std::pair<int,short>  __pyx_t_17;
  long __pyx_t_18;
  short __pyx_t_19;
  uint64_t __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "debugblock/new_topk_sim_join.pyx":66
 *                                        heap[TopPair]& topk_heap, const int prefix_match_max_size,
 *                                        const int output_size) nogil:
 *     printf("in new topk\n")             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t total_compared_pairs = 0
 */
  printf(__pyx_k_in_new_topk);

  /* "debugblock/new_topk_sim_join.pyx":68
 *     printf("in new topk\n")
 * 
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef uset[uint64_t] total_compared_pairs_set
 *     cdef umap[int, uset[int]] compared_set
 */
  __pyx_v_total_compared_pairs = 0;

  /* "debugblock/new_topk_sim_join.pyx":84
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "debugblock/new_topk_sim_join.pyx":85
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "debugblock/new_topk_sim_join.pyx":86
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "debugblock/new_topk_sim_join.pyx":85
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "debugblock/new_topk_sim_join.pyx":87
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "debugblock/new_topk_sim_join.pyx":88
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_prefix_events.pop();

    /* "debugblock/new_topk_sim_join.pyx":89
 *         event = prefix_events.top()
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 */
    __pyx_t_3 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_3;

    /* "debugblock/new_topk_sim_join.pyx":91
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_1 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_1) {

      /* "debugblock/new_topk_sim_join.pyx":92
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":93
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":94
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "debugblock/new_topk_sim_join.pyx":95
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "debugblock/new_topk_sim_join.pyx":96
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_1 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":97
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "debugblock/new_topk_sim_join.pyx":98
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_r_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_r_rec_tuple = __pyx_t_5;

          /* "debugblock/new_topk_sim_join.pyx":99
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":100
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":101
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "debugblock/new_topk_sim_join.pyx":103
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L13_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":104
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "debugblock/new_topk_sim_join.pyx":103
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":106
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":107
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 * 
 */
            goto __pyx_L10_continue;

            /* "debugblock/new_topk_sim_join.pyx":106
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":110
 * 
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("left1\n")
 *                         overlap = 1
 */
          __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":112
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         # printf("left1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "debugblock/new_topk_sim_join.pyx":113
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L22_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L22_bool_binop_done:;
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":114
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "debugblock/new_topk_sim_join.pyx":115
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":113
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":117
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 * 
 *                         if topk_heap.size() == output_size:
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

            /* "debugblock/new_topk_sim_join.pyx":119
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":120
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":121
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":122
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":120
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":119
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L24;
            }

            /* "debugblock/new_topk_sim_join.pyx":124
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L24:;

            /* "debugblock/new_topk_sim_join.pyx":126
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("left2\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":110
 * 
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("left1\n")
 *                         overlap = 1
 */
            goto __pyx_L18;
          }

          /* "debugblock/new_topk_sim_join.pyx":127
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("left2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
          __pyx_t_1 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":129
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("left2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_overlap = __pyx_f_10debugblock_17new_topk_sim_join_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

            /* "debugblock/new_topk_sim_join.pyx":131
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L27_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L27_bool_binop_done:;
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":133
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":131
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":135
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

            /* "debugblock/new_topk_sim_join.pyx":136
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":137
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":138
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":139
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":137
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":136
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L29;
            }

            /* "debugblock/new_topk_sim_join.pyx":141
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L29:;

            /* "debugblock/new_topk_sim_join.pyx":143
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":144
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":143
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L31;
            }

            /* "debugblock/new_topk_sim_join.pyx":146
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_7 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

              /* "debugblock/new_topk_sim_join.pyx":147
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L31:;

            /* "debugblock/new_topk_sim_join.pyx":149
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("left3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":127
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("left2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
            goto __pyx_L18;
          }

          /* "debugblock/new_topk_sim_join.pyx":152
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":154
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":156
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "debugblock/new_topk_sim_join.pyx":157
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     #overlap = value
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "debugblock/new_topk_sim_join.pyx":160
 *                                     # printf("left3.1.1.1\n")
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                  __pyx_v_overlap = __pyx_f_10debugblock_17new_topk_sim_join_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

                  /* "debugblock/new_topk_sim_join.pyx":161
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "debugblock/new_topk_sim_join.pyx":163
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_6 = (__pyx_v_overlap * 1.0);
                  __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_3 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

                  /* "debugblock/new_topk_sim_join.pyx":164
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_1) {

                    /* "debugblock/new_topk_sim_join.pyx":165
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":166
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "debugblock/new_topk_sim_join.pyx":167
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "debugblock/new_topk_sim_join.pyx":165
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":164
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L35;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":169
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L35:;

                  /* "debugblock/new_topk_sim_join.pyx":171
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_1) {

                    /* "debugblock/new_topk_sim_join.pyx":172
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "debugblock/new_topk_sim_join.pyx":171
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L37;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":174
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_7 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

                    /* "debugblock/new_topk_sim_join.pyx":175
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L37:;

                  /* "debugblock/new_topk_sim_join.pyx":177
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "debugblock/new_topk_sim_join.pyx":157
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     #overlap = value
 */
                  goto __pyx_L34;
                }

                /* "debugblock/new_topk_sim_join.pyx":179
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 # printf("left3.1.2\n")
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_8 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) + 1);
                }
                __pyx_L34:;

                /* "debugblock/new_topk_sim_join.pyx":154
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
                goto __pyx_L33;
              }

              /* "debugblock/new_topk_sim_join.pyx":182
 *                             else:
 *                                 # printf("left3.1.2\n")
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L33:;

              /* "debugblock/new_topk_sim_join.pyx":152
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
              goto __pyx_L32;
            }

            /* "debugblock/new_topk_sim_join.pyx":184
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_9 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_9;

              /* "debugblock/new_topk_sim_join.pyx":185
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L32:;
          }
          __pyx_L18:;

          /* "debugblock/new_topk_sim_join.pyx":188
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L39_bool_binop_done;
          }

          /* "debugblock/new_topk_sim_join.pyx":189
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L39_bool_binop_done:;

          /* "debugblock/new_topk_sim_join.pyx":188
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":190
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "debugblock/new_topk_sim_join.pyx":191
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":192
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "debugblock/new_topk_sim_join.pyx":191
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":188
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":98
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "debugblock/new_topk_sim_join.pyx":96
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":197
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_l_tok_idx + 1) < __pyx_v_l_len) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":198
 * 
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 */
        __pyx_t_6 = 1.0;
        __pyx_t_10 = (((__pyx_v_l_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_l_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_11 = (1.0 - (__pyx_t_10 / __pyx_v_l_len));
        if (((__pyx_t_6 < __pyx_t_11) != 0)) {
          __pyx_t_10 = __pyx_t_6;
        } else {
          __pyx_t_10 = __pyx_t_11;
        }
        __pyx_v_threshold = __pyx_t_10;

        /* "debugblock/new_topk_sim_join.pyx":199
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_l_rec_idx, (__pyx_v_l_tok_idx + 1)));

        /* "debugblock/new_topk_sim_join.pyx":197
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":201
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":202
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_12 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_12;

        /* "debugblock/new_topk_sim_join.pyx":201
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":203
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "debugblock/new_topk_sim_join.pyx":91
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "debugblock/new_topk_sim_join.pyx":205
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":206
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":207
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "debugblock/new_topk_sim_join.pyx":208
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "debugblock/new_topk_sim_join.pyx":209
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_1 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":210
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "debugblock/new_topk_sim_join.pyx":211
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_l_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_l_rec_tuple = __pyx_t_5;

          /* "debugblock/new_topk_sim_join.pyx":212
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":213
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":214
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "debugblock/new_topk_sim_join.pyx":216
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L48_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L48_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":217
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L45_continue;

            /* "debugblock/new_topk_sim_join.pyx":216
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":219
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L51_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L51_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":220
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L45_continue;

            /* "debugblock/new_topk_sim_join.pyx":219
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":222
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("right1\n")
 *                         overlap = 1
 */
          __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L54_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L54_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":224
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         # printf("right1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "debugblock/new_topk_sim_join.pyx":225
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L57_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L57_bool_binop_done:;
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":226
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "debugblock/new_topk_sim_join.pyx":227
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":225
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":229
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 * 
 *                         if topk_heap.size() == output_size:
 */
            __pyx_t_10 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_10 / __pyx_t_3);

            /* "debugblock/new_topk_sim_join.pyx":231
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":232
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":233
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":234
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":232
 * 
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":231
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 * 
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L59;
            }

            /* "debugblock/new_topk_sim_join.pyx":236
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L59:;

            /* "debugblock/new_topk_sim_join.pyx":238
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("right2\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":222
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # printf("right1\n")
 *                         overlap = 1
 */
            goto __pyx_L53;
          }

          /* "debugblock/new_topk_sim_join.pyx":239
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("right2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
          __pyx_t_1 = ((((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[(__pyx_v_l_tok_idx + 1)]) == ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[(__pyx_v_r_tok_idx + 1)])) != 0);
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":241
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                         # printf("right2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_overlap = __pyx_f_10debugblock_17new_topk_sim_join_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

            /* "debugblock/new_topk_sim_join.pyx":243
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L62_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L62_bool_binop_done:;
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":245
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":243
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 * 
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             #overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":247
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_10 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_10 / __pyx_t_3);

            /* "debugblock/new_topk_sim_join.pyx":248
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":249
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":250
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":251
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":249
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":248
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L64;
            }

            /* "debugblock/new_topk_sim_join.pyx":253
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         if compared_set.count(l_rec_idx):
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L64:;

            /* "debugblock/new_topk_sim_join.pyx":255
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
            __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":256
 * 
 *                         if compared_set.count(l_rec_idx):
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":255
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 */
              goto __pyx_L66;
            }

            /* "debugblock/new_topk_sim_join.pyx":258
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
            /*else*/ {
              try {
                __pyx_t_7 = std::unordered_set<int> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

              /* "debugblock/new_topk_sim_join.pyx":259
 *                         else:
 *                             compared_set[l_rec_idx] = uset[int]()
 *                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
              (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
            }
            __pyx_L66:;

            /* "debugblock/new_topk_sim_join.pyx":261
 *                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         # printf("right3\n")
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":239
 * 
 *                         total_compared_pairs += 1
 *                     elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:             # <<<<<<<<<<<<<<
 *                         # printf("right2\n")
 *                         overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
            goto __pyx_L53;
          }

          /* "debugblock/new_topk_sim_join.pyx":264
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":265
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":266
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     #overlap = value
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "debugblock/new_topk_sim_join.pyx":267
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "debugblock/new_topk_sim_join.pyx":269
 *                                 if value == prefix_match_max_size:
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                  __pyx_v_overlap = __pyx_f_10debugblock_17new_topk_sim_join_new_plain_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]));

                  /* "debugblock/new_topk_sim_join.pyx":270
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "debugblock/new_topk_sim_join.pyx":272
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_10 = (__pyx_v_overlap * 1.0);
                  __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_3 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_10 / __pyx_t_3);

                  /* "debugblock/new_topk_sim_join.pyx":273
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_1) {

                    /* "debugblock/new_topk_sim_join.pyx":274
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":275
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "debugblock/new_topk_sim_join.pyx":276
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "debugblock/new_topk_sim_join.pyx":274
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":273
 * 
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L70;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":278
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L70:;

                  /* "debugblock/new_topk_sim_join.pyx":280
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_1) {

                    /* "debugblock/new_topk_sim_join.pyx":281
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "debugblock/new_topk_sim_join.pyx":280
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L72;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":283
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_7 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_7;

                    /* "debugblock/new_topk_sim_join.pyx":284
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L72:;

                  /* "debugblock/new_topk_sim_join.pyx":286
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "debugblock/new_topk_sim_join.pyx":267
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     #overlap = value
 *                                     overlap = new_plain_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx])
 */
                  goto __pyx_L69;
                }

                /* "debugblock/new_topk_sim_join.pyx":288
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_8 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_8]) + 1);
                }
                __pyx_L69:;

                /* "debugblock/new_topk_sim_join.pyx":265
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
                goto __pyx_L68;
              }

              /* "debugblock/new_topk_sim_join.pyx":290
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L68:;

              /* "debugblock/new_topk_sim_join.pyx":264
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              goto __pyx_L67;
            }

            /* "debugblock/new_topk_sim_join.pyx":292
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_9 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_9;

              /* "debugblock/new_topk_sim_join.pyx":293
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L67:;
          }
          __pyx_L53:;

          /* "debugblock/new_topk_sim_join.pyx":296
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L74_bool_binop_done;
          }

          /* "debugblock/new_topk_sim_join.pyx":297
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L74_bool_binop_done:;

          /* "debugblock/new_topk_sim_join.pyx":296
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":298
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "debugblock/new_topk_sim_join.pyx":299
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":300
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "debugblock/new_topk_sim_join.pyx":299
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":296
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":211
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L45_continue:;
        }

        /* "debugblock/new_topk_sim_join.pyx":209
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":305
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_r_tok_idx + 1) < __pyx_v_r_len) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":306
 * 
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 */
        __pyx_t_10 = 1.0;
        __pyx_t_6 = (((__pyx_v_r_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_r_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_11 = (1.0 - (__pyx_t_6 / __pyx_v_r_len));
        if (((__pyx_t_10 < __pyx_t_11) != 0)) {
          __pyx_t_6 = __pyx_t_10;
        } else {
          __pyx_t_6 = __pyx_t_11;
        }
        __pyx_v_threshold = __pyx_t_6;

        /* "debugblock/new_topk_sim_join.pyx":307
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_r_rec_idx, (__pyx_v_r_tok_idx + 1)));

        /* "debugblock/new_topk_sim_join.pyx":305
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":309
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":310
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 *         # printf("finish\n")
 */
        try {
          __pyx_t_12 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_12;

        /* "debugblock/new_topk_sim_join.pyx":309
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":311
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 *         # printf("finish\n")
 * 
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "debugblock/new_topk_sim_join.pyx":316
 *     # printf("checkpoint3\n")
 * 
 *     cdef double bound = 1e-6             # <<<<<<<<<<<<<<
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold
 */
  __pyx_v_bound = 1e-6;

  /* "debugblock/new_topk_sim_join.pyx":317
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "debugblock/new_topk_sim_join.pyx":318
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, umap[int, short]] p1
 */
    __pyx_t_6 = __pyx_v_prefix_events.top().threshold;
    __pyx_v_bound = __pyx_t_6;

    /* "debugblock/new_topk_sim_join.pyx":317
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  }

  /* "debugblock/new_topk_sim_join.pyx":322
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  __pyx_t_13 = __pyx_v_active_dict.begin();
  for (;;) {
    if (!(__pyx_t_13 != __pyx_v_active_dict.end())) break;
    __pyx_t_14 = *__pyx_t_13;
    ++__pyx_t_13;
    __pyx_v_p1 = __pyx_t_14;

    /* "debugblock/new_topk_sim_join.pyx":323
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first             # <<<<<<<<<<<<<<
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 */
    __pyx_t_3 = __pyx_v_p1.first;
    __pyx_v_l_rec_idx = __pyx_t_3;

    /* "debugblock/new_topk_sim_join.pyx":324
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    __pyx_t_16 = &__pyx_v_p1.second;
    __pyx_t_15 = __pyx_t_16->begin();
    for (;;) {
      if (!(__pyx_t_15 != __pyx_t_16->end())) break;
      __pyx_t_17 = *__pyx_t_15;
      ++__pyx_t_15;
      __pyx_v_p2 = __pyx_t_17;

      /* "debugblock/new_topk_sim_join.pyx":325
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      __pyx_t_18 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() < (__pyx_t_18 / __pyx_v_bound)) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L85_bool_binop_done;
      }

      /* "debugblock/new_topk_sim_join.pyx":326
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:             # <<<<<<<<<<<<<<
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 */
      __pyx_t_18 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_rtoken_vector[__pyx_v_p2.first]).size() < (__pyx_t_18 / __pyx_v_bound)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L85_bool_binop_done:;

      /* "debugblock/new_topk_sim_join.pyx":325
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":327
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second             # <<<<<<<<<<<<<<
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 */
        __pyx_t_19 = __pyx_v_p2.second;
        __pyx_v_value = __pyx_t_19;

        /* "debugblock/new_topk_sim_join.pyx":328
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)             # <<<<<<<<<<<<<<
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 */
        __pyx_t_6 = (__pyx_v_value * 1.0);
        __pyx_t_20 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() + (__pyx_v_rtoken_vector[__pyx_v_p2.first]).size()) - __pyx_v_value);
        if (unlikely(__pyx_t_20 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sim = (__pyx_t_6 / __pyx_t_20);

        /* "debugblock/new_topk_sim_join.pyx":329
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
        __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
        if (__pyx_t_1) {

          /* "debugblock/new_topk_sim_join.pyx":330
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":331
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 */
            __pyx_v_topk_heap.pop();

            /* "debugblock/new_topk_sim_join.pyx":332
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));

            /* "debugblock/new_topk_sim_join.pyx":330
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":329
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
          goto __pyx_L87;
        }

        /* "debugblock/new_topk_sim_join.pyx":334
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));
        }
        __pyx_L87:;

        /* "debugblock/new_topk_sim_join.pyx":325
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":324
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    }

    /* "debugblock/new_topk_sim_join.pyx":322
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  }

  /* "debugblock/new_topk_sim_join.pyx":337
 * 
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint4\n")
 * 
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "debugblock/new_topk_sim_join.pyx":340
 *     # printf("checkpoint4\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":61
 * 
 * 
 * cdef void new_topk_sim_join_plain_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        umap[int, uset[int]]& cand_set, heap[PrefixEvent]& prefix_events,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.new_topk_sim_join.new_topk_sim_join_plain_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "debugblock/new_topk_sim_join.pyx":344
 * 
 * 
 * cdef int new_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef uint i
 */

static int __pyx_f_10debugblock_17new_topk_sim_join_new_plain_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list) {
  int __pyx_v_overlap;
  uint32_t __pyx_v_i;
  std::unordered_set<int>  __pyx_v_rset;
  int __pyx_r;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "debugblock/new_topk_sim_join.pyx":345
 * 
 * cdef int new_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef uint i
 * 
 */
  __pyx_v_overlap = 0;

  /* "debugblock/new_topk_sim_join.pyx":349
 * 
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size()):             # <<<<<<<<<<<<<<
 *         rset.insert(rtoken_list[i])
 * 
 */
  __pyx_t_1 = __pyx_v_rtoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":350
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size()):
 *         rset.insert(rtoken_list[i])             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size()):
 */
    __pyx_v_rset.insert((__pyx_v_rtoken_list[__pyx_v_i]));
  }

  /* "debugblock/new_topk_sim_join.pyx":352
 *         rset.insert(rtoken_list[i])
 * 
 *     for i in xrange(ltoken_list.size()):             # <<<<<<<<<<<<<<
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1
 */
  __pyx_t_1 = __pyx_v_ltoken_list.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":353
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    __pyx_t_3 = (__pyx_v_rset.count((__pyx_v_ltoken_list[__pyx_v_i])) != 0);
    if (__pyx_t_3) {

      /* "debugblock/new_topk_sim_join.pyx":354
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):
 *             overlap += 1             # <<<<<<<<<<<<<<
 * 
 *     return overlap
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "debugblock/new_topk_sim_join.pyx":353
 * 
 *     for i in xrange(ltoken_list.size()):
 *         if rset.count(ltoken_list[i]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    }
  }

  /* "debugblock/new_topk_sim_join.pyx":356
 *             overlap += 1
 * 
 *     return overlap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":344
 * 
 * 
 * cdef int new_plain_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list) nogil:             # <<<<<<<<<<<<<<
 *     cdef int overlap = 0
 *     cdef uint i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "debugblock/new_topk_sim_join.pyx":362
 * ####################################################################################################
 * # For new topk sim join. Only record pre-calculated info but don't reuse.
 * cdef heap[TopPair] new_topk_sim_join_record(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             const vector[vector[int]]& lindex_vector,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_record(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  const &__pyx_v_lindex_vector, std::vector<std::vector<int> >  const &__pyx_v_rindex_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "debugblock/new_topk_sim_join.pyx":371
 *                                             const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     new_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "debugblock/new_topk_sim_join.pyx":374
 * 
 *     cdef heap[TopPair] topk_heap
 *     new_topk_sim_join_record_impl(ltoken_vector, rtoken_vector, lindex_vector, rindex_vector,             # <<<<<<<<<<<<<<
 *                                   cand_set, reuse_set, prefix_events, topk_heap,
 *                                   offset_of_field_num, prefix_match_max_size, output_size)
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_record_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_lindex_vector, __pyx_v_rindex_vector, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_offset_of_field_num, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

  /* "debugblock/new_topk_sim_join.pyx":377
 *                                   cand_set, reuse_set, prefix_events, topk_heap,
 *                                   offset_of_field_num, prefix_match_max_size, output_size)
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":362
 * ####################################################################################################
 * # For new topk sim join. Only record pre-calculated info but don't reuse.
 * cdef heap[TopPair] new_topk_sim_join_record(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                             const vector[vector[int]]& rtoken_vector,
 *                                             const vector[vector[int]]& lindex_vector,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "debugblock/new_topk_sim_join.pyx":380
 * 
 * 
 * cdef void new_topk_sim_join_record_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                         const vector[vector[int]]& rtoken_vector,
 *                                         const vector[vector[int]]& lindex_vector,
 */

static void __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_record_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::vector<std::vector<int> >  const &__pyx_v_lindex_vector, std::vector<std::vector<int> >  const &__pyx_v_rindex_vector, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_set<uint64_t>  __pyx_v_total_compared_pairs_set;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::unordered_map<int,std::unordered_map<int,uint64_t> >  __pyx_v_active_dict;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  ReuseInfo __pyx_v_reuse_info;
  double __pyx_v_sim;
  double __pyx_v_threshold;
  uint64_t __pyx_v_value;
  uint64_t __pyx_v_COUNT;
  uint64_t *__pyx_v_SHIFT_ARRAY;
  int __pyx_v_COUNT_BITS;
  int __pyx_v_FIELD_BITS;
  int __pyx_v_INC;
  uint64_t __pyx_v_bits;
  uint64_t __pyx_v_bit_results;
  uint64_t __pyx_v_field_pair;
  double __pyx_v_bound;
  std::pair<int,std::unordered_map<int,uint64_t> >  __pyx_v_p1;
  std::pair<int,uint64_t>  __pyx_v_p2;
  long __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::set<std::pair<int,int> > ::iterator __pyx_t_5;
  std::pair<int,int>  __pyx_t_6;
  double __pyx_t_7;
  std::unordered_set<int>  __pyx_t_8;
  std::unordered_map<int,ReuseInfo>  __pyx_t_9;
  std::unordered_map<int,uint64_t>  __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  std::set<std::pair<int,int> >  __pyx_t_13;
  std::unordered_map<int,std::unordered_map<int,uint64_t> > ::iterator __pyx_t_14;
  std::pair<int,std::unordered_map<int,uint64_t> >  __pyx_t_15;
  std::unordered_map<int,uint64_t> ::iterator __pyx_t_16;
  std::unordered_map<int,uint64_t>  *__pyx_t_17;
  std::pair<int,uint64_t>  __pyx_t_18;
  uint64_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "debugblock/new_topk_sim_join.pyx":391
 *     # printf("checkpoint1\n")
 * 
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef uset[uint64_t] total_compared_pairs_set
 *     cdef umap[int, uset[int]] compared_set
 */
  __pyx_v_total_compared_pairs = 0;

  /* "debugblock/new_topk_sim_join.pyx":407
 *     cdef int v, p
 * 
 *     cdef uint64_t COUNT = 0x000000000000000F             # <<<<<<<<<<<<<<
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))
 *     cdef int COUNT_BITS = 4
 */
  __pyx_v_COUNT = 0x000000000000000F;

  /* "debugblock/new_topk_sim_join.pyx":408
 * 
 *     cdef uint64_t COUNT = 0x000000000000000F
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))             # <<<<<<<<<<<<<<
 *     cdef int COUNT_BITS = 4
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 */
  __pyx_v_SHIFT_ARRAY = ((uint64_t *)malloc((__pyx_v_prefix_match_max_size * (sizeof(uint64_t)))));

  /* "debugblock/new_topk_sim_join.pyx":409
 *     cdef uint64_t COUNT = 0x000000000000000F
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))
 *     cdef int COUNT_BITS = 4             # <<<<<<<<<<<<<<
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)
 */
  __pyx_v_COUNT_BITS = 4;

  /* "debugblock/new_topk_sim_join.pyx":410
 *     cdef uint64_t *SHIFT_ARRAY = <uint64_t *>malloc(prefix_match_max_size * sizeof(uint64_t))
 *     cdef int COUNT_BITS = 4
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size             # <<<<<<<<<<<<<<
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)
 *     cdef int INC = 1
 */
  __pyx_t_1 = (64 - __pyx_v_COUNT_BITS);
  if (unlikely(__pyx_v_prefix_match_max_size == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_prefix_match_max_size == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_1))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_FIELD_BITS = __Pyx_div_long(__pyx_t_1, __pyx_v_prefix_match_max_size);

  /* "debugblock/new_topk_sim_join.pyx":411
 *     cdef int COUNT_BITS = 4
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)             # <<<<<<<<<<<<<<
 *     cdef int INC = 1
 * 
 */
  __pyx_f_10debugblock_17new_topk_sim_join_init_shift_array(__pyx_v_prefix_match_max_size, __pyx_v_FIELD_BITS, __pyx_v_COUNT_BITS, __pyx_v_SHIFT_ARRAY);

  /* "debugblock/new_topk_sim_join.pyx":412
 *     cdef int FIELD_BITS = (64 - COUNT_BITS) / prefix_match_max_size
 *     init_shift_array(prefix_match_max_size, FIELD_BITS, COUNT_BITS, SHIFT_ARRAY)
 *     cdef int INC = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t bits = 0
 */
  __pyx_v_INC = 1;

  /* "debugblock/new_topk_sim_join.pyx":414
 *     cdef int INC = 1
 * 
 *     cdef uint64_t bits = 0             # <<<<<<<<<<<<<<
 *     cdef uint64_t bit_results = 0
 *     cdef uint64_t field_pair = 0
 */
  __pyx_v_bits = 0;

  /* "debugblock/new_topk_sim_join.pyx":415
 * 
 *     cdef uint64_t bits = 0
 *     cdef uint64_t bit_results = 0             # <<<<<<<<<<<<<<
 *     cdef uint64_t field_pair = 0
 * 
 */
  __pyx_v_bit_results = 0;

  /* "debugblock/new_topk_sim_join.pyx":416
 *     cdef uint64_t bits = 0
 *     cdef uint64_t bit_results = 0
 *     cdef uint64_t field_pair = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, int] temp
 */
  __pyx_v_field_pair = 0;

  /* "debugblock/new_topk_sim_join.pyx":427
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_2) break;

    /* "debugblock/new_topk_sim_join.pyx":428
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_3 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "debugblock/new_topk_sim_join.pyx":429
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "debugblock/new_topk_sim_join.pyx":428
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "debugblock/new_topk_sim_join.pyx":430
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "debugblock/new_topk_sim_join.pyx":431
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_prefix_events.pop();

    /* "debugblock/new_topk_sim_join.pyx":432
 *         event = prefix_events.top()
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 */
    __pyx_t_4 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_4;

    /* "debugblock/new_topk_sim_join.pyx":434
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_2 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_2) {

      /* "debugblock/new_topk_sim_join.pyx":435
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_4 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_4;

      /* "debugblock/new_topk_sim_join.pyx":436
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_4 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_4;

      /* "debugblock/new_topk_sim_join.pyx":437
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "debugblock/new_topk_sim_join.pyx":438
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "debugblock/new_topk_sim_join.pyx":439
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_2 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_2) {

        /* "debugblock/new_topk_sim_join.pyx":440
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "debugblock/new_topk_sim_join.pyx":441
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_5 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_5 != __pyx_v_r_records.end())) break;
          __pyx_t_6 = *__pyx_t_5;
          ++__pyx_t_5;
          __pyx_v_r_rec_tuple = __pyx_t_6;

          /* "debugblock/new_topk_sim_join.pyx":442
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_4 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_4;

          /* "debugblock/new_topk_sim_join.pyx":443
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_4 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_4;

          /* "debugblock/new_topk_sim_join.pyx":444
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "debugblock/new_topk_sim_join.pyx":446
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L13_bool_binop_done:;
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":447
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "debugblock/new_topk_sim_join.pyx":446
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":449
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":450
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L10_continue;

            /* "debugblock/new_topk_sim_join.pyx":449
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":452
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # cmps[0] += 1
 *                         # printf("left1\n")
 */
          __pyx_t_3 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_3 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":455
 *                         # cmps[0] += 1
 *                         # printf("left1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "debugblock/new_topk_sim_join.pyx":456
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_3 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_3) {
            } else {
              __pyx_t_2 = __pyx_t_3;
              goto __pyx_L22_bool_binop_done;
            }
            __pyx_t_3 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_2 = __pyx_t_3;
            __pyx_L22_bool_binop_done:;
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":457
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT
 */
              __pyx_v_bit_results = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

              /* "debugblock/new_topk_sim_join.pyx":458
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             overlap += bit_results & COUNT
 * 
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":459
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              __pyx_v_overlap = (__pyx_v_overlap + (__pyx_v_bit_results & __pyx_v_COUNT));

              /* "debugblock/new_topk_sim_join.pyx":456
 *                         # printf("left1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":461
 *                             overlap += bit_results & COUNT
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_7 = (__pyx_v_overlap * 1.0);
            __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_4 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_7 / __pyx_t_4);

            /* "debugblock/new_topk_sim_join.pyx":462
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":463
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_2) {

                /* "debugblock/new_topk_sim_join.pyx":464
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":465
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":463
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":462
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L24;
            }

            /* "debugblock/new_topk_sim_join.pyx":467
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L24:;

            /* "debugblock/new_topk_sim_join.pyx":469
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     # elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                     #     cmps[1] += 1
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":452
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # cmps[0] += 1
 *                         # printf("left1\n")
 */
            goto __pyx_L18;
          }

          /* "debugblock/new_topk_sim_join.pyx":521
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
          /*else*/ {
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":523
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_2) {

                /* "debugblock/new_topk_sim_join.pyx":525
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     # cmps[2] += 1
 */
                __pyx_v_value = (((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) & __pyx_v_COUNT);

                /* "debugblock/new_topk_sim_join.pyx":526
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # cmps[2] += 1
 *                                     # printf("left3.1.1.1\n")
 */
                __pyx_t_2 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_2) {

                  /* "debugblock/new_topk_sim_join.pyx":529
 *                                     # cmps[2] += 1
 *                                     # printf("left3.1.1.1\n")
 *                                     reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                                     # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                     #                       lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
                  __pyx_v_reuse_info = ReuseInfo(0);

                  /* "debugblock/new_topk_sim_join.pyx":544
 *                                     #         reuse_info.map[p] = 1
 * 
 *                                     new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 */
                  __pyx_f_10debugblock_17new_topk_sim_join_new_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), 0, 0, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

                  /* "debugblock/new_topk_sim_join.pyx":547
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     overlap = reuse_info.overlap
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "debugblock/new_topk_sim_join.pyx":549
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 */
                  __pyx_t_4 = __pyx_v_reuse_info.overlap;
                  __pyx_v_overlap = __pyx_t_4;

                  /* "debugblock/new_topk_sim_join.pyx":550
 * 
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_7 = (__pyx_v_overlap * 1.0);
                  __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_4 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_7 / __pyx_t_4);

                  /* "debugblock/new_topk_sim_join.pyx":551
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_2) {

                    /* "debugblock/new_topk_sim_join.pyx":552
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_2) {

                      /* "debugblock/new_topk_sim_join.pyx":553
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "debugblock/new_topk_sim_join.pyx":554
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "debugblock/new_topk_sim_join.pyx":552
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":551
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L29;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":556
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L29:;

                  /* "debugblock/new_topk_sim_join.pyx":558
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "debugblock/new_topk_sim_join.pyx":559
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "debugblock/new_topk_sim_join.pyx":558
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L31;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":561
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_8 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

                    /* "debugblock/new_topk_sim_join.pyx":562
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     if reuse_set.count(l_rec_idx):
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L31:;

                  /* "debugblock/new_topk_sim_join.pyx":564
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "debugblock/new_topk_sim_join.pyx":565
 * 
 *                                     if reuse_set.count(l_rec_idx):
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

                    /* "debugblock/new_topk_sim_join.pyx":564
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                    goto __pyx_L32;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":567
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_9 = std::unordered_map<int,ReuseInfo> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_9;

                    /* "debugblock/new_topk_sim_join.pyx":568
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
                  }
                  __pyx_L32:;

                  /* "debugblock/new_topk_sim_join.pyx":570
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "debugblock/new_topk_sim_join.pyx":526
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # cmps[2] += 1
 *                                     # printf("left3.1.1.1\n")
 */
                  goto __pyx_L28;
                }

                /* "debugblock/new_topk_sim_join.pyx":572
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 */
                /*else*/ {
                  __pyx_v_bits = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                  /* "debugblock/new_topk_sim_join.pyx":573
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 */
                  __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                  /* "debugblock/new_topk_sim_join.pyx":575
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC
 *                             else:
 */
                  __pyx_v_bits = (__pyx_v_bits | (__pyx_v_field_pair << (((__pyx_v_COUNT & __pyx_v_bits) * __pyx_v_FIELD_BITS) + __pyx_v_COUNT_BITS)));

                  /* "debugblock/new_topk_sim_join.pyx":576
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC             # <<<<<<<<<<<<<<
 *                             else:
 *                                 # printf("left3.1.2\n")
 */
                  ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = (__pyx_v_bits + __pyx_v_INC);
                }
                __pyx_L28:;

                /* "debugblock/new_topk_sim_join.pyx":523
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
                goto __pyx_L27;
              }

              /* "debugblock/new_topk_sim_join.pyx":579
 *                             else:
 *                                 # printf("left3.1.2\n")
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 */
              /*else*/ {

                /* "debugblock/new_topk_sim_join.pyx":580
 *                                 # printf("left3.1.2\n")
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 */
                __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                /* "debugblock/new_topk_sim_join.pyx":581
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 *                         else:
 */
                __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

                /* "debugblock/new_topk_sim_join.pyx":582
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                         else:
 *                             # printf("left3.2.1\n")
 */
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
              }
              __pyx_L27:;

              /* "debugblock/new_topk_sim_join.pyx":521
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
              goto __pyx_L26;
            }

            /* "debugblock/new_topk_sim_join.pyx":585
 *                         else:
 *                             # printf("left3.2.1\n")
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             # printf("left3.2.2\n")
 */
            /*else*/ {

              /* "debugblock/new_topk_sim_join.pyx":586
 *                             # printf("left3.2.1\n")
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                          rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.2\n")
 *                             bits = (field_pair << COUNT_BITS) + INC
 */
              __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

              /* "debugblock/new_topk_sim_join.pyx":588
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             # printf("left3.2.2\n")
 *                             bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.3\n")
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 */
              __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

              /* "debugblock/new_topk_sim_join.pyx":590
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             # printf("left3.2.3\n")
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.4\n")
 *                             active_dict[l_rec_idx][r_rec_idx] = bits
 */
              try {
                __pyx_t_10 = std::unordered_map<int,uint64_t> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_10;

              /* "debugblock/new_topk_sim_join.pyx":592
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 *                             # printf("left3.2.4\n")
 *                             active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                             # printf("left3.2.5\n")
 *                     # printf("pass check\n")
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
            }
            __pyx_L26:;
          }
          __pyx_L18:;

          /* "debugblock/new_topk_sim_join.pyx":596
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_3 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L34_bool_binop_done;
          }

          /* "debugblock/new_topk_sim_join.pyx":597
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_3 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L34_bool_binop_done:;

          /* "debugblock/new_topk_sim_join.pyx":596
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":598
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "debugblock/new_topk_sim_join.pyx":599
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":600
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "debugblock/new_topk_sim_join.pyx":599
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":596
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":441
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "debugblock/new_topk_sim_join.pyx":439
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":606
 *                             # printf("%d %d %d\n", cmps[0], cmps[1], cmps[2])
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) < __pyx_v_l_len) != 0);
      if (__pyx_t_2) {

        /* "debugblock/new_topk_sim_join.pyx":607
 * 
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 */
        __pyx_t_7 = 1.0;
        __pyx_t_11 = (((__pyx_v_l_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_l_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_12 = (1.0 - (__pyx_t_11 / __pyx_v_l_len));
        if (((__pyx_t_7 < __pyx_t_12) != 0)) {
          __pyx_t_11 = __pyx_t_7;
        } else {
          __pyx_t_11 = __pyx_t_12;
        }
        __pyx_v_threshold = __pyx_t_11;

        /* "debugblock/new_topk_sim_join.pyx":608
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_l_rec_idx, (__pyx_v_l_tok_idx + 1)));

        /* "debugblock/new_topk_sim_join.pyx":606
 *                             # printf("%d %d %d\n", cmps[0], cmps[1], cmps[2])
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":610
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_2 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_2) {

        /* "debugblock/new_topk_sim_join.pyx":611
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_13 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_13;

        /* "debugblock/new_topk_sim_join.pyx":610
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":612
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_6 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_6);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "debugblock/new_topk_sim_join.pyx":434
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "debugblock/new_topk_sim_join.pyx":614
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_4;

      /* "debugblock/new_topk_sim_join.pyx":615
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_4 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_4;

      /* "debugblock/new_topk_sim_join.pyx":616
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "debugblock/new_topk_sim_join.pyx":617
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "debugblock/new_topk_sim_join.pyx":618
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_2 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_2) {

        /* "debugblock/new_topk_sim_join.pyx":619
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "debugblock/new_topk_sim_join.pyx":620
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_5 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_5 != __pyx_v_l_records.end())) break;
          __pyx_t_6 = *__pyx_t_5;
          ++__pyx_t_5;
          __pyx_v_l_rec_tuple = __pyx_t_6;

          /* "debugblock/new_topk_sim_join.pyx":621
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_4 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_4;

          /* "debugblock/new_topk_sim_join.pyx":622
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_4 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_4;

          /* "debugblock/new_topk_sim_join.pyx":623
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "debugblock/new_topk_sim_join.pyx":625
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L43_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L43_bool_binop_done:;
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":626
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L40_continue;

            /* "debugblock/new_topk_sim_join.pyx":625
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":628
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_3 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L46_bool_binop_done;
          }
          __pyx_t_3 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L46_bool_binop_done:;
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":629
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L40_continue;

            /* "debugblock/new_topk_sim_join.pyx":628
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":631
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # cmps[0] += 1
 *                         # printf("right1\n")
 */
          __pyx_t_3 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L49_bool_binop_done;
          }
          __pyx_t_3 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L49_bool_binop_done:;
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":634
 *                         # cmps[0] += 1
 *                         # printf("right1\n")
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "debugblock/new_topk_sim_join.pyx":635
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_3 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_3) {
            } else {
              __pyx_t_2 = __pyx_t_3;
              goto __pyx_L52_bool_binop_done;
            }
            __pyx_t_3 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_2 = __pyx_t_3;
            __pyx_L52_bool_binop_done:;
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":636
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT
 */
              __pyx_v_bit_results = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

              /* "debugblock/new_topk_sim_join.pyx":637
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 *                             overlap += bit_results & COUNT
 * 
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":638
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                             overlap += bit_results & COUNT             # <<<<<<<<<<<<<<
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
              __pyx_v_overlap = (__pyx_v_overlap + (__pyx_v_bit_results & __pyx_v_COUNT));

              /* "debugblock/new_topk_sim_join.pyx":635
 *                         # printf("right1\n")
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             bit_results = active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":640
 *                             overlap += bit_results & COUNT
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_11 = (__pyx_v_overlap * 1.0);
            __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_4 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_11 / __pyx_t_4);

            /* "debugblock/new_topk_sim_join.pyx":641
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":642
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_2) {

                /* "debugblock/new_topk_sim_join.pyx":643
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":644
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":642
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":641
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L54;
            }

            /* "debugblock/new_topk_sim_join.pyx":646
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L54:;

            /* "debugblock/new_topk_sim_join.pyx":648
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     # elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                     #     cmps[1] += 1
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":631
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         # cmps[0] += 1
 *                         # printf("right1\n")
 */
            goto __pyx_L48;
          }

          /* "debugblock/new_topk_sim_join.pyx":700
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
          /*else*/ {
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":701
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:
 */
              __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_2) {

                /* "debugblock/new_topk_sim_join.pyx":702
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     # cmps[2] += 1
 */
                __pyx_v_value = (((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) & __pyx_v_COUNT);

                /* "debugblock/new_topk_sim_join.pyx":703
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # cmps[2] += 1
 *                                     overlap = value
 */
                __pyx_t_2 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_2) {

                  /* "debugblock/new_topk_sim_join.pyx":705
 *                                 if value == prefix_match_max_size:
 *                                     # cmps[2] += 1
 *                                     overlap = value             # <<<<<<<<<<<<<<
 *                                     reuse_info = ReuseInfo(0)
 *                                     # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 */
                  __pyx_v_overlap = __pyx_v_value;

                  /* "debugblock/new_topk_sim_join.pyx":706
 *                                     # cmps[2] += 1
 *                                     overlap = value
 *                                     reuse_info = ReuseInfo(0)             # <<<<<<<<<<<<<<
 *                                     # new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                     #                       lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 */
                  __pyx_v_reuse_info = ReuseInfo(0);

                  /* "debugblock/new_topk_sim_join.pyx":721
 *                                     #         reuse_info.map[p] = 1
 * 
 *                                     new_reuse_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 */
                  __pyx_f_10debugblock_17new_topk_sim_join_new_reuse_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), (__pyx_v_lindex_vector[__pyx_v_l_rec_idx]), (__pyx_v_rindex_vector[__pyx_v_r_rec_idx]), 0, 0, __pyx_v_reuse_info, __pyx_v_offset_of_field_num);

                  /* "debugblock/new_topk_sim_join.pyx":724
 *                                                           lindex_vector[l_rec_idx], rindex_vector[r_rec_idx],
 *                                                           0, 0, reuse_info, offset_of_field_num)
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     overlap = reuse_info.overlap
 */
                  (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                  /* "debugblock/new_topk_sim_join.pyx":726
 *                                     active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                     overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 */
                  __pyx_t_4 = __pyx_v_reuse_info.overlap;
                  __pyx_v_overlap = __pyx_t_4;

                  /* "debugblock/new_topk_sim_join.pyx":727
 * 
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 */
                  __pyx_t_11 = (__pyx_v_overlap * 1.0);
                  __pyx_t_4 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                  if (unlikely(__pyx_t_4 == 0)) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  }
                  __pyx_v_sim = (__pyx_t_11 / __pyx_t_4);

                  /* "debugblock/new_topk_sim_join.pyx":728
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                  __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                  if (__pyx_t_2) {

                    /* "debugblock/new_topk_sim_join.pyx":729
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                    if (__pyx_t_2) {

                      /* "debugblock/new_topk_sim_join.pyx":730
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 */
                      __pyx_v_topk_heap.pop();

                      /* "debugblock/new_topk_sim_join.pyx":731
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                      /* "debugblock/new_topk_sim_join.pyx":729
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:
 *                                         if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                             topk_heap.pop()
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":728
 *                                     overlap = reuse_info.overlap
 *                                     sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                     if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                         if topk_heap.top().sim < sim:
 *                                             topk_heap.pop()
 */
                    goto __pyx_L59;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":733
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                     else:
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                     if compared_set.count(l_rec_idx):
 */
                  /*else*/ {
                    __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                  }
                  __pyx_L59:;

                  /* "debugblock/new_topk_sim_join.pyx":735
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "debugblock/new_topk_sim_join.pyx":736
 * 
 *                                     if compared_set.count(l_rec_idx):
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                    /* "debugblock/new_topk_sim_join.pyx":735
 *                                         topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                     if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 */
                    goto __pyx_L61;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":738
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_8 = std::unordered_set<int> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_8;

                    /* "debugblock/new_topk_sim_join.pyx":739
 *                                     else:
 *                                         compared_set[l_rec_idx] = uset[int]()
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     if reuse_set.count(l_rec_idx):
 */
                    (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                  }
                  __pyx_L61:;

                  /* "debugblock/new_topk_sim_join.pyx":741
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {

                    /* "debugblock/new_topk_sim_join.pyx":742
 * 
 *                                     if reuse_set.count(l_rec_idx):
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;

                    /* "debugblock/new_topk_sim_join.pyx":741
 *                                         compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     if reuse_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 */
                    goto __pyx_L62;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":744
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()             # <<<<<<<<<<<<<<
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 */
                  /*else*/ {
                    try {
                      __pyx_t_9 = std::unordered_map<int,ReuseInfo> ();
                    } catch(...) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      __Pyx_CppExn2PyErr();
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    (__pyx_v_reuse_set[__pyx_v_l_rec_idx]) = __pyx_t_9;

                    /* "debugblock/new_topk_sim_join.pyx":745
 *                                     else:
 *                                         reuse_set[l_rec_idx] = umap[int, ReuseInfo]()
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                    ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_reuse_info;
                  }
                  __pyx_L62:;

                  /* "debugblock/new_topk_sim_join.pyx":747
 *                                         reuse_set[l_rec_idx][r_rec_idx] = reuse_info
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "debugblock/new_topk_sim_join.pyx":703
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # cmps[2] += 1
 *                                     overlap = value
 */
                  goto __pyx_L58;
                }

                /* "debugblock/new_topk_sim_join.pyx":749
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 */
                /*else*/ {
                  __pyx_v_bits = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                  /* "debugblock/new_topk_sim_join.pyx":750
 *                                 else:
 *                                     bits = active_dict[l_rec_idx][r_rec_idx]
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 */
                  __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                  /* "debugblock/new_topk_sim_join.pyx":752
 *                                     field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))             # <<<<<<<<<<<<<<
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC
 *                             else:
 */
                  __pyx_v_bits = (__pyx_v_bits | (__pyx_v_field_pair << (((__pyx_v_COUNT & __pyx_v_bits) * __pyx_v_FIELD_BITS) + __pyx_v_COUNT_BITS)));

                  /* "debugblock/new_topk_sim_join.pyx":753
 *                                                  rindex_vector[r_rec_idx][r_tok_idx]
 *                                     bits |= (field_pair << ((COUNT & bits) * FIELD_BITS + COUNT_BITS))
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC             # <<<<<<<<<<<<<<
 *                             else:
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 */
                  ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = (__pyx_v_bits + __pyx_v_INC);
                }
                __pyx_L58:;

                /* "debugblock/new_topk_sim_join.pyx":701
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 *                                 if value == prefix_match_max_size:
 */
                goto __pyx_L57;
              }

              /* "debugblock/new_topk_sim_join.pyx":755
 *                                     active_dict[l_rec_idx][r_rec_idx] = bits + INC
 *                             else:
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 */
              /*else*/ {

                /* "debugblock/new_topk_sim_join.pyx":756
 *                             else:
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 */
                __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

                /* "debugblock/new_topk_sim_join.pyx":757
 *                                 field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 *                         else:
 */
                __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

                /* "debugblock/new_topk_sim_join.pyx":758
 *                                              rindex_vector[r_rec_idx][r_tok_idx]
 *                                 bits = (field_pair << COUNT_BITS) + INC
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                         else:
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 */
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
              }
              __pyx_L57:;

              /* "debugblock/new_topk_sim_join.pyx":700
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx] & COUNT
 */
              goto __pyx_L56;
            }

            /* "debugblock/new_topk_sim_join.pyx":760
 *                                 active_dict[l_rec_idx][r_rec_idx] = bits
 *                         else:
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \             # <<<<<<<<<<<<<<
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             bits = (field_pair << COUNT_BITS) + INC
 */
            /*else*/ {

              /* "debugblock/new_topk_sim_join.pyx":761
 *                         else:
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                          rindex_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 */
              __pyx_v_field_pair = ((((__pyx_v_lindex_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]) * __pyx_v_offset_of_field_num) + ((__pyx_v_rindex_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]));

              /* "debugblock/new_topk_sim_join.pyx":762
 *                             field_pair = lindex_vector[l_rec_idx][l_tok_idx] * offset_of_field_num + \
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             bits = (field_pair << COUNT_BITS) + INC             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 *                             active_dict[l_rec_idx][r_rec_idx] = bits
 */
              __pyx_v_bits = ((__pyx_v_field_pair << __pyx_v_COUNT_BITS) + __pyx_v_INC);

              /* "debugblock/new_topk_sim_join.pyx":763
 *                                          rindex_vector[r_rec_idx][r_tok_idx]
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = bits
 *                     # printf("pass check\n")
 */
              try {
                __pyx_t_10 = std::unordered_map<int,uint64_t> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_10;

              /* "debugblock/new_topk_sim_join.pyx":764
 *                             bits = (field_pair << COUNT_BITS) + INC
 *                             active_dict[l_rec_idx] = umap[int, uint64_t]()
 *                             active_dict[l_rec_idx][r_rec_idx] = bits             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = __pyx_v_bits;
            }
            __pyx_L56:;
          }
          __pyx_L48:;

          /* "debugblock/new_topk_sim_join.pyx":767
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_3 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_3) {
          } else {
            __pyx_t_2 = __pyx_t_3;
            goto __pyx_L64_bool_binop_done;
          }

          /* "debugblock/new_topk_sim_join.pyx":768
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_3 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L64_bool_binop_done:;

          /* "debugblock/new_topk_sim_join.pyx":767
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":769
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "debugblock/new_topk_sim_join.pyx":770
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_2 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_2) {

              /* "debugblock/new_topk_sim_join.pyx":771
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "debugblock/new_topk_sim_join.pyx":770
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":767
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":620
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L40_continue:;
        }

        /* "debugblock/new_topk_sim_join.pyx":618
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":777
 *                             # printf("%d %d %d\n", cmps[0], cmps[1],cmps[2])
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) < __pyx_v_r_len) != 0);
      if (__pyx_t_2) {

        /* "debugblock/new_topk_sim_join.pyx":778
 * 
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 */
        __pyx_t_11 = 1.0;
        __pyx_t_7 = (((__pyx_v_r_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_r_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_12 = (1.0 - (__pyx_t_7 / __pyx_v_r_len));
        if (((__pyx_t_11 < __pyx_t_12) != 0)) {
          __pyx_t_7 = __pyx_t_11;
        } else {
          __pyx_t_7 = __pyx_t_12;
        }
        __pyx_v_threshold = __pyx_t_7;

        /* "debugblock/new_topk_sim_join.pyx":779
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_r_rec_idx, (__pyx_v_r_tok_idx + 1)));

        /* "debugblock/new_topk_sim_join.pyx":777
 *                             # printf("%d %d %d\n", cmps[0], cmps[1],cmps[2])
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":781
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_2 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_2) {

        /* "debugblock/new_topk_sim_join.pyx":782
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 *         # printf("finish\n")
 */
        try {
          __pyx_t_13 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_13;

        /* "debugblock/new_topk_sim_join.pyx":781
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":783
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 *         # printf("finish\n")
 * 
 */
      try {
        __pyx_t_6 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_6);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "debugblock/new_topk_sim_join.pyx":788
 *     # printf("checkpoint3\n")
 * 
 *     cdef double bound = 1e-6             # <<<<<<<<<<<<<<
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold
 */
  __pyx_v_bound = 1e-6;

  /* "debugblock/new_topk_sim_join.pyx":789
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  __pyx_t_2 = ((__pyx_v_prefix_events.size() > 0) != 0);
  if (__pyx_t_2) {

    /* "debugblock/new_topk_sim_join.pyx":790
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, umap[int, uint64_t]] p1
 */
    __pyx_t_7 = __pyx_v_prefix_events.top().threshold;
    __pyx_v_bound = __pyx_t_7;

    /* "debugblock/new_topk_sim_join.pyx":789
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  }

  /* "debugblock/new_topk_sim_join.pyx":794
 *     cdef pair[int, umap[int, uint64_t]] p1
 *     cdef pair[int, uint64_t] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  __pyx_t_14 = __pyx_v_active_dict.begin();
  for (;;) {
    if (!(__pyx_t_14 != __pyx_v_active_dict.end())) break;
    __pyx_t_15 = *__pyx_t_14;
    ++__pyx_t_14;
    __pyx_v_p1 = __pyx_t_15;

    /* "debugblock/new_topk_sim_join.pyx":795
 *     cdef pair[int, uint64_t] p2
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first             # <<<<<<<<<<<<<<
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 */
    __pyx_t_4 = __pyx_v_p1.first;
    __pyx_v_l_rec_idx = __pyx_t_4;

    /* "debugblock/new_topk_sim_join.pyx":796
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    __pyx_t_17 = &__pyx_v_p1.second;
    __pyx_t_16 = __pyx_t_17->begin();
    for (;;) {
      if (!(__pyx_t_16 != __pyx_t_17->end())) break;
      __pyx_t_18 = *__pyx_t_16;
      ++__pyx_t_16;
      __pyx_v_p2 = __pyx_t_18;

      /* "debugblock/new_topk_sim_join.pyx":797
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 */
      __pyx_t_1 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() < (__pyx_t_1 / __pyx_v_bound)) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L75_bool_binop_done;
      }

      /* "debugblock/new_topk_sim_join.pyx":798
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:             # <<<<<<<<<<<<<<
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 */
      __pyx_t_1 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = (((__pyx_v_rtoken_vector[__pyx_v_p2.first]).size() < (__pyx_t_1 / __pyx_v_bound)) != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L75_bool_binop_done:;

      /* "debugblock/new_topk_sim_join.pyx":797
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 */
      if (__pyx_t_2) {

        /* "debugblock/new_topk_sim_join.pyx":799
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT             # <<<<<<<<<<<<<<
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 */
        __pyx_v_value = (__pyx_v_p2.second & __pyx_v_COUNT);

        /* "debugblock/new_topk_sim_join.pyx":800
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)             # <<<<<<<<<<<<<<
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 */
        __pyx_t_7 = (__pyx_v_value * 1.0);
        __pyx_t_19 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() + (__pyx_v_rtoken_vector[__pyx_v_p2.first]).size()) - __pyx_v_value);
        if (unlikely(__pyx_t_19 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sim = (__pyx_t_7 / __pyx_t_19);

        /* "debugblock/new_topk_sim_join.pyx":801
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
        __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
        if (__pyx_t_2) {

          /* "debugblock/new_topk_sim_join.pyx":802
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          __pyx_t_2 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
          if (__pyx_t_2) {

            /* "debugblock/new_topk_sim_join.pyx":803
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 */
            __pyx_v_topk_heap.pop();

            /* "debugblock/new_topk_sim_join.pyx":804
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));

            /* "debugblock/new_topk_sim_join.pyx":802
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":801
 *                 value = p2.second & COUNT
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
          goto __pyx_L77;
        }

        /* "debugblock/new_topk_sim_join.pyx":806
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));
        }
        __pyx_L77:;

        /* "debugblock/new_topk_sim_join.pyx":797
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second & COUNT
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":796
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    }

    /* "debugblock/new_topk_sim_join.pyx":794
 *     cdef pair[int, umap[int, uint64_t]] p1
 *     cdef pair[int, uint64_t] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  }

  /* "debugblock/new_topk_sim_join.pyx":809
 * 
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint4\n")
 * 
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "debugblock/new_topk_sim_join.pyx":812
 *     # printf("checkpoint4\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":380
 * 
 * 
 * cdef void new_topk_sim_join_record_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                         const vector[vector[int]]& rtoken_vector,
 *                                         const vector[vector[int]]& lindex_vector,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.new_topk_sim_join.new_topk_sim_join_record_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "debugblock/new_topk_sim_join.pyx":815
 * 
 * 
 * cdef void new_reuse_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                 const vector[int]& lindex_list, const vector[int]& rindex_list,
 *                                 const int l_tok_idx, const int r_tok_idx,
 */

static void __pyx_f_10debugblock_17new_topk_sim_join_new_reuse_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list, std::vector<int>  const &__pyx_v_lindex_list, std::vector<int>  const &__pyx_v_rindex_list, int const __pyx_v_l_tok_idx, int const __pyx_v_r_tok_idx, ReuseInfo &__pyx_v_reuse_info, int const __pyx_v_offset_of_field_num) {
  int __pyx_v_value;
  uint32_t __pyx_v_i;
  std::unordered_map<int,int>  __pyx_v_rmap;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "debugblock/new_topk_sim_join.pyx":823
 * 
 *     cdef umap[int, int] rmap
 *     for i in xrange(rtoken_list.size() - r_tok_idx):             # <<<<<<<<<<<<<<
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]
 * 
 */
  __pyx_t_1 = (__pyx_v_rtoken_list.size() - __pyx_v_r_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":824
 *     cdef umap[int, int] rmap
 *     for i in xrange(rtoken_list.size() - r_tok_idx):
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 */
    (__pyx_v_rmap[(__pyx_v_rtoken_list[(__pyx_v_i + __pyx_v_r_tok_idx)])]) = (__pyx_v_rindex_list[(__pyx_v_i + __pyx_v_r_tok_idx)]);
  }

  /* "debugblock/new_topk_sim_join.pyx":826
 *         rmap[rtoken_list[i + r_tok_idx]] = rindex_list[i + r_tok_idx]
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):             # <<<<<<<<<<<<<<
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1
 */
  __pyx_t_1 = (__pyx_v_ltoken_list.size() - __pyx_v_l_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":827
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 */
    __pyx_t_3 = (__pyx_v_rmap.count((__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])) != 0);
    if (__pyx_t_3) {

      /* "debugblock/new_topk_sim_join.pyx":828
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1             # <<<<<<<<<<<<<<
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):
 */
      __pyx_v_reuse_info.overlap = (__pyx_v_reuse_info.overlap + 1);

      /* "debugblock/new_topk_sim_join.pyx":829
 *         if rmap.count(ltoken_list[i + l_tok_idx]):
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]             # <<<<<<<<<<<<<<
 *             if reuse_info.map.count(value):
 *                 reuse_info.map[value] += 1
 */
      __pyx_v_value = (((__pyx_v_lindex_list[(__pyx_v_i + __pyx_v_l_tok_idx)]) * __pyx_v_offset_of_field_num) + (__pyx_v_rmap[(__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])]));

      /* "debugblock/new_topk_sim_join.pyx":830
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):             # <<<<<<<<<<<<<<
 *                 reuse_info.map[value] += 1
 *             else:
 */
      __pyx_t_3 = (__pyx_v_reuse_info.map.count(__pyx_v_value) != 0);
      if (__pyx_t_3) {

        /* "debugblock/new_topk_sim_join.pyx":831
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):
 *                 reuse_info.map[value] += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 reuse_info.map[value] = 1
 */
        __pyx_t_4 = __pyx_v_value;
        (__pyx_v_reuse_info.map[__pyx_t_4]) = ((__pyx_v_reuse_info.map[__pyx_t_4]) + 1);

        /* "debugblock/new_topk_sim_join.pyx":830
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 *             if reuse_info.map.count(value):             # <<<<<<<<<<<<<<
 *                 reuse_info.map[value] += 1
 *             else:
 */
        goto __pyx_L8;
      }

      /* "debugblock/new_topk_sim_join.pyx":833
 *                 reuse_info.map[value] += 1
 *             else:
 *                 reuse_info.map[value] = 1             # <<<<<<<<<<<<<<
 * 
 *     return
 */
      /*else*/ {
        (__pyx_v_reuse_info.map[__pyx_v_value]) = 1;
      }
      __pyx_L8:;

      /* "debugblock/new_topk_sim_join.pyx":827
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rmap.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             reuse_info.overlap += 1
 *             value = lindex_list[i + l_tok_idx] * offset_of_field_num + rmap[ltoken_list[i + l_tok_idx]]
 */
    }
  }

  /* "debugblock/new_topk_sim_join.pyx":835
 *                 reuse_info.map[value] = 1
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":815
 * 
 * 
 * cdef void new_reuse_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                                 const vector[int]& lindex_list, const vector[int]& rindex_list,
 *                                 const int l_tok_idx, const int r_tok_idx,
 */

  /* function exit code */
  __pyx_L0:;
}

/* "debugblock/new_topk_sim_join.pyx":838
 * 
 * 
 * cdef void init_shift_array(const int num, const int field_bits, const int count_bits,             # <<<<<<<<<<<<<<
 *                            uint64_t* shift_array) nogil:
 *     cdef int i, j
 */

static void __pyx_f_10debugblock_17new_topk_sim_join_init_shift_array(int const __pyx_v_num, int const __pyx_v_field_bits, int const __pyx_v_count_bits, uint64_t *__pyx_v_shift_array) {
  int __pyx_v_i;
  CYTHON_UNUSED int __pyx_v_j;
  uint64_t __pyx_v_base;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "debugblock/new_topk_sim_join.pyx":841
 *                            uint64_t* shift_array) nogil:
 *     cdef int i, j
 *     cdef uint64_t base = 0             # <<<<<<<<<<<<<<
 *     for i in xrange(field_bits):
 *         base = base * 2 + 1
 */
  __pyx_v_base = 0;

  /* "debugblock/new_topk_sim_join.pyx":842
 *     cdef int i, j
 *     cdef uint64_t base = 0
 *     for i in xrange(field_bits):             # <<<<<<<<<<<<<<
 *         base = base * 2 + 1
 *     for i in xrange(count_bits):
 */
  __pyx_t_1 = __pyx_v_field_bits;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":843
 *     cdef uint64_t base = 0
 *     for i in xrange(field_bits):
 *         base = base * 2 + 1             # <<<<<<<<<<<<<<
 *     for i in xrange(count_bits):
 *         base <<= 1
 */
    __pyx_v_base = ((__pyx_v_base * 2) + 1);
  }

  /* "debugblock/new_topk_sim_join.pyx":844
 *     for i in xrange(field_bits):
 *         base = base * 2 + 1
 *     for i in xrange(count_bits):             # <<<<<<<<<<<<<<
 *         base <<= 1
 * 
 */
  __pyx_t_1 = __pyx_v_count_bits;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":845
 *         base = base * 2 + 1
 *     for i in xrange(count_bits):
 *         base <<= 1             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(num):
 */
    __pyx_v_base = (__pyx_v_base << 1);
  }

  /* "debugblock/new_topk_sim_join.pyx":847
 *         base <<= 1
 * 
 *     for i in xrange(num):             # <<<<<<<<<<<<<<
 *         shift_array[i] = base
 *         for j in xrange(field_bits):
 */
  __pyx_t_1 = __pyx_v_num;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":848
 * 
 *     for i in xrange(num):
 *         shift_array[i] = base             # <<<<<<<<<<<<<<
 *         for j in xrange(field_bits):
 *             base <<= 1
 */
    (__pyx_v_shift_array[__pyx_v_i]) = __pyx_v_base;

    /* "debugblock/new_topk_sim_join.pyx":849
 *     for i in xrange(num):
 *         shift_array[i] = base
 *         for j in xrange(field_bits):             # <<<<<<<<<<<<<<
 *             base <<= 1
 *     return
 */
    __pyx_t_3 = __pyx_v_field_bits;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "debugblock/new_topk_sim_join.pyx":850
 *         shift_array[i] = base
 *         for j in xrange(field_bits):
 *             base <<= 1             # <<<<<<<<<<<<<<
 *     return
 * 
 */
      __pyx_v_base = (__pyx_v_base << 1);
    }
  }

  /* "debugblock/new_topk_sim_join.pyx":851
 *         for j in xrange(field_bits):
 *             base <<= 1
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":838
 * 
 * 
 * cdef void init_shift_array(const int num, const int field_bits, const int count_bits,             # <<<<<<<<<<<<<<
 *                            uint64_t* shift_array) nogil:
 *     cdef int i, j
 */

  /* function exit code */
  __pyx_L0:;
}

/* "debugblock/new_topk_sim_join.pyx":857
 * ####################################################################################################
 * # For new topk sim join. Only reuse pre-calculated info but don't record.
 * cdef heap[TopPair] new_topk_sim_join_reuse(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

static std::priority_queue<TopPair>  __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_reuse(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_set<int>  &__pyx_v_remained_fields, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  std::priority_queue<PrefixEvent>  __pyx_v_prefix_events;
  std::priority_queue<TopPair>  __pyx_v_topk_heap;
  std::priority_queue<TopPair>  __pyx_r;

  /* "debugblock/new_topk_sim_join.pyx":864
 *                                            const int output_size) nogil:
 *     cdef heap[PrefixEvent] prefix_events
 *     new_generate_prefix_events(ltoken_vector, rtoken_vector, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     cdef heap[TopPair] topk_heap
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_prefix_events);

  /* "debugblock/new_topk_sim_join.pyx":867
 * 
 *     cdef heap[TopPair] topk_heap
 *     new_topk_sim_join_reuse_impl(ltoken_vector, rtoken_vector, remained_fields,             # <<<<<<<<<<<<<<
 *                                  cand_set, reuse_set, prefix_events, topk_heap,
 *                                  offset_of_field_num, prefix_match_max_size, output_size)
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_reuse_impl(__pyx_v_ltoken_vector, __pyx_v_rtoken_vector, __pyx_v_remained_fields, __pyx_v_cand_set, __pyx_v_reuse_set, __pyx_v_prefix_events, __pyx_v_topk_heap, __pyx_v_offset_of_field_num, __pyx_v_prefix_match_max_size, __pyx_v_output_size);

  /* "debugblock/new_topk_sim_join.pyx":871
 *                                  offset_of_field_num, prefix_match_max_size, output_size)
 * 
 *     return topk_heap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_topk_heap;
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":857
 * ####################################################################################################
 * # For new topk sim join. Only reuse pre-calculated info but don't record.
 * cdef heap[TopPair] new_topk_sim_join_reuse(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                            const vector[vector[int]]& rtoken_vector,
 *                                            uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "debugblock/new_topk_sim_join.pyx":874
 * 
 * 
 * cdef void new_topk_sim_join_reuse_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

static void __pyx_f_10debugblock_17new_topk_sim_join_new_topk_sim_join_reuse_impl(std::vector<std::vector<int> >  const &__pyx_v_ltoken_vector, std::vector<std::vector<int> >  const &__pyx_v_rtoken_vector, std::unordered_set<int>  &__pyx_v_remained_fields, std::unordered_map<int,std::unordered_set<int> >  &__pyx_v_cand_set, std::unordered_map<int,std::unordered_map<int,ReuseInfo> >  &__pyx_v_reuse_set, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events, std::priority_queue<TopPair>  &__pyx_v_topk_heap, int const __pyx_v_offset_of_field_num, int const __pyx_v_prefix_match_max_size, int const __pyx_v_output_size) {
  uint64_t __pyx_v_total_compared_pairs;
  std::unordered_set<uint64_t>  __pyx_v_total_compared_pairs_set;
  std::unordered_map<int,std::unordered_set<int> >  __pyx_v_compared_set;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_l_inverted_index;
  std::unordered_map<int,std::set<std::pair<int,int> > >  __pyx_v_r_inverted_index;
  std::unordered_map<int,std::unordered_map<int,short> >  __pyx_v_active_dict;
  std::set<std::pair<int,int> >  __pyx_v_l_records;
  std::set<std::pair<int,int> >  __pyx_v_r_records;
  std::pair<int,int>  __pyx_v_l_rec_tuple;
  std::pair<int,int>  __pyx_v_r_rec_tuple;
  PrefixEvent __pyx_v_event;
  int __pyx_v_table_indicator;
  int __pyx_v_l_rec_idx;
  int __pyx_v_l_tok_idx;
  int __pyx_v_r_rec_idx;
  int __pyx_v_r_tok_idx;
  int __pyx_v_l_len;
  int __pyx_v_r_len;
  int __pyx_v_token;
  int __pyx_v_overlap;
  ReuseInfo __pyx_v_reuse_info;
  double __pyx_v_sim;
  double __pyx_v_threshold;
  uint64_t __pyx_v_value;
  int __pyx_v_denom;
  int __pyx_v_lfield;
  int __pyx_v_rfield;
  std::pair<int,int>  __pyx_v_field_pair;
  int __pyx_v_reuse_count;
  double __pyx_v_bound;
  std::pair<int,std::unordered_map<int,short> >  __pyx_v_p1;
  std::pair<int,short>  __pyx_v_p2;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::set<std::pair<int,int> > ::iterator __pyx_t_4;
  std::pair<int,int>  __pyx_t_5;
  double __pyx_t_6;
  std::unordered_map<int,int> ::iterator __pyx_t_7;
  std::unordered_map<int,int>  *__pyx_t_8;
  std::pair<int,int>  __pyx_t_9;
  std::unordered_set<int>  __pyx_t_10;
  int __pyx_t_11;
  std::unordered_map<int,short>  __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  std::set<std::pair<int,int> >  __pyx_t_15;
  std::unordered_map<int,std::unordered_map<int,short> > ::iterator __pyx_t_16;
  std::pair<int,std::unordered_map<int,short> >  __pyx_t_17;
  std::unordered_map<int,short> ::iterator __pyx_t_18;
  std::unordered_map<int,short>  *__pyx_t_19;
  std::pair<int,short>  __pyx_t_20;
  long __pyx_t_21;
  short __pyx_t_22;
  uint64_t __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "debugblock/new_topk_sim_join.pyx":882
 *                                        const int output_size) nogil:
 *     # printf("checkpoint1\n")
 *     cdef uint64_t total_compared_pairs = 0             # <<<<<<<<<<<<<<
 *     cdef uset[uint64_t] total_compared_pairs_set
 *     cdef umap[int, uset[int]] compared_set
 */
  __pyx_v_total_compared_pairs = 0;

  /* "debugblock/new_topk_sim_join.pyx":900
 *     cdef pair[int, int] field_pair
 * 
 *     cdef int reuse_count = 0             # <<<<<<<<<<<<<<
 * 
 *     # printf("checkpoint2\n")
 */
  __pyx_v_reuse_count = 0;

  /* "debugblock/new_topk_sim_join.pyx":904
 *     # printf("checkpoint2\n")
 * 
 *     while prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
    if (!__pyx_t_1) break;

    /* "debugblock/new_topk_sim_join.pyx":905
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    __pyx_t_2 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_topk_heap.top().sim >= __pyx_v_prefix_events.top().threshold) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "debugblock/new_topk_sim_join.pyx":906
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break             # <<<<<<<<<<<<<<
 *         event = prefix_events.top()
 *         prefix_events.pop()
 */
      goto __pyx_L4_break;

      /* "debugblock/new_topk_sim_join.pyx":905
 * 
 *     while prefix_events.size() > 0:
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:             # <<<<<<<<<<<<<<
 *             break
 *         event = prefix_events.top()
 */
    }

    /* "debugblock/new_topk_sim_join.pyx":907
 *         if topk_heap.size() == output_size and topk_heap.top().sim >= prefix_events.top().threshold:
 *             break
 *         event = prefix_events.top()             # <<<<<<<<<<<<<<
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator
 */
    __pyx_v_event = __pyx_v_prefix_events.top();

    /* "debugblock/new_topk_sim_join.pyx":908
 *             break
 *         event = prefix_events.top()
 *         prefix_events.pop()             # <<<<<<<<<<<<<<
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 */
    __pyx_v_prefix_events.pop();

    /* "debugblock/new_topk_sim_join.pyx":909
 *         event = prefix_events.top()
 *         prefix_events.pop()
 *         table_indicator = event.table_indicator             # <<<<<<<<<<<<<<
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 */
    __pyx_t_3 = __pyx_v_event.table_indicator;
    __pyx_v_table_indicator = __pyx_t_3;

    /* "debugblock/new_topk_sim_join.pyx":911
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
    __pyx_t_1 = ((__pyx_v_table_indicator == 0) != 0);
    if (__pyx_t_1) {

      /* "debugblock/new_topk_sim_join.pyx":912
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 */
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_l_rec_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":913
 *         if table_indicator == 0:
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_l_tok_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":914
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]             # <<<<<<<<<<<<<<
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx])[__pyx_v_l_tok_idx]);

      /* "debugblock/new_topk_sim_join.pyx":915
 *             l_tok_idx = event.tok_idx
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 */
      __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

      /* "debugblock/new_topk_sim_join.pyx":916
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      __pyx_t_1 = (__pyx_v_r_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":917
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 */
        __pyx_v_r_records = (__pyx_v_r_inverted_index[__pyx_v_token]);

        /* "debugblock/new_topk_sim_join.pyx":918
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_r_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_r_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_r_rec_tuple = __pyx_t_5;

          /* "debugblock/new_topk_sim_join.pyx":919
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.first;
          __pyx_v_r_rec_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":920
 *                 for r_rec_tuple in r_records:
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_r_rec_tuple.second;
          __pyx_v_r_tok_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":921
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 *                     r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

          /* "debugblock/new_topk_sim_join.pyx":923
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L13_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L13_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":924
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L10_continue;

            /* "debugblock/new_topk_sim_join.pyx":923
 *                     r_len = rtoken_vector[r_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":926
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":927
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 */
            goto __pyx_L10_continue;

            /* "debugblock/new_topk_sim_join.pyx":926
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":929
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
          __pyx_t_2 = (((__pyx_v_l_tok_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_tok_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":930
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "debugblock/new_topk_sim_join.pyx":931
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L22_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L22_bool_binop_done:;
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":932
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "debugblock/new_topk_sim_join.pyx":933
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":931
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":939
 *                         #         printf("%d %d %d\n", overlap, l_tok_idx, r_tok_idx)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_6 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

            /* "debugblock/new_topk_sim_join.pyx":940
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":941
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":942
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":943
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":941
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":940
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L24;
            }

            /* "debugblock/new_topk_sim_join.pyx":945
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L24:;

            /* "debugblock/new_topk_sim_join.pyx":947
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     # elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                     #     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":929
 *                         continue
 * 
 *                     if l_tok_idx + 1 == l_len or r_tok_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L18;
          }

          /* "debugblock/new_topk_sim_join.pyx":1014
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":1016
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":1018
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "debugblock/new_topk_sim_join.pyx":1019
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "debugblock/new_topk_sim_join.pyx":1021
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {
                  } else {
                    __pyx_t_1 = __pyx_t_2;
                    goto __pyx_L30_bool_binop_done;
                  }
                  __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                  __pyx_t_1 = __pyx_t_2;
                  __pyx_L30_bool_binop_done:;
                  if (__pyx_t_1) {

                    /* "debugblock/new_topk_sim_join.pyx":1022
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_count += 1             # <<<<<<<<<<<<<<
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 */
                    __pyx_v_reuse_count = (__pyx_v_reuse_count + 1);

                    /* "debugblock/new_topk_sim_join.pyx":1023
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap
 */
                    __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                    /* "debugblock/new_topk_sim_join.pyx":1024
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                         denom = l_len + r_len - overlap
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
                    __pyx_t_3 = __pyx_v_reuse_info.overlap;
                    __pyx_v_overlap = __pyx_t_3;

                    /* "debugblock/new_topk_sim_join.pyx":1025
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 *                                         #     printf("left3\n")
 */
                    __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

                    /* "debugblock/new_topk_sim_join.pyx":1032
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L33_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L33_bool_binop_done;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1033
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 */
                    __pyx_t_6 = (__pyx_v_overlap * 1.0);
                    if (unlikely(__pyx_v_denom == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_t_2 = (((__pyx_t_6 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L33_bool_binop_done:;

                    /* "debugblock/new_topk_sim_join.pyx":1032
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1034
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      __pyx_t_8 = &__pyx_v_reuse_info.map;
                      __pyx_t_7 = __pyx_t_8->begin();
                      for (;;) {
                        if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                        __pyx_t_9 = *__pyx_t_7;
                        ++__pyx_t_7;
                        __pyx_v_field_pair = __pyx_t_9;

                        /* "debugblock/new_topk_sim_join.pyx":1035
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "debugblock/new_topk_sim_join.pyx":1036
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "debugblock/new_topk_sim_join.pyx":1037
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                        if (!__pyx_t_2) {
                        } else {
                          __pyx_t_1 = __pyx_t_2;
                          goto __pyx_L39_bool_binop_done;
                        }
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                        __pyx_t_1 = __pyx_t_2;
                        __pyx_L39_bool_binop_done:;
                        if (__pyx_t_1) {

                          /* "debugblock/new_topk_sim_join.pyx":1038
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 */
                          __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                          /* "debugblock/new_topk_sim_join.pyx":1037
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        }

                        /* "debugblock/new_topk_sim_join.pyx":1034
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      }

                      /* "debugblock/new_topk_sim_join.pyx":1039
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 */
                      __pyx_t_6 = (__pyx_v_overlap * 1.0);
                      __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                      if (unlikely(__pyx_t_3 == 0)) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

                      /* "debugblock/new_topk_sim_join.pyx":1040
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                      if (__pyx_t_1) {

                        /* "debugblock/new_topk_sim_join.pyx":1041
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                        if (__pyx_t_1) {

                          /* "debugblock/new_topk_sim_join.pyx":1042
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 */
                          __pyx_v_topk_heap.pop();

                          /* "debugblock/new_topk_sim_join.pyx":1043
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                          /* "debugblock/new_topk_sim_join.pyx":1041
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        }

                        /* "debugblock/new_topk_sim_join.pyx":1040
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                        goto __pyx_L41;
                      }

                      /* "debugblock/new_topk_sim_join.pyx":1045
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                      /*else*/ {
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                      }
                      __pyx_L41:;

                      /* "debugblock/new_topk_sim_join.pyx":1032
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1047
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1048
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "debugblock/new_topk_sim_join.pyx":1047
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L43;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1050
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "debugblock/new_topk_sim_join.pyx":1051
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L43:;

                    /* "debugblock/new_topk_sim_join.pyx":1053
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                    __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L45_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L45_bool_binop_done:;
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1054
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     else:
 */
                      (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                      /* "debugblock/new_topk_sim_join.pyx":1053
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1021
 *                                 if value == prefix_match_max_size:
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
                    goto __pyx_L29;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":1058
 *                                     else:
 *                                         # overlap = value
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 */
                  /*else*/ {
                    __pyx_v_overlap = __pyx_f_10debugblock_17new_topk_sim_join_new_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), 0, 0);

                    /* "debugblock/new_topk_sim_join.pyx":1060
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                    (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                    /* "debugblock/new_topk_sim_join.pyx":1062
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 */
                    __pyx_t_6 = (__pyx_v_overlap * 1.0);
                    __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                    if (unlikely(__pyx_t_3 == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_v_sim = (__pyx_t_6 / __pyx_t_3);

                    /* "debugblock/new_topk_sim_join.pyx":1063
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1064
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                      if (__pyx_t_1) {

                        /* "debugblock/new_topk_sim_join.pyx":1065
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 */
                        __pyx_v_topk_heap.pop();

                        /* "debugblock/new_topk_sim_join.pyx":1066
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                        /* "debugblock/new_topk_sim_join.pyx":1064
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      }

                      /* "debugblock/new_topk_sim_join.pyx":1063
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                      goto __pyx_L47;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1068
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                    /*else*/ {
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                    }
                    __pyx_L47:;

                    /* "debugblock/new_topk_sim_join.pyx":1070
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1071
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "debugblock/new_topk_sim_join.pyx":1070
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L49;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1073
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "debugblock/new_topk_sim_join.pyx":1074
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L49:;
                  }
                  __pyx_L29:;

                  /* "debugblock/new_topk_sim_join.pyx":1076
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "debugblock/new_topk_sim_join.pyx":1019
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     # printf("left3.1.1.1\n")
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
                  goto __pyx_L28;
                }

                /* "debugblock/new_topk_sim_join.pyx":1078
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 # printf("left3.1.2\n")
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_11 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) + 1);
                }
                __pyx_L28:;

                /* "debugblock/new_topk_sim_join.pyx":1016
 *                         if active_dict.count(l_rec_idx):
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 # printf("left3.1.1\n")
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
                goto __pyx_L27;
              }

              /* "debugblock/new_topk_sim_join.pyx":1081
 *                             else:
 *                                 # printf("left3.1.2\n")
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L27:;

              /* "debugblock/new_topk_sim_join.pyx":1014
 *                     else:
 *                         # printf("left3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             # printf("left3.1\n")
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 */
              goto __pyx_L26;
            }

            /* "debugblock/new_topk_sim_join.pyx":1083
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_12 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_12;

              /* "debugblock/new_topk_sim_join.pyx":1084
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L26:;
          }
          __pyx_L18:;

          /* "debugblock/new_topk_sim_join.pyx":1087
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L51_bool_binop_done;
          }

          /* "debugblock/new_topk_sim_join.pyx":1088
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L51_bool_binop_done:;

          /* "debugblock/new_topk_sim_join.pyx":1087
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":1089
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "debugblock/new_topk_sim_join.pyx":1090
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":1091
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "debugblock/new_topk_sim_join.pyx":1090
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":1087
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":918
 *             if r_inverted_index.count(token):
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:             # <<<<<<<<<<<<<<
 *                     r_rec_idx = r_rec_tuple.first
 *                     r_tok_idx = r_rec_tuple.second
 */
          __pyx_L10_continue:;
        }

        /* "debugblock/new_topk_sim_join.pyx":916
 *             token = ltoken_vector[l_rec_idx][l_tok_idx]
 *             l_len = ltoken_vector[l_rec_idx].size()
 *             if r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_records = r_inverted_index[token]
 *                 for r_rec_tuple in r_records:
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":1096
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_l_tok_idx + 1) < __pyx_v_l_len) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":1097
 * 
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 */
        __pyx_t_6 = 1.0;
        __pyx_t_13 = (((__pyx_v_l_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_l_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_14 = (1.0 - (__pyx_t_13 / __pyx_v_l_len));
        if (((__pyx_t_6 < __pyx_t_14) != 0)) {
          __pyx_t_13 = __pyx_t_6;
        } else {
          __pyx_t_13 = __pyx_t_14;
        }
        __pyx_v_threshold = __pyx_t_13;

        /* "debugblock/new_topk_sim_join.pyx":1098
 *             if l_tok_idx + 1 < l_len:
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not l_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_l_rec_idx, (__pyx_v_l_tok_idx + 1)));

        /* "debugblock/new_topk_sim_join.pyx":1096
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if l_tok_idx + 1 < l_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (l_tok_idx + 1 - prefix_match_max_size) * 1.0 / l_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":1100
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_l_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":1101
 * 
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 */
        try {
          __pyx_t_15 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_l_inverted_index[__pyx_v_token]) = __pyx_t_15;

        /* "debugblock/new_topk_sim_join.pyx":1100
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, l_rec_idx, l_tok_idx + 1))
 * 
 *             if not l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":1102
 *             if not l_inverted_index.count(token):
 *                 l_inverted_index[token] = oset[pair[int, int]]()
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))             # <<<<<<<<<<<<<<
 *         else:
 *             r_rec_idx = event.rec_idx
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_l_rec_idx, __pyx_v_l_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_l_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "debugblock/new_topk_sim_join.pyx":911
 *         table_indicator = event.table_indicator
 *         # printf("%.6f %d %d %d\n", event.threshold, event.table_indicator, event.rec_idx, event.tok_idx)
 *         if table_indicator == 0:             # <<<<<<<<<<<<<<
 *             l_rec_idx = event.rec_idx
 *             l_tok_idx = event.tok_idx
 */
      goto __pyx_L8;
    }

    /* "debugblock/new_topk_sim_join.pyx":1104
 *             l_inverted_index[token].insert(pair[int, int](l_rec_idx, l_tok_idx))
 *         else:
 *             r_rec_idx = event.rec_idx             # <<<<<<<<<<<<<<
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_event.rec_idx;
      __pyx_v_r_rec_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":1105
 *         else:
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx             # <<<<<<<<<<<<<<
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 */
      __pyx_t_3 = __pyx_v_event.tok_idx;
      __pyx_v_r_tok_idx = __pyx_t_3;

      /* "debugblock/new_topk_sim_join.pyx":1106
 *             r_rec_idx = event.rec_idx
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]             # <<<<<<<<<<<<<<
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 */
      __pyx_v_token = ((__pyx_v_rtoken_vector[__pyx_v_r_rec_idx])[__pyx_v_r_tok_idx]);

      /* "debugblock/new_topk_sim_join.pyx":1107
 *             r_tok_idx = event.tok_idx
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()             # <<<<<<<<<<<<<<
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 */
      __pyx_v_r_len = (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]).size();

      /* "debugblock/new_topk_sim_join.pyx":1108
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      __pyx_t_1 = (__pyx_v_l_inverted_index.count(__pyx_v_token) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":1109
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]             # <<<<<<<<<<<<<<
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 */
        __pyx_v_l_records = (__pyx_v_l_inverted_index[__pyx_v_token]);

        /* "debugblock/new_topk_sim_join.pyx":1110
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
        __pyx_t_4 = __pyx_v_l_records.begin();
        for (;;) {
          if (!(__pyx_t_4 != __pyx_v_l_records.end())) break;
          __pyx_t_5 = *__pyx_t_4;
          ++__pyx_t_4;
          __pyx_v_l_rec_tuple = __pyx_t_5;

          /* "debugblock/new_topk_sim_join.pyx":1111
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first             # <<<<<<<<<<<<<<
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.first;
          __pyx_v_l_rec_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":1112
 *                 for l_rec_tuple in l_records:
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second             # <<<<<<<<<<<<<<
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 */
          __pyx_t_3 = __pyx_v_l_rec_tuple.second;
          __pyx_v_l_tok_idx = __pyx_t_3;

          /* "debugblock/new_topk_sim_join.pyx":1113
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 *                     l_len = ltoken_vector[l_rec_idx].size()             # <<<<<<<<<<<<<<
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 */
          __pyx_v_l_len = (__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size();

          /* "debugblock/new_topk_sim_join.pyx":1115
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_cand_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L60_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_cand_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L60_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":1116
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L57_continue;

            /* "debugblock/new_topk_sim_join.pyx":1115
 *                     l_len = ltoken_vector[l_rec_idx].size()
 * 
 *                     if cand_set.count(l_rec_idx) and cand_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":1118
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_2 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L63_bool_binop_done;
          }
          __pyx_t_2 = ((__pyx_v_compared_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L63_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":1119
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 */
            goto __pyx_L57_continue;

            /* "debugblock/new_topk_sim_join.pyx":1118
 *                         continue
 * 
 *                     if compared_set.count(l_rec_idx) and compared_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":1121
 *                         continue
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
          __pyx_t_2 = (((__pyx_v_l_rec_idx + 1) == __pyx_v_l_len) != 0);
          if (!__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L66_bool_binop_done;
          }
          __pyx_t_2 = (((__pyx_v_r_rec_idx + 1) == __pyx_v_r_len) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L66_bool_binop_done:;
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":1122
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 *                         overlap = 1             # <<<<<<<<<<<<<<
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 */
            __pyx_v_overlap = 1;

            /* "debugblock/new_topk_sim_join.pyx":1123
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L69_bool_binop_done;
            }
            __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L69_bool_binop_done:;
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":1124
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 */
              __pyx_v_overlap = (__pyx_v_overlap + ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]));

              /* "debugblock/new_topk_sim_join.pyx":1125
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

              /* "debugblock/new_topk_sim_join.pyx":1123
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                             overlap += active_dict[l_rec_idx][r_rec_idx]
 *                             active_dict[l_rec_idx].erase(r_rec_idx)
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":1131
 *                         #     printf("%d\n", overlap)
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 */
            __pyx_t_13 = (__pyx_v_overlap * 1.0);
            __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
            if (unlikely(__pyx_t_3 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

            /* "debugblock/new_topk_sim_join.pyx":1132
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":1133
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":1134
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 */
                __pyx_v_topk_heap.pop();

                /* "debugblock/new_topk_sim_join.pyx":1135
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                /* "debugblock/new_topk_sim_join.pyx":1133
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:
 *                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                 topk_heap.pop()
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
              }

              /* "debugblock/new_topk_sim_join.pyx":1132
 * 
 *                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                             if topk_heap.top().sim < sim:
 *                                 topk_heap.pop()
 */
              goto __pyx_L71;
            }

            /* "debugblock/new_topk_sim_join.pyx":1137
 *                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                         else:
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                         total_compared_pairs += 1
 */
            /*else*/ {
              __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
            }
            __pyx_L71:;

            /* "debugblock/new_topk_sim_join.pyx":1139
 *                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                         total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                     # elif ltoken_vector[l_rec_idx][l_tok_idx + 1] == rtoken_vector[r_rec_idx][r_tok_idx + 1]:
 *                     #     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
            __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

            /* "debugblock/new_topk_sim_join.pyx":1121
 *                         continue
 * 
 *                     if l_rec_idx + 1 == l_len or r_rec_idx + 1 == r_len:             # <<<<<<<<<<<<<<
 *                         overlap = 1
 *                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
            goto __pyx_L65;
          }

          /* "debugblock/new_topk_sim_join.pyx":1201
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
          /*else*/ {
            __pyx_t_1 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":1202
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
              __pyx_t_1 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
              if (__pyx_t_1) {

                /* "debugblock/new_topk_sim_join.pyx":1203
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 */
                __pyx_v_value = ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                /* "debugblock/new_topk_sim_join.pyx":1204
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_count += 1
 */
                __pyx_t_1 = ((__pyx_v_value == __pyx_v_prefix_match_max_size) != 0);
                if (__pyx_t_1) {

                  /* "debugblock/new_topk_sim_join.pyx":1205
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
                  __pyx_t_2 = (__pyx_v_reuse_set.count(__pyx_v_l_rec_idx) != 0);
                  if (__pyx_t_2) {
                  } else {
                    __pyx_t_1 = __pyx_t_2;
                    goto __pyx_L77_bool_binop_done;
                  }
                  __pyx_t_2 = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                  __pyx_t_1 = __pyx_t_2;
                  __pyx_L77_bool_binop_done:;
                  if (__pyx_t_1) {

                    /* "debugblock/new_topk_sim_join.pyx":1206
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_count += 1             # <<<<<<<<<<<<<<
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 */
                    __pyx_v_reuse_count = (__pyx_v_reuse_count + 1);

                    /* "debugblock/new_topk_sim_join.pyx":1207
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]             # <<<<<<<<<<<<<<
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap
 */
                    __pyx_v_reuse_info = ((__pyx_v_reuse_set[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]);

                    /* "debugblock/new_topk_sim_join.pyx":1208
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap             # <<<<<<<<<<<<<<
 *                                         denom = l_len + r_len - overlap
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 */
                    __pyx_t_3 = __pyx_v_reuse_info.overlap;
                    __pyx_v_overlap = __pyx_t_3;

                    /* "debugblock/new_topk_sim_join.pyx":1209
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 *                                         overlap = reuse_info.overlap
 *                                         denom = l_len + r_len - overlap             # <<<<<<<<<<<<<<
 *                                         # if l_rec_idx == 3482 and r_rec_idx == 4047:
 *                                         #     printf("right3\n")
 */
                    __pyx_v_denom = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);

                    /* "debugblock/new_topk_sim_join.pyx":1216
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    __pyx_t_2 = ((__pyx_v_denom <= 0) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L80_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_topk_heap.size() < __pyx_v_output_size) != 0);
                    if (!__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L80_bool_binop_done;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1217
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:             # <<<<<<<<<<<<<<
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 */
                    __pyx_t_13 = (__pyx_v_overlap * 1.0);
                    if (unlikely(__pyx_v_denom == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_t_2 = (((__pyx_t_13 / __pyx_v_denom) > __pyx_v_topk_heap.top().sim) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L80_bool_binop_done:;

                    /* "debugblock/new_topk_sim_join.pyx":1216
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1218
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      __pyx_t_8 = &__pyx_v_reuse_info.map;
                      __pyx_t_7 = __pyx_t_8->begin();
                      for (;;) {
                        if (!(__pyx_t_7 != __pyx_t_8->end())) break;
                        __pyx_t_9 = *__pyx_t_7;
                        ++__pyx_t_7;
                        __pyx_v_field_pair = __pyx_t_9;

                        /* "debugblock/new_topk_sim_join.pyx":1219
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        else if (sizeof(int) == sizeof(long) && (!(((int const )-1) > 0)) && unlikely(__pyx_v_offset_of_field_num == (int const )-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_field_pair.first))) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_lfield = __Pyx_div_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "debugblock/new_topk_sim_join.pyx":1220
 *                                             for field_pair in reuse_info.map:
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num             # <<<<<<<<<<<<<<
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 */
                        if (unlikely(__pyx_v_offset_of_field_num == 0)) {
                          #ifdef WITH_THREAD
                          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                          #endif
                          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
                          #ifdef WITH_THREAD
                          PyGILState_Release(__pyx_gilstate_save);
                          #endif
                          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        }
                        __pyx_v_rfield = __Pyx_mod_int(__pyx_v_field_pair.first, __pyx_v_offset_of_field_num);

                        /* "debugblock/new_topk_sim_join.pyx":1221
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_lfield) != 0)) != 0);
                        if (!__pyx_t_2) {
                        } else {
                          __pyx_t_1 = __pyx_t_2;
                          goto __pyx_L86_bool_binop_done;
                        }
                        __pyx_t_2 = ((!(__pyx_v_remained_fields.count(__pyx_v_rfield) != 0)) != 0);
                        __pyx_t_1 = __pyx_t_2;
                        __pyx_L86_bool_binop_done:;
                        if (__pyx_t_1) {

                          /* "debugblock/new_topk_sim_join.pyx":1222
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second             # <<<<<<<<<<<<<<
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 */
                          __pyx_v_overlap = (__pyx_v_overlap - __pyx_v_field_pair.second);

                          /* "debugblock/new_topk_sim_join.pyx":1221
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):             # <<<<<<<<<<<<<<
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                        }

                        /* "debugblock/new_topk_sim_join.pyx":1218
 *                                         if denom <= 0 or topk_heap.size() < output_size or \
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:             # <<<<<<<<<<<<<<
 *                                                 lfield = field_pair.first / offset_of_field_num
 *                                                 rfield = field_pair.first % offset_of_field_num
 */
                      }

                      /* "debugblock/new_topk_sim_join.pyx":1223
 *                                                 if not remained_fields.count(lfield) or not remained_fields.count(rfield):
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 */
                      __pyx_t_13 = (__pyx_v_overlap * 1.0);
                      __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                      if (unlikely(__pyx_t_3 == 0)) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

                      /* "debugblock/new_topk_sim_join.pyx":1224
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                      if (__pyx_t_1) {

                        /* "debugblock/new_topk_sim_join.pyx":1225
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                        if (__pyx_t_1) {

                          /* "debugblock/new_topk_sim_join.pyx":1226
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 */
                          __pyx_v_topk_heap.pop();

                          /* "debugblock/new_topk_sim_join.pyx":1227
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                          /* "debugblock/new_topk_sim_join.pyx":1225
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:
 *                                                 if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                     topk_heap.pop()
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        }

                        /* "debugblock/new_topk_sim_join.pyx":1224
 *                                                     overlap -= field_pair.second
 *                                             sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                             if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                                 if topk_heap.top().sim < sim:
 *                                                     topk_heap.pop()
 */
                        goto __pyx_L88;
                      }

                      /* "debugblock/new_topk_sim_join.pyx":1229
 *                                                     topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                             else:
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                      /*else*/ {
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                      }
                      __pyx_L88:;

                      /* "debugblock/new_topk_sim_join.pyx":1216
 *                                         #         printf("%d %d ", field_pair.first, field_pair.second)
 *                                         #     printf("\n")
 *                                         if denom <= 0 or topk_heap.size() < output_size or \             # <<<<<<<<<<<<<<
 *                                                 overlap * 1.0 / denom > topk_heap.top().sim:
 *                                             for field_pair in reuse_info.map:
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1231
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1232
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "debugblock/new_topk_sim_join.pyx":1231
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L90;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1234
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "debugblock/new_topk_sim_join.pyx":1235
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L90:;

                    /* "debugblock/new_topk_sim_join.pyx":1237
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                                     else:
 */
                    __pyx_t_2 = (__pyx_v_active_dict.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_2) {
                    } else {
                      __pyx_t_1 = __pyx_t_2;
                      goto __pyx_L92_bool_binop_done;
                    }
                    __pyx_t_2 = ((__pyx_v_active_dict[__pyx_v_l_rec_idx]).count(__pyx_v_r_rec_idx) != 0);
                    __pyx_t_1 = __pyx_t_2;
                    __pyx_L92_bool_binop_done:;
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1238
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         # overlap = value
 */
                      (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                      /* "debugblock/new_topk_sim_join.pyx":1237
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                         if active_dict.count(l_rec_idx) and active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                             active_dict[l_rec_idx].erase(r_rec_idx)
 *                                     else:
 */
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1205
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                         reuse_count += 1
 *                                         reuse_info = reuse_set[l_rec_idx][r_rec_idx]
 */
                    goto __pyx_L76;
                  }

                  /* "debugblock/new_topk_sim_join.pyx":1243
 *                                         # overlap += new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                         #                            l_tok_idx, r_tok_idx)
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],             # <<<<<<<<<<<<<<
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 */
                  /*else*/ {
                    __pyx_v_overlap = __pyx_f_10debugblock_17new_topk_sim_join_new_get_overlap((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]), (__pyx_v_rtoken_vector[__pyx_v_r_rec_idx]), 0, 0);

                    /* "debugblock/new_topk_sim_join.pyx":1245
 *                                         overlap = new_get_overlap(ltoken_vector[l_rec_idx], rtoken_vector[r_rec_idx],
 *                                                                    0, 0)
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 */
                    (__pyx_v_active_dict[__pyx_v_l_rec_idx]).erase(__pyx_v_r_rec_idx);

                    /* "debugblock/new_topk_sim_join.pyx":1247
 *                                         active_dict[l_rec_idx].erase(r_rec_idx)
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)             # <<<<<<<<<<<<<<
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 */
                    __pyx_t_13 = (__pyx_v_overlap * 1.0);
                    __pyx_t_3 = ((__pyx_v_l_len + __pyx_v_r_len) - __pyx_v_overlap);
                    if (unlikely(__pyx_t_3 == 0)) {
                      #ifdef WITH_THREAD
                      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                      #endif
                      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                      #ifdef WITH_THREAD
                      PyGILState_Release(__pyx_gilstate_save);
                      #endif
                      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    }
                    __pyx_v_sim = (__pyx_t_13 / __pyx_t_3);

                    /* "debugblock/new_topk_sim_join.pyx":1248
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                    __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1249
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
                      if (__pyx_t_1) {

                        /* "debugblock/new_topk_sim_join.pyx":1250
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()             # <<<<<<<<<<<<<<
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 */
                        __pyx_v_topk_heap.pop();

                        /* "debugblock/new_topk_sim_join.pyx":1251
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                        __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));

                        /* "debugblock/new_topk_sim_join.pyx":1249
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:
 *                                             if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                                                 topk_heap.pop()
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 */
                      }

                      /* "debugblock/new_topk_sim_join.pyx":1248
 * 
 *                                         sim = overlap * 1.0 / (l_len + r_len - overlap)
 *                                         if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                                             if topk_heap.top().sim < sim:
 *                                                 topk_heap.pop()
 */
                      goto __pyx_L94;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1253
 *                                                 topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 *                                         else:
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))             # <<<<<<<<<<<<<<
 * 
 *                                         if compared_set.count(l_rec_idx):
 */
                    /*else*/ {
                      __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_r_rec_idx));
                    }
                    __pyx_L94:;

                    /* "debugblock/new_topk_sim_join.pyx":1255
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                    __pyx_t_1 = (__pyx_v_compared_set.count(__pyx_v_l_rec_idx) != 0);
                    if (__pyx_t_1) {

                      /* "debugblock/new_topk_sim_join.pyx":1256
 * 
 *                                         if compared_set.count(l_rec_idx):
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);

                      /* "debugblock/new_topk_sim_join.pyx":1255
 *                                             topk_heap.push(TopPair(sim, l_rec_idx, r_rec_idx))
 * 
 *                                         if compared_set.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 */
                      goto __pyx_L96;
                    }

                    /* "debugblock/new_topk_sim_join.pyx":1258
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()             # <<<<<<<<<<<<<<
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 */
                    /*else*/ {
                      try {
                        __pyx_t_10 = std::unordered_set<int> ();
                      } catch(...) {
                        #ifdef WITH_THREAD
                        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                        #endif
                        __Pyx_CppExn2PyErr();
                        #ifdef WITH_THREAD
                        PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      }
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]) = __pyx_t_10;

                      /* "debugblock/new_topk_sim_join.pyx":1259
 *                                         else:
 *                                             compared_set[l_rec_idx] = uset[int]()
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)             # <<<<<<<<<<<<<<
 * 
 *                                     total_compared_pairs += 1
 */
                      (__pyx_v_compared_set[__pyx_v_l_rec_idx]).insert(__pyx_v_r_rec_idx);
                    }
                    __pyx_L96:;
                  }
                  __pyx_L76:;

                  /* "debugblock/new_topk_sim_join.pyx":1261
 *                                             compared_set[l_rec_idx].insert(r_rec_idx)
 * 
 *                                     total_compared_pairs += 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 */
                  __pyx_v_total_compared_pairs = (__pyx_v_total_compared_pairs + 1);

                  /* "debugblock/new_topk_sim_join.pyx":1204
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:             # <<<<<<<<<<<<<<
 *                                     if reuse_set.count(l_rec_idx) and reuse_set[l_rec_idx].count(r_rec_idx):
 *                                         reuse_count += 1
 */
                  goto __pyx_L75;
                }

                /* "debugblock/new_topk_sim_join.pyx":1263
 *                                     total_compared_pairs += 1
 *                                 else:
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 */
                /*else*/ {
                  __pyx_t_3 = __pyx_v_l_rec_idx;
                  __pyx_t_11 = __pyx_v_r_rec_idx;
                  ((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) = (((__pyx_v_active_dict[__pyx_t_3])[__pyx_t_11]) + 1);
                }
                __pyx_L75:;

                /* "debugblock/new_topk_sim_join.pyx":1202
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):
 *                             if active_dict[l_rec_idx].count(r_rec_idx):             # <<<<<<<<<<<<<<
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 *                                 if value == prefix_match_max_size:
 */
                goto __pyx_L74;
              }

              /* "debugblock/new_topk_sim_join.pyx":1265
 *                                     active_dict[l_rec_idx][r_rec_idx] += 1
 *                             else:
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 */
              /*else*/ {
                ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
              }
              __pyx_L74:;

              /* "debugblock/new_topk_sim_join.pyx":1201
 *                     else:
 *                         # printf("right3\n")
 *                         if active_dict.count(l_rec_idx):             # <<<<<<<<<<<<<<
 *                             if active_dict[l_rec_idx].count(r_rec_idx):
 *                                 value = active_dict[l_rec_idx][r_rec_idx]
 */
              goto __pyx_L73;
            }

            /* "debugblock/new_topk_sim_join.pyx":1267
 *                                 active_dict[l_rec_idx][r_rec_idx] = 1
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()             # <<<<<<<<<<<<<<
 *                             active_dict[l_rec_idx][r_rec_idx] = 1
 *                     # printf("pass check\n")
 */
            /*else*/ {
              try {
                __pyx_t_12 = std::unordered_map<int,short> ();
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              (__pyx_v_active_dict[__pyx_v_l_rec_idx]) = __pyx_t_12;

              /* "debugblock/new_topk_sim_join.pyx":1268
 *                         else:
 *                             active_dict[l_rec_idx] = umap[int, short]()
 *                             active_dict[l_rec_idx][r_rec_idx] = 1             # <<<<<<<<<<<<<<
 *                     # printf("pass check\n")
 * 
 */
              ((__pyx_v_active_dict[__pyx_v_l_rec_idx])[__pyx_v_r_rec_idx]) = 1;
            }
            __pyx_L73:;
          }
          __pyx_L65:;

          /* "debugblock/new_topk_sim_join.pyx":1271
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          __pyx_t_2 = (((__pyx_v_total_compared_pairs % 0x186A0) == 0) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_1 = __pyx_t_2;
            goto __pyx_L98_bool_binop_done;
          }

          /* "debugblock/new_topk_sim_join.pyx":1272
 * 
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:             # <<<<<<<<<<<<<<
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 */
          __pyx_t_2 = ((__pyx_v_total_compared_pairs_set.count(__pyx_v_total_compared_pairs) <= 0) != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L98_bool_binop_done:;

          /* "debugblock/new_topk_sim_join.pyx":1271
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":1273
 *                     if total_compared_pairs % 100000 == 0 and \
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)             # <<<<<<<<<<<<<<
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 */
            __pyx_v_total_compared_pairs_set.insert(__pyx_v_total_compared_pairs);

            /* "debugblock/new_topk_sim_join.pyx":1274
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            __pyx_t_1 = ((__pyx_v_topk_heap.size() > 0) != 0);
            if (__pyx_t_1) {

              /* "debugblock/new_topk_sim_join.pyx":1275
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",             # <<<<<<<<<<<<<<
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 *                                    prefix_events.top().threshold, prefix_events.top().table_indicator,
 */
              printf(__pyx_k_ld_16f_d_d_16f_d_d_d, __pyx_v_total_compared_pairs, __pyx_v_topk_heap.top().sim, __pyx_v_topk_heap.top().l_rec, __pyx_v_topk_heap.top().r_rec, __pyx_v_prefix_events.top().threshold, __pyx_v_prefix_events.top().table_indicator, __pyx_v_prefix_events.top().rec_idx, __pyx_v_prefix_events.top().tok_idx);

              /* "debugblock/new_topk_sim_join.pyx":1274
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 *                         if topk_heap.size() > 0:             # <<<<<<<<<<<<<<
 *                             printf("%ld (%.16f %d %d) (%.16f %d %d %d)\n",
 *                                    total_compared_pairs, topk_heap.top().sim, topk_heap.top().l_rec, topk_heap.top().r_rec,
 */
            }

            /* "debugblock/new_topk_sim_join.pyx":1271
 *                     # printf("pass check\n")
 * 
 *                     if total_compared_pairs % 100000 == 0 and \             # <<<<<<<<<<<<<<
 *                             total_compared_pairs_set.count(total_compared_pairs) <= 0:
 *                         total_compared_pairs_set.insert(total_compared_pairs)
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":1110
 *             if l_inverted_index.count(token):
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:             # <<<<<<<<<<<<<<
 *                     l_rec_idx = l_rec_tuple.first
 *                     l_tok_idx = l_rec_tuple.second
 */
          __pyx_L57_continue:;
        }

        /* "debugblock/new_topk_sim_join.pyx":1108
 *             token = rtoken_vector[r_rec_idx][r_tok_idx]
 *             r_len = rtoken_vector[r_rec_idx].size()
 *             if l_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 l_records = l_inverted_index[token]
 *                 for l_rec_tuple in l_records:
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":1280
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      __pyx_t_1 = (((__pyx_v_r_tok_idx + 1) < __pyx_v_r_len) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":1281
 * 
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)             # <<<<<<<<<<<<<<
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 */
        __pyx_t_13 = 1.0;
        __pyx_t_6 = (((__pyx_v_r_tok_idx + 1) - __pyx_v_prefix_match_max_size) * 1.0);
        if (unlikely(__pyx_v_r_len == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_14 = (1.0 - (__pyx_t_6 / __pyx_v_r_len));
        if (((__pyx_t_13 < __pyx_t_14) != 0)) {
          __pyx_t_6 = __pyx_t_13;
        } else {
          __pyx_t_6 = __pyx_t_14;
        }
        __pyx_v_threshold = __pyx_t_6;

        /* "debugblock/new_topk_sim_join.pyx":1282
 *             if r_tok_idx + 1 < r_len:
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))             # <<<<<<<<<<<<<<
 * 
 *             if not r_inverted_index.count(token):
 */
        __pyx_v_prefix_events.push(PrefixEvent(__pyx_v_threshold, __pyx_v_table_indicator, __pyx_v_r_rec_idx, (__pyx_v_r_tok_idx + 1)));

        /* "debugblock/new_topk_sim_join.pyx":1280
 *                                    prefix_events.top().rec_idx, prefix_events.top().tok_idx)
 * 
 *             if r_tok_idx + 1 < r_len:             # <<<<<<<<<<<<<<
 *                 threshold = min(1 - (r_tok_idx + 1 - prefix_match_max_size) * 1.0 / r_len, 1.0)
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":1284
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      __pyx_t_1 = ((!(__pyx_v_r_inverted_index.count(__pyx_v_token) != 0)) != 0);
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":1285
 * 
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()             # <<<<<<<<<<<<<<
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 *         # printf("finish\n")
 */
        try {
          __pyx_t_15 = std::set<std::pair<int,int> > ();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_r_inverted_index[__pyx_v_token]) = __pyx_t_15;

        /* "debugblock/new_topk_sim_join.pyx":1284
 *                 prefix_events.push(PrefixEvent(threshold, table_indicator, r_rec_idx, r_tok_idx + 1))
 * 
 *             if not r_inverted_index.count(token):             # <<<<<<<<<<<<<<
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":1286
 *             if not r_inverted_index.count(token):
 *                 r_inverted_index[token] = oset[pair[int, int]]()
 *             r_inverted_index[token].insert(pair[int, int](r_rec_idx, r_tok_idx))             # <<<<<<<<<<<<<<
 *         # printf("finish\n")
 * 
 */
      try {
        __pyx_t_5 = std::pair<int,int> (__pyx_v_r_rec_idx, __pyx_v_r_tok_idx);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        (__pyx_v_r_inverted_index[__pyx_v_token]).insert(__pyx_t_5);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L8:;
  }
  __pyx_L4_break:;

  /* "debugblock/new_topk_sim_join.pyx":1291
 *     # printf("checkpoint3\n")
 * 
 *     cdef double bound = 1e-6             # <<<<<<<<<<<<<<
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold
 */
  __pyx_v_bound = 1e-6;

  /* "debugblock/new_topk_sim_join.pyx":1292
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  __pyx_t_1 = ((__pyx_v_prefix_events.size() > 0) != 0);
  if (__pyx_t_1) {

    /* "debugblock/new_topk_sim_join.pyx":1293
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:
 *         bound = prefix_events.top().threshold             # <<<<<<<<<<<<<<
 * 
 *     cdef pair[int, umap[int, short]] p1
 */
    __pyx_t_6 = __pyx_v_prefix_events.top().threshold;
    __pyx_v_bound = __pyx_t_6;

    /* "debugblock/new_topk_sim_join.pyx":1292
 * 
 *     cdef double bound = 1e-6
 *     if prefix_events.size() > 0:             # <<<<<<<<<<<<<<
 *         bound = prefix_events.top().threshold
 * 
 */
  }

  /* "debugblock/new_topk_sim_join.pyx":1297
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  __pyx_t_16 = __pyx_v_active_dict.begin();
  for (;;) {
    if (!(__pyx_t_16 != __pyx_v_active_dict.end())) break;
    __pyx_t_17 = *__pyx_t_16;
    ++__pyx_t_16;
    __pyx_v_p1 = __pyx_t_17;

    /* "debugblock/new_topk_sim_join.pyx":1298
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first             # <<<<<<<<<<<<<<
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 */
    __pyx_t_3 = __pyx_v_p1.first;
    __pyx_v_l_rec_idx = __pyx_t_3;

    /* "debugblock/new_topk_sim_join.pyx":1299
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    __pyx_t_19 = &__pyx_v_p1.second;
    __pyx_t_18 = __pyx_t_19->begin();
    for (;;) {
      if (!(__pyx_t_18 != __pyx_t_19->end())) break;
      __pyx_t_20 = *__pyx_t_18;
      ++__pyx_t_18;
      __pyx_v_p2 = __pyx_t_20;

      /* "debugblock/new_topk_sim_join.pyx":1300
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      __pyx_t_21 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() < (__pyx_t_21 / __pyx_v_bound)) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L109_bool_binop_done;
      }

      /* "debugblock/new_topk_sim_join.pyx":1301
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:             # <<<<<<<<<<<<<<
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 */
      __pyx_t_21 = (__pyx_v_prefix_match_max_size + 1);
      if (unlikely(__pyx_v_bound == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_2 = (((__pyx_v_rtoken_vector[__pyx_v_p2.first]).size() < (__pyx_t_21 / __pyx_v_bound)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L109_bool_binop_done:;

      /* "debugblock/new_topk_sim_join.pyx":1300
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      if (__pyx_t_1) {

        /* "debugblock/new_topk_sim_join.pyx":1302
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second             # <<<<<<<<<<<<<<
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 */
        __pyx_t_22 = __pyx_v_p2.second;
        __pyx_v_value = __pyx_t_22;

        /* "debugblock/new_topk_sim_join.pyx":1303
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)             # <<<<<<<<<<<<<<
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 */
        __pyx_t_6 = (__pyx_v_value * 1.0);
        __pyx_t_23 = (((__pyx_v_ltoken_vector[__pyx_v_l_rec_idx]).size() + (__pyx_v_rtoken_vector[__pyx_v_p2.first]).size()) - __pyx_v_value);
        if (unlikely(__pyx_t_23 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_sim = (__pyx_t_6 / __pyx_t_23);

        /* "debugblock/new_topk_sim_join.pyx":1304
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
        __pyx_t_1 = ((__pyx_v_topk_heap.size() == __pyx_v_output_size) != 0);
        if (__pyx_t_1) {

          /* "debugblock/new_topk_sim_join.pyx":1305
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          __pyx_t_1 = ((__pyx_v_topk_heap.top().sim < __pyx_v_sim) != 0);
          if (__pyx_t_1) {

            /* "debugblock/new_topk_sim_join.pyx":1306
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()             # <<<<<<<<<<<<<<
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 */
            __pyx_v_topk_heap.pop();

            /* "debugblock/new_topk_sim_join.pyx":1307
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
            __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));

            /* "debugblock/new_topk_sim_join.pyx":1305
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:
 *                     if topk_heap.top().sim < sim:             # <<<<<<<<<<<<<<
 *                         topk_heap.pop()
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 */
          }

          /* "debugblock/new_topk_sim_join.pyx":1304
 *                 value = p2.second
 *                 sim = value * 1.0 / (ltoken_vector[l_rec_idx].size() + rtoken_vector[p2.first].size() - value)
 *                 if topk_heap.size() == output_size:             # <<<<<<<<<<<<<<
 *                     if topk_heap.top().sim < sim:
 *                         topk_heap.pop()
 */
          goto __pyx_L111;
        }

        /* "debugblock/new_topk_sim_join.pyx":1309
 *                         topk_heap.push(TopPair(sim, l_rec_idx, p2.first))
 *                 else:
 *                     topk_heap.push(TopPair(sim, l_rec_idx, p2.first))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_v_topk_heap.push(TopPair(__pyx_v_sim, __pyx_v_l_rec_idx, __pyx_v_p2.first));
        }
        __pyx_L111:;

        /* "debugblock/new_topk_sim_join.pyx":1300
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\             # <<<<<<<<<<<<<<
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 *                 value = p2.second
 */
      }

      /* "debugblock/new_topk_sim_join.pyx":1299
 *     for p1 in active_dict:
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:             # <<<<<<<<<<<<<<
 *             if ltoken_vector[l_rec_idx].size() < (prefix_match_max_size + 1) / bound and\
 *                     rtoken_vector[p2.first].size() < (prefix_match_max_size + 1) / bound:
 */
    }

    /* "debugblock/new_topk_sim_join.pyx":1297
 *     cdef pair[int, umap[int, short]] p1
 *     cdef pair[int, short] p2
 *     for p1 in active_dict:             # <<<<<<<<<<<<<<
 *         l_rec_idx = p1.first
 *         for p2 in p1.second:
 */
  }

  /* "debugblock/new_topk_sim_join.pyx":1312
 * 
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)             # <<<<<<<<<<<<<<
 *     printf("number of reused pairs: %d\n", reuse_count)
 *     # printf("checkpoint4\n")
 */
  printf(__pyx_k_number_of_compared_pairs_ld, __pyx_v_total_compared_pairs);

  /* "debugblock/new_topk_sim_join.pyx":1313
 * 
 *     printf("number of compared pairs: %ld\n", total_compared_pairs)
 *     printf("number of reused pairs: %d\n", reuse_count)             # <<<<<<<<<<<<<<
 *     # printf("checkpoint4\n")
 * 
 */
  printf(__pyx_k_number_of_reused_pairs_d, __pyx_v_reuse_count);

  /* "debugblock/new_topk_sim_join.pyx":1316
 *     # printf("checkpoint4\n")
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":874
 * 
 * 
 * cdef void new_topk_sim_join_reuse_impl(const vector[vector[int]]& ltoken_vector,             # <<<<<<<<<<<<<<
 *                                        const vector[vector[int]]& rtoken_vector,
 *                                        uset[int]& remained_fields, umap[int, uset[int]]& cand_set,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("debugblock.new_topk_sim_join.new_topk_sim_join_reuse_impl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "debugblock/new_topk_sim_join.pyx":1319
 * 
 * 
 * cdef int new_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                          const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0
 */

static int __pyx_f_10debugblock_17new_topk_sim_join_new_get_overlap(std::vector<int>  const &__pyx_v_ltoken_list, std::vector<int>  const &__pyx_v_rtoken_list, int const __pyx_v_l_tok_idx, int const __pyx_v_r_tok_idx) {
  int __pyx_v_overlap;
  uint32_t __pyx_v_i;
  std::unordered_set<int>  __pyx_v_rset;
  int __pyx_r;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "debugblock/new_topk_sim_join.pyx":1321
 * cdef int new_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,
 *                          const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0             # <<<<<<<<<<<<<<
 *     cdef uint i
 * 
 */
  __pyx_v_overlap = 0;

  /* "debugblock/new_topk_sim_join.pyx":1325
 * 
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size() - r_tok_idx):             # <<<<<<<<<<<<<<
 *         rset.insert(rtoken_list[i + r_tok_idx])
 * 
 */
  __pyx_t_1 = (__pyx_v_rtoken_list.size() - __pyx_v_r_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":1326
 *     cdef uset[int] rset
 *     for i in xrange(rtoken_list.size() - r_tok_idx):
 *         rset.insert(rtoken_list[i + r_tok_idx])             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 */
    __pyx_v_rset.insert((__pyx_v_rtoken_list[(__pyx_v_i + __pyx_v_r_tok_idx)]));
  }

  /* "debugblock/new_topk_sim_join.pyx":1328
 *         rset.insert(rtoken_list[i + r_tok_idx])
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):             # <<<<<<<<<<<<<<
 *         if rset.count(ltoken_list[i + l_tok_idx]):
 *             overlap += 1
 */
  __pyx_t_1 = (__pyx_v_ltoken_list.size() - __pyx_v_l_tok_idx);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":1329
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    __pyx_t_3 = (__pyx_v_rset.count((__pyx_v_ltoken_list[(__pyx_v_i + __pyx_v_l_tok_idx)])) != 0);
    if (__pyx_t_3) {

      /* "debugblock/new_topk_sim_join.pyx":1330
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):
 *             overlap += 1             # <<<<<<<<<<<<<<
 * 
 *     return overlap
 */
      __pyx_v_overlap = (__pyx_v_overlap + 1);

      /* "debugblock/new_topk_sim_join.pyx":1329
 * 
 *     for i in xrange(ltoken_list.size() - l_tok_idx):
 *         if rset.count(ltoken_list[i + l_tok_idx]):             # <<<<<<<<<<<<<<
 *             overlap += 1
 * 
 */
    }
  }

  /* "debugblock/new_topk_sim_join.pyx":1332
 *             overlap += 1
 * 
 *     return overlap             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":1319
 * 
 * 
 * cdef int new_get_overlap(const vector[int]& ltoken_list, const vector[int]& rtoken_list,             # <<<<<<<<<<<<<<
 *                          const int l_tok_idx, const int r_tok_idx) nogil:
 *     cdef int overlap = 0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "debugblock/new_topk_sim_join.pyx":1339
 * ####################################################################################################
 * ####################################################################################################
 * cdef void new_generate_prefix_events(const vector[vector[int]]& ltable,             # <<<<<<<<<<<<<<
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 */

static void __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events(std::vector<std::vector<int> >  const &__pyx_v_ltable, std::vector<std::vector<int> >  const &__pyx_v_rtable, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events) {

  /* "debugblock/new_topk_sim_join.pyx":1342
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 *     new_generate_prefix_events_impl(ltable, 0, prefix_events)             # <<<<<<<<<<<<<<
 *     new_generate_prefix_events_impl(rtable, 1, prefix_events)
 * 
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events_impl(__pyx_v_ltable, 0, __pyx_v_prefix_events);

  /* "debugblock/new_topk_sim_join.pyx":1343
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 *     new_generate_prefix_events_impl(ltable, 0, prefix_events)
 *     new_generate_prefix_events_impl(rtable, 1, prefix_events)             # <<<<<<<<<<<<<<
 * 
 *     return
 */
  __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events_impl(__pyx_v_rtable, 1, __pyx_v_prefix_events);

  /* "debugblock/new_topk_sim_join.pyx":1345
 *     new_generate_prefix_events_impl(rtable, 1, prefix_events)
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":1339
 * ####################################################################################################
 * ####################################################################################################
 * cdef void new_generate_prefix_events(const vector[vector[int]]& ltable,             # <<<<<<<<<<<<<<
 *                                  const vector[vector[int]]& rtable,
 *                                  heap[PrefixEvent]& prefix_events) nogil:
 */

  /* function exit code */
  __pyx_L0:;
}

/* "debugblock/new_topk_sim_join.pyx":1348
 * 
 * 
 * cdef void new_generate_prefix_events_impl(const vector[vector[int]]& table,             # <<<<<<<<<<<<<<
 *                                       const int table_indicator,
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 */

static void __pyx_f_10debugblock_17new_topk_sim_join_new_generate_prefix_events_impl(std::vector<std::vector<int> >  const &__pyx_v_table, int const __pyx_v_table_indicator, std::priority_queue<PrefixEvent>  &__pyx_v_prefix_events) {
  uint32_t __pyx_v_i;
  uint32_t __pyx_v_length;
  size_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_t_3;

  /* "debugblock/new_topk_sim_join.pyx":1352
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 *     cdef uint i, length
 *     for i in xrange(table.size()):             # <<<<<<<<<<<<<<
 *         length = table[i].size()
 *         if length > 0:
 */
  __pyx_t_1 = __pyx_v_table.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "debugblock/new_topk_sim_join.pyx":1353
 *     cdef uint i, length
 *     for i in xrange(table.size()):
 *         length = table[i].size()             # <<<<<<<<<<<<<<
 *         if length > 0:
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 */
    __pyx_v_length = (__pyx_v_table[__pyx_v_i]).size();

    /* "debugblock/new_topk_sim_join.pyx":1354
 *     for i in xrange(table.size()):
 *         length = table[i].size()
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 * 
 */
    __pyx_t_3 = ((__pyx_v_length > 0) != 0);
    if (__pyx_t_3) {

      /* "debugblock/new_topk_sim_join.pyx":1355
 *         length = table[i].size()
 *         if length > 0:
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))             # <<<<<<<<<<<<<<
 * 
 *     return
 */
      __pyx_v_prefix_events.push(PrefixEvent(1.0, __pyx_v_table_indicator, __pyx_v_i, 0));

      /* "debugblock/new_topk_sim_join.pyx":1354
 *     for i in xrange(table.size()):
 *         length = table[i].size()
 *         if length > 0:             # <<<<<<<<<<<<<<
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 * 
 */
    }
  }

  /* "debugblock/new_topk_sim_join.pyx":1357
 *             prefix_events.push(PrefixEvent(1.0, table_indicator, i, 0))
 * 
 *     return             # <<<<<<<<<<<<<<
 */
  goto __pyx_L0;

  /* "debugblock/new_topk_sim_join.pyx":1348
 * 
 * 
 * cdef void new_generate_prefix_events_impl(const vector[vector[int]]& table,             # <<<<<<<<<<<<<<
 *                                       const int table_indicator,
 *                                       heap[PrefixEvent]& prefix_events) nogil:
 */

  /* function exit code */
  __pyx_L0:;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "new_topk_sim_join",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initnew_topk_sim_join(void); /*proto*/
PyMODINIT_FUNC initnew_topk_sim_join(void)
#else
PyMODINIT_FUNC PyInit_new_topk_sim_join(void); /*proto*/
PyMODINIT_FUNC PyInit_new_topk_sim_join(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_new_topk_sim_join(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("new_topk_sim_join", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_debugblock__new_topk_sim_join) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "debugblock.new_topk_sim_join")) {
      if (unlikely(PyDict_SetItemString(modules, "debugblock.new_topk_sim_join", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "debugblock/new_topk_sim_join.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * from libcpp.unordered_set cimport unordered_set as uset
 * from libcpp.unordered_map cimport unordered_map as umap
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init debugblock.new_topk_sim_join", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init debugblock.new_topk_sim_join");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
